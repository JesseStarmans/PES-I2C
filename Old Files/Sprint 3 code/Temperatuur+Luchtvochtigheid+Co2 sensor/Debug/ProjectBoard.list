
ProjectBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a468  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  0800a5f8  0800a5f8  0001a5f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa2c  0800aa2c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa2c  0800aa2c  0001aa2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa34  0800aa34  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa34  0800aa34  0001aa34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa38  0800aa38  0001aa38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800aa3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  200001d4  0800ac10  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  0800ac10  00020530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014d15  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002acc  00000000  00000000  00034f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001370  00000000  00000000  00037a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f4a  00000000  00000000  00038d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002262e  00000000  00000000  00039ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000177f7  00000000  00000000  0005c310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce6df  00000000  00000000  00073b07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006368  00000000  00000000  001421e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  00148550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a5e0 	.word	0x0800a5e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800a5e0 	.word	0x0800a5e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <process_data>:
//Transmit variabelen
uint8_t txcount = 0;									//Variabele met het aantal verstuurde bytes
uint8_t startPosition = 0;								//Variabele vanaf waar er in het register gelezen moet worden

/*Deze functie wordt aangeroepen als de master klaar is met data verzenden*/
void process_data(void) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
	}
	else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
	}*/

	int startREG = RxData[0];							//Maak een variabele met het eerste getal uit de inlees array
 8000eaa:	4b27      	ldr	r3, [pc, #156]	; (8000f48 <process_data+0xa4>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	617b      	str	r3, [r7, #20]
	int numREG = rxcount-1;								//Maak een variabele met de hoeveelheid ingelezen bytes - 1 (startREG)
 8000eb0:	4b26      	ldr	r3, [pc, #152]	; (8000f4c <process_data+0xa8>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	60bb      	str	r3, [r7, #8]
	int endREG = startREG+numREG-1;						//Maak een variabele met de positie van de laatste byte in het register
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	607b      	str	r3, [r7, #4]
	if (endREG>9){										//Check of de positie van het eindregister groter is dan de grootte van het register
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b09      	cmp	r3, #9
 8000ec6:	dd01      	ble.n	8000ecc <process_data+0x28>
		Error_Handler();								//Roep een error handler aan
 8000ec8:	f000 fe66 	bl	8001b98 <Error_Handler>
	}
	int indx = 1;										//Maak een variabele voor de index
 8000ecc:	2301      	movs	r3, #1
 8000ece:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < numREG; i++) {					//Loop door de hoeveelheid registers die ingelezen zijn
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	e00c      	b.n	8000ef0 <process_data+0x4c>
		I2C_REGISTERS[startREG++] = RxData[indx++];		//Schrijf de data uit de inlees array, in de I2C_REGISTERS (op de juiste plek)
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	1c53      	adds	r3, r2, #1
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	1c59      	adds	r1, r3, #1
 8000ee0:	6179      	str	r1, [r7, #20]
 8000ee2:	4919      	ldr	r1, [pc, #100]	; (8000f48 <process_data+0xa4>)
 8000ee4:	5c89      	ldrb	r1, [r1, r2]
 8000ee6:	4a1a      	ldr	r2, [pc, #104]	; (8000f50 <process_data+0xac>)
 8000ee8:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < numREG; i++) {					//Loop door de hoeveelheid registers die ingelezen zijn
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	3301      	adds	r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	dbee      	blt.n	8000ed6 <process_data+0x32>
	}

	if (RxData[1] == 'A' && RxData[2] == 'a' && RxData[3] == 'n') {
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <process_data+0xa4>)
 8000efa:	785b      	ldrb	r3, [r3, #1]
 8000efc:	2b41      	cmp	r3, #65	; 0x41
 8000efe:	d10d      	bne.n	8000f1c <process_data+0x78>
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <process_data+0xa4>)
 8000f02:	789b      	ldrb	r3, [r3, #2]
 8000f04:	2b61      	cmp	r3, #97	; 0x61
 8000f06:	d109      	bne.n	8000f1c <process_data+0x78>
 8000f08:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <process_data+0xa4>)
 8000f0a:	78db      	ldrb	r3, [r3, #3]
 8000f0c:	2b6e      	cmp	r3, #110	; 0x6e
 8000f0e:	d105      	bne.n	8000f1c <process_data+0x78>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000f10:	2201      	movs	r2, #1
 8000f12:	2110      	movs	r1, #16
 8000f14:	480f      	ldr	r0, [pc, #60]	; (8000f54 <process_data+0xb0>)
 8000f16:	f001 fd1f 	bl	8002958 <HAL_GPIO_WritePin>
	}
	else if (RxData[1] == 'U' && RxData[2] == 'i' && RxData[3] == 't'){
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
	}

}
 8000f1a:	e010      	b.n	8000f3e <process_data+0x9a>
	else if (RxData[1] == 'U' && RxData[2] == 'i' && RxData[3] == 't'){
 8000f1c:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <process_data+0xa4>)
 8000f1e:	785b      	ldrb	r3, [r3, #1]
 8000f20:	2b55      	cmp	r3, #85	; 0x55
 8000f22:	d10c      	bne.n	8000f3e <process_data+0x9a>
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <process_data+0xa4>)
 8000f26:	789b      	ldrb	r3, [r3, #2]
 8000f28:	2b69      	cmp	r3, #105	; 0x69
 8000f2a:	d108      	bne.n	8000f3e <process_data+0x9a>
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <process_data+0xa4>)
 8000f2e:	78db      	ldrb	r3, [r3, #3]
 8000f30:	2b74      	cmp	r3, #116	; 0x74
 8000f32:	d104      	bne.n	8000f3e <process_data+0x9a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2110      	movs	r1, #16
 8000f38:	4806      	ldr	r0, [pc, #24]	; (8000f54 <process_data+0xb0>)
 8000f3a:	f001 fd0d 	bl	8002958 <HAL_GPIO_WritePin>
}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200001fc 	.word	0x200001fc
 8000f4c:	20000207 	.word	0x20000207
 8000f50:	200001f0 	.word	0x200001f0
 8000f54:	48000400 	.word	0x48000400

08000f58 <HAL_I2C_ListenCpltCallback>:

/*Deze Callback wordt aangeroepen als de enable lister IT functie is afgemaakt*/
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);						//Zet enable listen weer aan zodat I2C blijft werken
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f002 f91f 	bl	80031a4 <HAL_I2C_EnableListen_IT>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <HAL_I2C_AddrCallback>:

/*Deze Callback wordt aangeroepen als het verstuurde adres het adres van de slave is*/
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	70fb      	strb	r3, [r7, #3]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	803b      	strh	r3, [r7, #0]
	if (TransferDirection == I2C_DIRECTION_TRANSMIT) {	//Check of er data vanaf de master naar de slave gestuurd wordt
 8000f80:	78fb      	ldrb	r3, [r7, #3]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d112      	bne.n	8000fac <HAL_I2C_AddrCallback+0x3c>
		rxcount = 0;									//Reset hoeveel data er ontvangen is
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <HAL_I2C_AddrCallback+0x6c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
		countAddr++;									//Verhoog de variabele voor het aanroepen van de slave
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <HAL_I2C_AddrCallback+0x70>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	3301      	adds	r3, #1
 8000f92:	4a13      	ldr	r2, [pc, #76]	; (8000fe0 <HAL_I2C_AddrCallback+0x70>)
 8000f94:	6013      	str	r3, [r2, #0]
		HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData + rxcount, 1, I2C_FIRST_FRAME);
 8000f96:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <HAL_I2C_AddrCallback+0x6c>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <HAL_I2C_AddrCallback+0x74>)
 8000f9e:	18d1      	adds	r1, r2, r3
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f002 f84b 	bl	8003040 <HAL_I2C_Slave_Seq_Receive_IT>
		startPosition = RxData[0];						//Zet de startpositie gelijk aan het eerst onvangen getal
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, I2C_REGISTERS+startPosition+txcount, 1, I2C_FIRST_FRAME);
														//Verstuur achtereenvolgend data naar de master en maak van
														//de eerste byte de eerste frame (I2C_FIRST_FRAME)
	}
}
 8000faa:	e013      	b.n	8000fd4 <HAL_I2C_AddrCallback+0x64>
		txcount = 0;									//Reset hoeveel data er verstuurd is
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HAL_I2C_AddrCallback+0x78>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
		startPosition = RxData[0];						//Zet de startpositie gelijk aan het eerst onvangen getal
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <HAL_I2C_AddrCallback+0x74>)
 8000fb4:	781a      	ldrb	r2, [r3, #0]
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <HAL_I2C_AddrCallback+0x7c>)
 8000fb8:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, I2C_REGISTERS+startPosition+txcount, 1, I2C_FIRST_FRAME);
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <HAL_I2C_AddrCallback+0x7c>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <HAL_I2C_AddrCallback+0x78>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <HAL_I2C_AddrCallback+0x80>)
 8000fc8:	1899      	adds	r1, r3, r2
 8000fca:	2300      	movs	r3, #0
 8000fcc:	2201      	movs	r2, #1
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f001 ff84 	bl	8002edc <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000207 	.word	0x20000207
 8000fe0:	20000208 	.word	0x20000208
 8000fe4:	200001fc 	.word	0x200001fc
 8000fe8:	20000210 	.word	0x20000210
 8000fec:	20000211 	.word	0x20000211
 8000ff0:	200001f0 	.word	0x200001f0

08000ff4 <HAL_I2C_SlaveRxCpltCallback>:

/*Deze Callback wordt aangeroepen zodra een receive IT functie afgemaakt is*/
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	rxcount++;											//Verhoog de ingelezen waarde teller met 1
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	3301      	adds	r3, #1
 8001002:	b2da      	uxtb	r2, r3
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8001006:	701a      	strb	r2, [r3, #0]
	if (rxcount < RXSIZE) {								//Check of de ingelezen waarde teller nog kleiner is dan de max
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <HAL_I2C_SlaveRxCpltCallback+0x68>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b0a      	cmp	r3, #10
 800100e:	d81a      	bhi.n	8001046 <HAL_I2C_SlaveRxCpltCallback+0x52>
														//grootte van de inlees array
		if (rxcount == RXSIZE-1) {						//Check of de ingelezen waarde teller precies 1 kleiner is dan de
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b0a      	cmp	r3, #10
 8001016:	d10b      	bne.n	8001030 <HAL_I2C_SlaveRxCpltCallback+0x3c>
														//max grootte van de inlees array
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData + rxcount, 1, I2C_LAST_FRAME);
 8001018:	4b10      	ldr	r3, [pc, #64]	; (800105c <HAL_I2C_SlaveRxCpltCallback+0x68>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	461a      	mov	r2, r3
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 8001020:	18d1      	adds	r1, r2, r3
 8001022:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001026:	2201      	movs	r2, #1
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f002 f809 	bl	8003040 <HAL_I2C_Slave_Seq_Receive_IT>
 800102e:	e00a      	b.n	8001046 <HAL_I2C_SlaveRxCpltCallback+0x52>
														//Lees de volgende frame als de laaste frame in
		}
		else {											//Als rxcount kleiner is dan RXSIZE - 1
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData + rxcount, 1, I2C_NEXT_FRAME);
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 8001038:	18d1      	adds	r1, r2, r3
 800103a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800103e:	2201      	movs	r2, #1
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f001 fffd 	bl	8003040 <HAL_I2C_Slave_Seq_Receive_IT>
														//Lees de volgende verstuurde frame als de volgende frame in de rij frames in
		}
	}

	if (rxcount == RXSIZE) {							//Check of de ingelezen waarde teller gelijk is aan de grootte
 8001046:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b0b      	cmp	r3, #11
 800104c:	d101      	bne.n	8001052 <HAL_I2C_SlaveRxCpltCallback+0x5e>
														//van de inlees array
		process_data();									//Roep de functie process_data() aan
 800104e:	f7ff ff29 	bl	8000ea4 <process_data>
	}
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000207 	.word	0x20000207
 8001060:	200001fc 	.word	0x200001fc

08001064 <HAL_I2C_SlaveTxCpltCallback>:

/*Deze functie wordt aangeroepen zodra een transmit IT functie afgemaakt is*/
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	txcount++;											//Verhoog de verstuurd waarde teller met 1
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <HAL_I2C_SlaveTxCpltCallback+0x38>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	3301      	adds	r3, #1
 8001072:	b2da      	uxtb	r2, r3
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_I2C_SlaveTxCpltCallback+0x38>)
 8001076:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Slave_Seq_Transmit_IT(hi2c, I2C_REGISTERS+startPosition+txcount, 1, I2C_NEXT_FRAME);
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <HAL_I2C_SlaveTxCpltCallback+0x3c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <HAL_I2C_SlaveTxCpltCallback+0x38>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	4413      	add	r3, r2
 8001084:	4a07      	ldr	r2, [pc, #28]	; (80010a4 <HAL_I2C_SlaveTxCpltCallback+0x40>)
 8001086:	1899      	adds	r1, r3, r2
 8001088:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800108c:	2201      	movs	r2, #1
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f001 ff24 	bl	8002edc <HAL_I2C_Slave_Seq_Transmit_IT>
														//Verstuur de volgende frame als de volgende frame in de rij frames
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000210 	.word	0x20000210
 80010a0:	20000211 	.word	0x20000211
 80010a4:	200001f0 	.word	0x200001f0

080010a8 <HAL_I2C_ErrorCallback>:

/*Deze functie wordt aangeroepen als er een error optreed in het I2C gedeelte*/
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	counterror++;										//Verhoog de hoeveelheid errors met 1
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_I2C_ErrorCallback+0x34>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	3301      	adds	r3, #1
 80010b6:	4a09      	ldr	r2, [pc, #36]	; (80010dc <HAL_I2C_ErrorCallback+0x34>)
 80010b8:	6013      	str	r3, [r2, #0]
	uint32_t errorcode = HAL_I2C_GetError(hi2c);		//Maak een variabele en vul deze met de I2C error code die is afgegeven
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f002 f939 	bl	8003332 <HAL_I2C_GetError>
 80010c0:	60f8      	str	r0, [r7, #12]
	if (errorcode == 4) {								//Check of de error code gelijk is aan 4 (ingelezen hoeveelheid bytes is kleiner
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2b04      	cmp	r3, #4
 80010c6:	d101      	bne.n	80010cc <HAL_I2C_ErrorCallback+0x24>
														//dan de maximale grootte die ingelezen kan worden = master is eerder gestopt met zenden)
		process_data();									//Roep de functie process_data() aan
 80010c8:	f7ff feec 	bl	8000ea4 <process_data>
	}
	HAL_I2C_EnableListen_IT(hi2c);						//Laat de I2C weer luisteren naar de lijn
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f002 f869 	bl	80031a4 <HAL_I2C_EnableListen_IT>
}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	2000020c 	.word	0x2000020c

080010e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e0:	b5b0      	push	{r4, r5, r7, lr}
 80010e2:	b0ae      	sub	sp, #184	; 0xb8
 80010e4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e6:	f001 f8d4 	bl	8002292 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ea:	f000 faaf 	bl	800164c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ee:	f000 fc93 	bl	8001a18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010f2:	f000 fc61 	bl	80019b8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010f6:	f000 fb0b 	bl	8001710 <MX_I2C1_Init>
  MX_I2C3_Init();
 80010fa:	f000 fb49 	bl	8001790 <MX_I2C3_Init>
  MX_TIM1_Init();
 80010fe:	f000 fb87 	bl	8001810 <MX_TIM1_Init>
  MX_TIM16_Init();
 8001102:	f000 fbd9 	bl	80018b8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK){
 8001106:	48c6      	ldr	r0, [pc, #792]	; (8001420 <main+0x340>)
 8001108:	f002 f84c 	bl	80031a4 <HAL_I2C_EnableListen_IT>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d007      	beq.n	8001122 <main+0x42>
	  HAL_UART_Transmit(&huart2, (uint8_t*)"I2C fail", 9, 100);
 8001112:	2364      	movs	r3, #100	; 0x64
 8001114:	2209      	movs	r2, #9
 8001116:	49c3      	ldr	r1, [pc, #780]	; (8001424 <main+0x344>)
 8001118:	48c3      	ldr	r0, [pc, #780]	; (8001428 <main+0x348>)
 800111a:	f005 ff11 	bl	8006f40 <HAL_UART_Transmit>
  	  Error_Handler();
 800111e:	f000 fd3b 	bl	8001b98 <Error_Handler>
  }

  uint8_t sensorAddressCO2 = 0x58;// Sensor address CO2
 8001122:	2358      	movs	r3, #88	; 0x58
 8001124:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint8_t dataCO2[6]; // Data buffer to store sensor readings
  uint8_t commandCO2[] = {0x20, 0x08}; // Command for reading measurement data
 8001128:	f44f 6302 	mov.w	r3, #2080	; 0x820
 800112c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  uint8_t alarmStatus = 0; // alarm status Co2
 8001130:	2300      	movs	r3, #0
 8001132:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  uint8_t requestTemp = 20; // gewilde temperatuur
 8001136:	2314      	movs	r3, #20
 8001138:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
  uint8_t verwarmingStatus = 0; // Status verwarming
 800113c:	2300      	movs	r3, #0
 800113e:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
  uint16_t grenswaarde = 800; // Grenswaarde Co2 voor alarm
 8001142:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001146:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
  uint8_t aan = 1;
 800114a:	2301      	movs	r3, #1
 800114c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

  // Initiate de Co2 sensor (15-20sec calibratie)
  HAL_I2C_Master_Transmit(&hi2c3, 0x58 << 1, (uint8_t[]) {0x20, 0x03}, 2, HAL_MAX_DELAY); // om de SGP30 sensor te initialiseren
 8001150:	4bb6      	ldr	r3, [pc, #728]	; (800142c <main+0x34c>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001158:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800115c:	f04f 33ff 	mov.w	r3, #4294967295
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	2302      	movs	r3, #2
 8001164:	21b0      	movs	r1, #176	; 0xb0
 8001166:	48b2      	ldr	r0, [pc, #712]	; (8001430 <main+0x350>)
 8001168:	f001 fcaa 	bl	8002ac0 <HAL_I2C_Master_Transmit>
  for(int i = 0; i < 20; i++){
 800116c:	2300      	movs	r3, #0
 800116e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001172:	e02a      	b.n	80011ca <main+0xea>
		HAL_I2C_Master_Transmit(&hi2c3, sensorAddressCO2 << 1, commandCO2, sizeof(commandCO2), HAL_MAX_DELAY);
 8001174:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001178:	b29b      	uxth	r3, r3
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	b299      	uxth	r1, r3
 800117e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	2302      	movs	r3, #2
 800118a:	48a9      	ldr	r0, [pc, #676]	; (8001430 <main+0x350>)
 800118c:	f001 fc98 	bl	8002ac0 <HAL_I2C_Master_Transmit>

		// Wait for measurement to complete
		HAL_Delay(20);
 8001190:	2014      	movs	r0, #20
 8001192:	f001 f8f3 	bl	800237c <HAL_Delay>

		// Read measurement data
		HAL_I2C_Master_Receive(&hi2c3, (sensorAddressCO2 << 1) | 0x01, dataCO2, sizeof(dataCO2), HAL_MAX_DELAY);
 8001196:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	b21b      	sxth	r3, r3
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	b299      	uxth	r1, r3
 80011a6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2306      	movs	r3, #6
 80011b2:	489f      	ldr	r0, [pc, #636]	; (8001430 <main+0x350>)
 80011b4:	f001 fd9c 	bl	8002cf0 <HAL_I2C_Master_Receive>
		HAL_Delay(1000);
 80011b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011bc:	f001 f8de 	bl	800237c <HAL_Delay>
  for(int i = 0; i < 20; i++){
 80011c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011c4:	3301      	adds	r3, #1
 80011c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80011ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011ce:	2b13      	cmp	r3, #19
 80011d0:	ddd0      	ble.n	8001174 <main+0x94>
  }
  // Ready to receive commands
  HAL_UART_Transmit(&huart2, (uint8_t*)"Done\n", 6, HAL_MAX_DELAY);
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
 80011d6:	2206      	movs	r2, #6
 80011d8:	4996      	ldr	r1, [pc, #600]	; (8001434 <main+0x354>)
 80011da:	4893      	ldr	r0, [pc, #588]	; (8001428 <main+0x348>)
 80011dc:	f005 feb0 	bl	8006f40 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		/*-------------- Set gewilde temperatuur --------------*/
		if (I2C_REGISTERS[1] == 201){
 80011e0:	4b95      	ldr	r3, [pc, #596]	; (8001438 <main+0x358>)
 80011e2:	785b      	ldrb	r3, [r3, #1]
 80011e4:	2bc9      	cmp	r3, #201	; 0xc9
 80011e6:	d11d      	bne.n	8001224 <main+0x144>
			requestTemp = I2C_REGISTERS[2];
 80011e8:	4b93      	ldr	r3, [pc, #588]	; (8001438 <main+0x358>)
 80011ea:	789b      	ldrb	r3, [r3, #2]
 80011ec:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
			// Geeft bij server aan dat data in registers staat
			I2C_REGISTERS[0] = 1;
 80011f0:	4b91      	ldr	r3, [pc, #580]	; (8001438 <main+0x358>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	701a      	strb	r2, [r3, #0]
			// Delay om zeker te weten dat hij ontvangen is door server
			HAL_Delay(100);
 80011f6:	2064      	movs	r0, #100	; 0x64
 80011f8:	f001 f8c0 	bl	800237c <HAL_Delay>
			// Reset registers
			for(int i = 0; i < 10; i++){
 80011fc:	2300      	movs	r3, #0
 80011fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001202:	e00a      	b.n	800121a <main+0x13a>
				I2C_REGISTERS[i] = 0;
 8001204:	4a8c      	ldr	r2, [pc, #560]	; (8001438 <main+0x358>)
 8001206:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800120a:	4413      	add	r3, r2
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 10; i++){
 8001210:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001214:	3301      	adds	r3, #1
 8001216:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800121a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800121e:	2b09      	cmp	r3, #9
 8001220:	ddf0      	ble.n	8001204 <main+0x124>
 8001222:	e7dd      	b.n	80011e0 <main+0x100>
			}
		}
		/*-------------- Vraag temperatuur op --------------*/
		else if (I2C_REGISTERS[1] == 200){
 8001224:	4b84      	ldr	r3, [pc, #528]	; (8001438 <main+0x358>)
 8001226:	785b      	ldrb	r3, [r3, #1]
 8001228:	2bc8      	cmp	r3, #200	; 0xc8
 800122a:	f040 8111 	bne.w	8001450 <main+0x370>
			//HAL_UART_Transmit(&huart2, (uint8_t*)"I2C test", 9, 100);
			char buf[50];
			// Read data from SHT3x sensor
			uint8_t sensorAddress = 0x44; // Sensor address
 800122e:	2344      	movs	r3, #68	; 0x44
 8001230:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			uint8_t data[6]; // Data buffer to store sensor readings

			// Request temperature measurement
			uint8_t command[] = {0x2C, 0x06};
 8001234:	f240 632c 	movw	r3, #1580	; 0x62c
 8001238:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			HAL_I2C_Master_Transmit(&hi2c3, sensorAddress << 1, command, sizeof(command), HAL_MAX_DELAY);
 800123c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001240:	b29b      	uxth	r3, r3
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	b299      	uxth	r1, r3
 8001246:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2302      	movs	r3, #2
 8001252:	4877      	ldr	r0, [pc, #476]	; (8001430 <main+0x350>)
 8001254:	f001 fc34 	bl	8002ac0 <HAL_I2C_Master_Transmit>

			// Wait for measurement to complete
			HAL_Delay(20);
 8001258:	2014      	movs	r0, #20
 800125a:	f001 f88f 	bl	800237c <HAL_Delay>

			// Read measurement data
			HAL_I2C_Master_Receive(&hi2c3, (sensorAddress << 1) | 0x01, data, sizeof(data), HAL_MAX_DELAY);
 800125e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	b21b      	sxth	r3, r3
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	b21b      	sxth	r3, r3
 800126c:	b299      	uxth	r1, r3
 800126e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2306      	movs	r3, #6
 800127a:	486d      	ldr	r0, [pc, #436]	; (8001430 <main+0x350>)
 800127c:	f001 fd38 	bl	8002cf0 <HAL_I2C_Master_Receive>

			// Process data to get temperature and humidity
			int16_t tempRaw = (data[0] << 8) | data[1];
 8001280:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	b21a      	sxth	r2, r3
 8001288:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800128c:	b21b      	sxth	r3, r3
 800128e:	4313      	orrs	r3, r2
 8001290:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
			float temperature = -45 + 175 * ((float)tempRaw / 65535);
 8001294:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8001298:	ee07 3a90 	vmov	s15, r3
 800129c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012a0:	eddf 6a66 	vldr	s13, [pc, #408]	; 800143c <main+0x35c>
 80012a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012a8:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8001440 <main+0x360>
 80012ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012b0:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001444 <main+0x364>
 80012b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012b8:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
			uint16_t humRaw = (data[3] << 8) | data[4];
 80012bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80012c0:	021b      	lsls	r3, r3, #8
 80012c2:	b21a      	sxth	r2, r3
 80012c4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80012c8:	b21b      	sxth	r3, r3
 80012ca:	4313      	orrs	r3, r2
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
			float humidity = 100 * ((float)humRaw / 65535);
 80012d2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80012d6:	ee07 3a90 	vmov	s15, r3
 80012da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012de:	eddf 6a57 	vldr	s13, [pc, #348]	; 800143c <main+0x35c>
 80012e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012e6:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001448 <main+0x368>
 80012ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ee:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
			// if lager dan gewenste temperatuur; zet de verwarming aan.
			if (temperature >= (float)requestTemp){
 80012f2:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 80012f6:	ee07 3a90 	vmov	s15, r3
 80012fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012fe:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001302:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130a:	db03      	blt.n	8001314 <main+0x234>
				verwarmingStatus = 2;
 800130c:	2302      	movs	r3, #2
 800130e:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 8001312:	e002      	b.n	800131a <main+0x23a>
			}
			else {verwarmingStatus = 1;}
 8001314:	2301      	movs	r3, #1
 8001316:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
			// Print data to Serial port (uart)
			sprintf(buf, "%.2lfC Luchtvochtigheid: %.1lf VerwarmingStatus: %d \r\n", temperature, humidity, verwarmingStatus);
 800131a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800131c:	f7ff f914 	bl	8000548 <__aeabi_f2d>
 8001320:	4604      	mov	r4, r0
 8001322:	460d      	mov	r5, r1
 8001324:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001326:	f7ff f90f 	bl	8000548 <__aeabi_f2d>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	f897 10a5 	ldrb.w	r1, [r7, #165]	; 0xa5
 8001332:	f107 000c 	add.w	r0, r7, #12
 8001336:	9102      	str	r1, [sp, #8]
 8001338:	e9cd 2300 	strd	r2, r3, [sp]
 800133c:	4622      	mov	r2, r4
 800133e:	462b      	mov	r3, r5
 8001340:	4942      	ldr	r1, [pc, #264]	; (800144c <main+0x36c>)
 8001342:	f006 fff1 	bl	8008328 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), 100);
 8001346:	f107 030c 	add.w	r3, r7, #12
 800134a:	4618      	mov	r0, r3
 800134c:	f7fe ff90 	bl	8000270 <strlen>
 8001350:	4603      	mov	r3, r0
 8001352:	b29a      	uxth	r2, r3
 8001354:	f107 010c 	add.w	r1, r7, #12
 8001358:	2364      	movs	r3, #100	; 0x64
 800135a:	4833      	ldr	r0, [pc, #204]	; (8001428 <main+0x348>)
 800135c:	f005 fdf0 	bl	8006f40 <HAL_UART_Transmit>
			// Empty registers
			for(int i = 0; i < 10; i++){
 8001360:	2300      	movs	r3, #0
 8001362:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001366:	e00a      	b.n	800137e <main+0x29e>
				I2C_REGISTERS[i] = 0;
 8001368:	4a33      	ldr	r2, [pc, #204]	; (8001438 <main+0x358>)
 800136a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800136e:	4413      	add	r3, r2
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 10; i++){
 8001374:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001378:	3301      	adds	r3, #1
 800137a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800137e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001382:	2b09      	cmp	r3, #9
 8001384:	ddf0      	ble.n	8001368 <main+0x288>
			}

			int intPart, decPart;
			// Neem het gehele deel van de float
			intPart = (int)temperature;
 8001386:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800138a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800138e:	ee17 3a90 	vmov	r3, s15
 8001392:	667b      	str	r3, [r7, #100]	; 0x64

			// Neem het decimale deel van de float
			float decimal = temperature - (float)(intPart);
 8001394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001396:	ee07 3a90 	vmov	s15, r3
 800139a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800139e:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80013a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
			// Converteer het decimale deel naar een percentage (bijv. 0.56 wordt 56)
			decPart = (int)(decimal * 100);
 80013aa:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80013ae:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001448 <main+0x368>
 80013b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ba:	ee17 3a90 	vmov	r3, s15
 80013be:	65fb      	str	r3, [r7, #92]	; 0x5c
			// Plaats data in juiste register(s)
			I2C_REGISTERS[1] = (uint8_t) intPart;
 80013c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <main+0x358>)
 80013c6:	705a      	strb	r2, [r3, #1]
			I2C_REGISTERS[2] = (uint8_t) decPart;
 80013c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <main+0x358>)
 80013ce:	709a      	strb	r2, [r3, #2]
			I2C_REGISTERS[3] = (uint8_t)humidity;
 80013d0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80013d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013d8:	edc7 7a01 	vstr	s15, [r7, #4]
 80013dc:	793b      	ldrb	r3, [r7, #4]
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	4b15      	ldr	r3, [pc, #84]	; (8001438 <main+0x358>)
 80013e2:	70da      	strb	r2, [r3, #3]
			I2C_REGISTERS[4] = verwarmingStatus;
 80013e4:	4a14      	ldr	r2, [pc, #80]	; (8001438 <main+0x358>)
 80013e6:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 80013ea:	7113      	strb	r3, [r2, #4]

			I2C_REGISTERS[0] = 1; //Aangeven bij server dat alles is geschreven.
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <main+0x358>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	701a      	strb	r2, [r3, #0]
			// Delay om server de tijd te geven om data te lezen
			HAL_Delay(100);
 80013f2:	2064      	movs	r0, #100	; 0x64
 80013f4:	f000 ffc2 	bl	800237c <HAL_Delay>
			// Reset Registers
			for(int i = 0; i < 10; i++){
 80013f8:	2300      	movs	r3, #0
 80013fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80013fe:	e00a      	b.n	8001416 <main+0x336>
				I2C_REGISTERS[i] = 0;
 8001400:	4a0d      	ldr	r2, [pc, #52]	; (8001438 <main+0x358>)
 8001402:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001406:	4413      	add	r3, r2
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 10; i++){
 800140c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001410:	3301      	adds	r3, #1
 8001412:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001416:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800141a:	2b09      	cmp	r3, #9
 800141c:	ddf0      	ble.n	8001400 <main+0x320>
 800141e:	e6df      	b.n	80011e0 <main+0x100>
 8001420:	20000214 	.word	0x20000214
 8001424:	0800a5f8 	.word	0x0800a5f8
 8001428:	20000354 	.word	0x20000354
 800142c:	0800a650 	.word	0x0800a650
 8001430:	20000268 	.word	0x20000268
 8001434:	0800a604 	.word	0x0800a604
 8001438:	200001f0 	.word	0x200001f0
 800143c:	477fff00 	.word	0x477fff00
 8001440:	432f0000 	.word	0x432f0000
 8001444:	42340000 	.word	0x42340000
 8001448:	42c80000 	.word	0x42c80000
 800144c:	0800a60c 	.word	0x0800a60c
			}
		}
		/*-------------- Lees Co2 uit --------------*/
		else if(I2C_REGISTERS[1] == 203){
 8001450:	4b7a      	ldr	r3, [pc, #488]	; (800163c <main+0x55c>)
 8001452:	785b      	ldrb	r3, [r3, #1]
 8001454:	2bcb      	cmp	r3, #203	; 0xcb
 8001456:	f040 809d 	bne.w	8001594 <main+0x4b4>
			char buf2[50];
			HAL_I2C_Master_Transmit(&hi2c3, sensorAddressCO2 << 1, commandCO2, sizeof(commandCO2), HAL_MAX_DELAY);
 800145a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800145e:	b29b      	uxth	r3, r3
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	b299      	uxth	r1, r3
 8001464:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001468:	f04f 33ff 	mov.w	r3, #4294967295
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	2302      	movs	r3, #2
 8001470:	4873      	ldr	r0, [pc, #460]	; (8001640 <main+0x560>)
 8001472:	f001 fb25 	bl	8002ac0 <HAL_I2C_Master_Transmit>

			// Wait for measurement to complete
			HAL_Delay(20);
 8001476:	2014      	movs	r0, #20
 8001478:	f000 ff80 	bl	800237c <HAL_Delay>

			// Read measurement data
			HAL_I2C_Master_Receive(&hi2c3, (sensorAddressCO2 << 1) | 0x01, dataCO2, sizeof(dataCO2), HAL_MAX_DELAY);
 800147c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	b21b      	sxth	r3, r3
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	b21b      	sxth	r3, r3
 800148a:	b299      	uxth	r1, r3
 800148c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001490:	f04f 33ff 	mov.w	r3, #4294967295
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	2306      	movs	r3, #6
 8001498:	4869      	ldr	r0, [pc, #420]	; (8001640 <main+0x560>)
 800149a:	f001 fc29 	bl	8002cf0 <HAL_I2C_Master_Receive>

			// Process data to get CO2
			uint16_t CO2 = (dataCO2[0] << 8) | dataCO2[1];
 800149e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80014a2:	021b      	lsls	r3, r3, #8
 80014a4:	b21a      	sxth	r2, r3
 80014a6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80014aa:	b21b      	sxth	r3, r3
 80014ac:	4313      	orrs	r3, r2
 80014ae:	b21b      	sxth	r3, r3
 80014b0:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
			// if CO2 hoger is dan grenswaarde; zet het alarm aan.
			if(CO2>grenswaarde){
 80014b4:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80014b8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80014bc:	429a      	cmp	r2, r3
 80014be:	d903      	bls.n	80014c8 <main+0x3e8>
				alarmStatus = 1;
 80014c0:	2301      	movs	r3, #1
 80014c2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80014c6:	e002      	b.n	80014ce <main+0x3ee>
			}
			else {
				alarmStatus = 2;
 80014c8:	2302      	movs	r3, #2
 80014ca:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			}

			// Process data to TVOC
			uint16_t TVOC = (dataCO2[3] << 8) | dataCO2[4];
 80014ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80014d2:	021b      	lsls	r3, r3, #8
 80014d4:	b21a      	sxth	r2, r3
 80014d6:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80014da:	b21b      	sxth	r3, r3
 80014dc:	4313      	orrs	r3, r2
 80014de:	b21b      	sxth	r3, r3
 80014e0:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
			// Print to seriele monitor
			sprintf(buf2, " CO2: %d\r\n", CO2);
 80014e4:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	4955      	ldr	r1, [pc, #340]	; (8001644 <main+0x564>)
 80014ee:	4618      	mov	r0, r3
 80014f0:	f006 ff1a 	bl	8008328 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buf2, strlen(buf2), 100);
 80014f4:	f107 030c 	add.w	r3, r7, #12
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7fe feb9 	bl	8000270 <strlen>
 80014fe:	4603      	mov	r3, r0
 8001500:	b29a      	uxth	r2, r3
 8001502:	f107 010c 	add.w	r1, r7, #12
 8001506:	2364      	movs	r3, #100	; 0x64
 8001508:	484f      	ldr	r0, [pc, #316]	; (8001648 <main+0x568>)
 800150a:	f005 fd19 	bl	8006f40 <HAL_UART_Transmit>
			// Reset Registers
			for(int i = 0; i < 10; i++){
 800150e:	2300      	movs	r3, #0
 8001510:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001514:	e00a      	b.n	800152c <main+0x44c>
				I2C_REGISTERS[i] = 0;
 8001516:	4a49      	ldr	r2, [pc, #292]	; (800163c <main+0x55c>)
 8001518:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800151c:	4413      	add	r3, r2
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 10; i++){
 8001522:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001526:	3301      	adds	r3, #1
 8001528:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800152c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001530:	2b09      	cmp	r3, #9
 8001532:	ddf0      	ble.n	8001516 <main+0x436>
			}
			// Opsplitsen van de 16-bits CO2 waarde in twee 8-bits waarden
			uint8_t CO2_high = (uint8_t)(CO2 >> 8); // Hoger byte
 8001534:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8001538:	0a1b      	lsrs	r3, r3, #8
 800153a:	b29b      	uxth	r3, r3
 800153c:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
			uint8_t CO2_low = (uint8_t)(CO2 & 0xFF); // Lager byte
 8001540:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8001544:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

			// Sla de gesplitste waarden op in de I2C registers
			I2C_REGISTERS[1] = CO2_high;
 8001548:	4a3c      	ldr	r2, [pc, #240]	; (800163c <main+0x55c>)
 800154a:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 800154e:	7053      	strb	r3, [r2, #1]
			I2C_REGISTERS[2] = CO2_low;
 8001550:	4a3a      	ldr	r2, [pc, #232]	; (800163c <main+0x55c>)
 8001552:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8001556:	7093      	strb	r3, [r2, #2]
			I2C_REGISTERS[3] = alarmStatus;
 8001558:	4a38      	ldr	r2, [pc, #224]	; (800163c <main+0x55c>)
 800155a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800155e:	70d3      	strb	r3, [r2, #3]
			I2C_REGISTERS[0] = 1;
 8001560:	4b36      	ldr	r3, [pc, #216]	; (800163c <main+0x55c>)
 8001562:	2201      	movs	r2, #1
 8001564:	701a      	strb	r2, [r3, #0]

			// Geef server kans om data uit te lezen
			HAL_Delay(100);
 8001566:	2064      	movs	r0, #100	; 0x64
 8001568:	f000 ff08 	bl	800237c <HAL_Delay>
			// Reset Registers
			for(int i = 0; i < 10; i++){
 800156c:	2300      	movs	r3, #0
 800156e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001572:	e00a      	b.n	800158a <main+0x4aa>
				I2C_REGISTERS[i] = 0;
 8001574:	4a31      	ldr	r2, [pc, #196]	; (800163c <main+0x55c>)
 8001576:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800157a:	4413      	add	r3, r2
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 10; i++){
 8001580:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001584:	3301      	adds	r3, #1
 8001586:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800158a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800158e:	2b09      	cmp	r3, #9
 8001590:	ddf0      	ble.n	8001574 <main+0x494>
 8001592:	e625      	b.n	80011e0 <main+0x100>
			}
		}
		/*-------------- Set grenswaarde van Co2 --------------*/
		else if(I2C_REGISTERS[1] == 204){
 8001594:	4b29      	ldr	r3, [pc, #164]	; (800163c <main+0x55c>)
 8001596:	785b      	ldrb	r3, [r3, #1]
 8001598:	2bcc      	cmp	r3, #204	; 0xcc
 800159a:	d124      	bne.n	80015e6 <main+0x506>
			grenswaarde = (I2C_REGISTERS[2] << 8 | I2C_REGISTERS[3]);
 800159c:	4b27      	ldr	r3, [pc, #156]	; (800163c <main+0x55c>)
 800159e:	789b      	ldrb	r3, [r3, #2]
 80015a0:	021b      	lsls	r3, r3, #8
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	4b25      	ldr	r3, [pc, #148]	; (800163c <main+0x55c>)
 80015a6:	78db      	ldrb	r3, [r3, #3]
 80015a8:	b21b      	sxth	r3, r3
 80015aa:	4313      	orrs	r3, r2
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
			// Geef aan dat data in Register is geschreven
			I2C_REGISTERS[0] = 1;
 80015b2:	4b22      	ldr	r3, [pc, #136]	; (800163c <main+0x55c>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	701a      	strb	r2, [r3, #0]
			// Delay om server kans te geven om data te lezen
			HAL_Delay(100);
 80015b8:	2064      	movs	r0, #100	; 0x64
 80015ba:	f000 fedf 	bl	800237c <HAL_Delay>
			// Reset Registers
			for(int i = 0; i < 10; i++){
 80015be:	2300      	movs	r3, #0
 80015c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80015c4:	e00a      	b.n	80015dc <main+0x4fc>
				I2C_REGISTERS[i] = 0;
 80015c6:	4a1d      	ldr	r2, [pc, #116]	; (800163c <main+0x55c>)
 80015c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015cc:	4413      	add	r3, r2
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 10; i++){
 80015d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015d6:	3301      	adds	r3, #1
 80015d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80015dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015e0:	2b09      	cmp	r3, #9
 80015e2:	ddf0      	ble.n	80015c6 <main+0x4e6>
 80015e4:	e5fc      	b.n	80011e0 <main+0x100>
			}
		}
		/*-------------- Reset alarm --------------*/
		else if (I2C_REGISTERS[1] == 205){
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <main+0x55c>)
 80015e8:	785b      	ldrb	r3, [r3, #1]
 80015ea:	2bcd      	cmp	r3, #205	; 0xcd
 80015ec:	d103      	bne.n	80015f6 <main+0x516>
			alarmStatus = 2;
 80015ee:	2302      	movs	r3, #2
 80015f0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80015f4:	e5f4      	b.n	80011e0 <main+0x100>
		}
		else if (I2C_REGISTERS[1] == 206){
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <main+0x55c>)
 80015f8:	785b      	ldrb	r3, [r3, #1]
 80015fa:	2bce      	cmp	r3, #206	; 0xce
 80015fc:	f47f adf0 	bne.w	80011e0 <main+0x100>
			alarmStatus = I2C_REGISTERS[2];
 8001600:	4b0e      	ldr	r3, [pc, #56]	; (800163c <main+0x55c>)
 8001602:	789b      	ldrb	r3, [r3, #2]
 8001604:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			I2C_REGISTERS[0] = 1;
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <main+0x55c>)
 800160a:	2201      	movs	r2, #1
 800160c:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 800160e:	2064      	movs	r0, #100	; 0x64
 8001610:	f000 feb4 	bl	800237c <HAL_Delay>
			for(int i = 0; i < 10; i++){
 8001614:	2300      	movs	r3, #0
 8001616:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800161a:	e00a      	b.n	8001632 <main+0x552>
				I2C_REGISTERS[i] = 0;
 800161c:	4a07      	ldr	r2, [pc, #28]	; (800163c <main+0x55c>)
 800161e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001622:	4413      	add	r3, r2
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 10; i++){
 8001628:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800162c:	3301      	adds	r3, #1
 800162e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001632:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001636:	2b09      	cmp	r3, #9
 8001638:	ddf0      	ble.n	800161c <main+0x53c>
		if (I2C_REGISTERS[1] == 201){
 800163a:	e5d1      	b.n	80011e0 <main+0x100>
 800163c:	200001f0 	.word	0x200001f0
 8001640:	20000268 	.word	0x20000268
 8001644:	0800a644 	.word	0x0800a644
 8001648:	20000354 	.word	0x20000354

0800164c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b096      	sub	sp, #88	; 0x58
 8001650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	2244      	movs	r2, #68	; 0x44
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f006 fec7 	bl	80083ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001660:	463b      	mov	r3, r7
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
 800166c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800166e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001672:	f003 faf3 	bl	8004c5c <HAL_PWREx_ControlVoltageScaling>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800167c:	f000 fa8c 	bl	8001b98 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001680:	f003 face 	bl	8004c20 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001684:	4b21      	ldr	r3, [pc, #132]	; (800170c <SystemClock_Config+0xc0>)
 8001686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800168a:	4a20      	ldr	r2, [pc, #128]	; (800170c <SystemClock_Config+0xc0>)
 800168c:	f023 0318 	bic.w	r3, r3, #24
 8001690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001694:	2314      	movs	r3, #20
 8001696:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001698:	2301      	movs	r3, #1
 800169a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800169c:	2301      	movs	r3, #1
 800169e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80016a4:	2360      	movs	r3, #96	; 0x60
 80016a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a8:	2302      	movs	r3, #2
 80016aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80016ac:	2301      	movs	r3, #1
 80016ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016b0:	2301      	movs	r3, #1
 80016b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80016b4:	2310      	movs	r3, #16
 80016b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016b8:	2307      	movs	r3, #7
 80016ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016bc:	2302      	movs	r3, #2
 80016be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016c0:	2302      	movs	r3, #2
 80016c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	4618      	mov	r0, r3
 80016ca:	f003 fb1d 	bl	8004d08 <HAL_RCC_OscConfig>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80016d4:	f000 fa60 	bl	8001b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d8:	230f      	movs	r3, #15
 80016da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016dc:	2303      	movs	r3, #3
 80016de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016e8:	2300      	movs	r3, #0
 80016ea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016ec:	463b      	mov	r3, r7
 80016ee:	2101      	movs	r1, #1
 80016f0:	4618      	mov	r0, r3
 80016f2:	f003 ff1d 	bl	8005530 <HAL_RCC_ClockConfig>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80016fc:	f000 fa4c 	bl	8001b98 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001700:	f004 fb30 	bl	8005d64 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001704:	bf00      	nop
 8001706:	3758      	adds	r7, #88	; 0x58
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40021000 	.word	0x40021000

08001710 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001714:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <MX_I2C1_Init+0x74>)
 8001716:	4a1c      	ldr	r2, [pc, #112]	; (8001788 <MX_I2C1_Init+0x78>)
 8001718:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <MX_I2C1_Init+0x74>)
 800171c:	4a1b      	ldr	r2, [pc, #108]	; (800178c <MX_I2C1_Init+0x7c>)
 800171e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 64;
 8001720:	4b18      	ldr	r3, [pc, #96]	; (8001784 <MX_I2C1_Init+0x74>)
 8001722:	2240      	movs	r2, #64	; 0x40
 8001724:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001726:	4b17      	ldr	r3, [pc, #92]	; (8001784 <MX_I2C1_Init+0x74>)
 8001728:	2201      	movs	r2, #1
 800172a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <MX_I2C1_Init+0x74>)
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001732:	4b14      	ldr	r3, [pc, #80]	; (8001784 <MX_I2C1_Init+0x74>)
 8001734:	2200      	movs	r2, #0
 8001736:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <MX_I2C1_Init+0x74>)
 800173a:	2200      	movs	r2, #0
 800173c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_I2C1_Init+0x74>)
 8001740:	2200      	movs	r2, #0
 8001742:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <MX_I2C1_Init+0x74>)
 8001746:	2200      	movs	r2, #0
 8001748:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800174a:	480e      	ldr	r0, [pc, #56]	; (8001784 <MX_I2C1_Init+0x74>)
 800174c:	f001 f91c 	bl	8002988 <HAL_I2C_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001756:	f000 fa1f 	bl	8001b98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800175a:	2100      	movs	r1, #0
 800175c:	4809      	ldr	r0, [pc, #36]	; (8001784 <MX_I2C1_Init+0x74>)
 800175e:	f003 f9c7 	bl	8004af0 <HAL_I2CEx_ConfigAnalogFilter>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001768:	f000 fa16 	bl	8001b98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800176c:	2100      	movs	r1, #0
 800176e:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_I2C1_Init+0x74>)
 8001770:	f003 fa09 	bl	8004b86 <HAL_I2CEx_ConfigDigitalFilter>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800177a:	f000 fa0d 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000214 	.word	0x20000214
 8001788:	40005400 	.word	0x40005400
 800178c:	00707cbb 	.word	0x00707cbb

08001790 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001794:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <MX_I2C3_Init+0x74>)
 8001796:	4a1c      	ldr	r2, [pc, #112]	; (8001808 <MX_I2C3_Init+0x78>)
 8001798:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 800179a:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <MX_I2C3_Init+0x74>)
 800179c:	4a1b      	ldr	r2, [pc, #108]	; (800180c <MX_I2C3_Init+0x7c>)
 800179e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80017a0:	4b18      	ldr	r3, [pc, #96]	; (8001804 <MX_I2C3_Init+0x74>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017a6:	4b17      	ldr	r3, [pc, #92]	; (8001804 <MX_I2C3_Init+0x74>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017ac:	4b15      	ldr	r3, [pc, #84]	; (8001804 <MX_I2C3_Init+0x74>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80017b2:	4b14      	ldr	r3, [pc, #80]	; (8001804 <MX_I2C3_Init+0x74>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <MX_I2C3_Init+0x74>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <MX_I2C3_Init+0x74>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <MX_I2C3_Init+0x74>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017ca:	480e      	ldr	r0, [pc, #56]	; (8001804 <MX_I2C3_Init+0x74>)
 80017cc:	f001 f8dc 	bl	8002988 <HAL_I2C_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80017d6:	f000 f9df 	bl	8001b98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017da:	2100      	movs	r1, #0
 80017dc:	4809      	ldr	r0, [pc, #36]	; (8001804 <MX_I2C3_Init+0x74>)
 80017de:	f003 f987 	bl	8004af0 <HAL_I2CEx_ConfigAnalogFilter>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80017e8:	f000 f9d6 	bl	8001b98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80017ec:	2100      	movs	r1, #0
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <MX_I2C3_Init+0x74>)
 80017f0:	f003 f9c9 	bl	8004b86 <HAL_I2CEx_ConfigDigitalFilter>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80017fa:	f000 f9cd 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000268 	.word	0x20000268
 8001808:	40005c00 	.word	0x40005c00
 800180c:	00707cbb 	.word	0x00707cbb

08001810 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001816:	f107 0310 	add.w	r3, r7, #16
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800182e:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <MX_TIM1_Init+0xa0>)
 8001830:	4a20      	ldr	r2, [pc, #128]	; (80018b4 <MX_TIM1_Init+0xa4>)
 8001832:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4800-1;
 8001834:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <MX_TIM1_Init+0xa0>)
 8001836:	f241 22bf 	movw	r2, #4799	; 0x12bf
 800183a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183c:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <MX_TIM1_Init+0xa0>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3000;
 8001842:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <MX_TIM1_Init+0xa0>)
 8001844:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001848:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800184a:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <MX_TIM1_Init+0xa0>)
 800184c:	2200      	movs	r2, #0
 800184e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001850:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <MX_TIM1_Init+0xa0>)
 8001852:	2200      	movs	r2, #0
 8001854:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001856:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <MX_TIM1_Init+0xa0>)
 8001858:	2200      	movs	r2, #0
 800185a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800185c:	4814      	ldr	r0, [pc, #80]	; (80018b0 <MX_TIM1_Init+0xa0>)
 800185e:	f004 fb83 	bl	8005f68 <HAL_TIM_Base_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001868:	f000 f996 	bl	8001b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800186c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001870:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001872:	f107 0310 	add.w	r3, r7, #16
 8001876:	4619      	mov	r1, r3
 8001878:	480d      	ldr	r0, [pc, #52]	; (80018b0 <MX_TIM1_Init+0xa0>)
 800187a:	f004 fda9 	bl	80063d0 <HAL_TIM_ConfigClockSource>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001884:	f000 f988 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800188c:	2300      	movs	r3, #0
 800188e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001894:	1d3b      	adds	r3, r7, #4
 8001896:	4619      	mov	r1, r3
 8001898:	4805      	ldr	r0, [pc, #20]	; (80018b0 <MX_TIM1_Init+0xa0>)
 800189a:	f005 fa07 	bl	8006cac <HAL_TIMEx_MasterConfigSynchronization>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80018a4:	f000 f978 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018a8:	bf00      	nop
 80018aa:	3720      	adds	r7, #32
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	200002bc 	.word	0x200002bc
 80018b4:	40012c00 	.word	0x40012c00

080018b8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b092      	sub	sp, #72	; 0x48
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
 80018cc:	611a      	str	r2, [r3, #16]
 80018ce:	615a      	str	r2, [r3, #20]
 80018d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018d2:	463b      	mov	r3, r7
 80018d4:	222c      	movs	r2, #44	; 0x2c
 80018d6:	2100      	movs	r1, #0
 80018d8:	4618      	mov	r0, r3
 80018da:	f006 fd88 	bl	80083ee <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80018de:	4b34      	ldr	r3, [pc, #208]	; (80019b0 <MX_TIM16_Init+0xf8>)
 80018e0:	4a34      	ldr	r2, [pc, #208]	; (80019b4 <MX_TIM16_Init+0xfc>)
 80018e2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 10-1;
 80018e4:	4b32      	ldr	r3, [pc, #200]	; (80019b0 <MX_TIM16_Init+0xf8>)
 80018e6:	2209      	movs	r2, #9
 80018e8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ea:	4b31      	ldr	r3, [pc, #196]	; (80019b0 <MX_TIM16_Init+0xf8>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80018f0:	4b2f      	ldr	r3, [pc, #188]	; (80019b0 <MX_TIM16_Init+0xf8>)
 80018f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018f6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f8:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <MX_TIM16_Init+0xf8>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80018fe:	4b2c      	ldr	r3, [pc, #176]	; (80019b0 <MX_TIM16_Init+0xf8>)
 8001900:	2200      	movs	r2, #0
 8001902:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001904:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <MX_TIM16_Init+0xf8>)
 8001906:	2280      	movs	r2, #128	; 0x80
 8001908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800190a:	4829      	ldr	r0, [pc, #164]	; (80019b0 <MX_TIM16_Init+0xf8>)
 800190c:	f004 fb2c 	bl	8005f68 <HAL_TIM_Base_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001916:	f000 f93f 	bl	8001b98 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 800191a:	4825      	ldr	r0, [pc, #148]	; (80019b0 <MX_TIM16_Init+0xf8>)
 800191c:	f004 fb7b 	bl	8006016 <HAL_TIM_OC_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001926:	f000 f937 	bl	8001b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800192a:	2330      	movs	r3, #48	; 0x30
 800192c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001932:	2300      	movs	r3, #0
 8001934:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001936:	2300      	movs	r3, #0
 8001938:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800193e:	2300      	movs	r3, #0
 8001940:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001942:	2300      	movs	r3, #0
 8001944:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001946:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800194a:	2200      	movs	r2, #0
 800194c:	4619      	mov	r1, r3
 800194e:	4818      	ldr	r0, [pc, #96]	; (80019b0 <MX_TIM16_Init+0xf8>)
 8001950:	f004 fcc4 	bl	80062dc <HAL_TIM_OC_ConfigChannel>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800195a:	f000 f91d 	bl	8001b98 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 800195e:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <MX_TIM16_Init+0xf8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	699a      	ldr	r2, [r3, #24]
 8001964:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <MX_TIM16_Init+0xf8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f042 0208 	orr.w	r2, r2, #8
 800196c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800196e:	2300      	movs	r3, #0
 8001970:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001982:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001986:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800198c:	463b      	mov	r3, r7
 800198e:	4619      	mov	r1, r3
 8001990:	4807      	ldr	r0, [pc, #28]	; (80019b0 <MX_TIM16_Init+0xf8>)
 8001992:	f005 f9f1 	bl	8006d78 <HAL_TIMEx_ConfigBreakDeadTime>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM16_Init+0xe8>
  {
    Error_Handler();
 800199c:	f000 f8fc 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80019a0:	4803      	ldr	r0, [pc, #12]	; (80019b0 <MX_TIM16_Init+0xf8>)
 80019a2:	f000 fa57 	bl	8001e54 <HAL_TIM_MspPostInit>

}
 80019a6:	bf00      	nop
 80019a8:	3748      	adds	r7, #72	; 0x48
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000308 	.word	0x20000308
 80019b4:	40014400 	.word	0x40014400

080019b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019bc:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019be:	4a15      	ldr	r2, [pc, #84]	; (8001a14 <MX_USART2_UART_Init+0x5c>)
 80019c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019c2:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019d8:	2200      	movs	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019de:	220c      	movs	r2, #12
 80019e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019e2:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e8:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ee:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019fa:	4805      	ldr	r0, [pc, #20]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019fc:	f005 fa52 	bl	8006ea4 <HAL_UART_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a06:	f000 f8c7 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000354 	.word	0x20000354
 8001a14:	40004400 	.word	0x40004400

08001a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1e:	f107 030c 	add.w	r3, r7, #12
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
 8001a2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a2e:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <MX_GPIO_Init+0x8c>)
 8001a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a32:	4a1c      	ldr	r2, [pc, #112]	; (8001aa4 <MX_GPIO_Init+0x8c>)
 8001a34:	f043 0304 	orr.w	r3, r3, #4
 8001a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <MX_GPIO_Init+0x8c>)
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3e:	f003 0304 	and.w	r3, r3, #4
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <MX_GPIO_Init+0x8c>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4a:	4a16      	ldr	r2, [pc, #88]	; (8001aa4 <MX_GPIO_Init+0x8c>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a52:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <MX_GPIO_Init+0x8c>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <MX_GPIO_Init+0x8c>)
 8001a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a62:	4a10      	ldr	r2, [pc, #64]	; (8001aa4 <MX_GPIO_Init+0x8c>)
 8001a64:	f043 0302 	orr.w	r3, r3, #2
 8001a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <MX_GPIO_Init+0x8c>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	603b      	str	r3, [r7, #0]
 8001a74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2108      	movs	r1, #8
 8001a7a:	480b      	ldr	r0, [pc, #44]	; (8001aa8 <MX_GPIO_Init+0x90>)
 8001a7c:	f000 ff6c 	bl	8002958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001a80:	2308      	movs	r3, #8
 8001a82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a84:	2301      	movs	r3, #1
 8001a86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001a90:	f107 030c 	add.w	r3, r7, #12
 8001a94:	4619      	mov	r1, r3
 8001a96:	4804      	ldr	r0, [pc, #16]	; (8001aa8 <MX_GPIO_Init+0x90>)
 8001a98:	f000 fdf4 	bl	8002684 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a9c:	bf00      	nop
 8001a9e:	3720      	adds	r7, #32
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	48000400 	.word	0x48000400

08001aac <HAL_TIM_PeriodElapsedCallback>:
  *
  * @param[in]  htim   Handle van de timer waarvoor de gebeurtenis is opgetreden.
  ******************************************************************************
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001aac:	b590      	push	{r4, r7, lr}
 8001aae:	b091      	sub	sp, #68	; 0x44
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
    if (htim == &htim1){
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a32      	ldr	r2, [pc, #200]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d15d      	bne.n	8001b78 <HAL_TIM_PeriodElapsedCallback+0xcc>
    	//uint8_t tekst1[]={"interrupt1!\n\r"};
    	//HAL_UART_Transmit(&huart2, tekst1, sizeof tekst1, HAL_MAX_DELAY);
    	int freq = __HAL_TIM_GetAutoreload(&htim16);
 8001abc:	4b31      	ldr	r3, [pc, #196]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
    	uint32_t soft_pulse = (__HAL_TIM_GetAutoreload(&htim16) * 10) / 100; // 10% duty cycle for soft tone
 8001ac4:	4b2f      	ldr	r3, [pc, #188]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4b2c      	ldr	r3, [pc, #176]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001ad6:	fba3 2302 	umull	r2, r3, r3, r2
 8001ada:	095b      	lsrs	r3, r3, #5
 8001adc:	63bb      	str	r3, [r7, #56]	; 0x38
    	uint32_t hard_pulse = (__HAL_TIM_GetAutoreload(&htim16) * 90) / 100; //100% duty cycle for hard tone
 8001ade:	4b29      	ldr	r3, [pc, #164]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae4:	225a      	movs	r2, #90	; 0x5a
 8001ae6:	fb02 f303 	mul.w	r3, r2, r3
 8001aea:	4a27      	ldr	r2, [pc, #156]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001aec:	fba2 2303 	umull	r2, r3, r2, r3
 8001af0:	095b      	lsrs	r3, r3, #5
 8001af2:	637b      	str	r3, [r7, #52]	; 0x34

    	if (freq == (3200000 / 4000)-1){
 8001af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001af6:	f240 321f 	movw	r2, #799	; 0x31f
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d11e      	bne.n	8001b3c <HAL_TIM_PeriodElapsedCallback+0x90>
    		uint8_t tekst2[]={"interrupt2!\n\r"};
 8001afe:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001b00:	f107 041c 	add.w	r4, r7, #28
 8001b04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b06:	c407      	stmia	r4!, {r0, r1, r2}
 8001b08:	8023      	strh	r3, [r4, #0]
    		HAL_UART_Transmit(&huart2, tekst2, sizeof tekst2, HAL_MAX_DELAY);
 8001b0a:	f107 011c 	add.w	r1, r7, #28
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b12:	220e      	movs	r2, #14
 8001b14:	481e      	ldr	r0, [pc, #120]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001b16:	f005 fa13 	bl	8006f40 <HAL_UART_Transmit>
    		uint32_t freq1 = 3200000 / 3200;
 8001b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    		__HAL_TIM_SET_AUTORELOAD(&htim16, (freq1 - 1));
 8001b20:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b26:	3a01      	subs	r2, #1
 8001b28:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	4a15      	ldr	r2, [pc, #84]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001b30:	60d3      	str	r3, [r2, #12]
    		__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, hard_pulse);
 8001b32:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b38:	635a      	str	r2, [r3, #52]	; 0x34
    		__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, soft_pulse);
    	}
    	//__HAL_TIM_SET_COUNTER(&htim2, 0);
    	//HAL_TIM_Base_Start_IT(&htim1);
    }
}
 8001b3a:	e01d      	b.n	8001b78 <HAL_TIM_PeriodElapsedCallback+0xcc>
    		uint8_t tekst3[]={"interrupt3!\n\r"};
 8001b3c:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001b3e:	f107 040c 	add.w	r4, r7, #12
 8001b42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b44:	c407      	stmia	r4!, {r0, r1, r2}
 8001b46:	8023      	strh	r3, [r4, #0]
    		HAL_UART_Transmit(&huart2, tekst3, sizeof tekst3, HAL_MAX_DELAY);
 8001b48:	f107 010c 	add.w	r1, r7, #12
 8001b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b50:	220e      	movs	r2, #14
 8001b52:	480f      	ldr	r0, [pc, #60]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001b54:	f005 f9f4 	bl	8006f40 <HAL_UART_Transmit>
    		uint32_t freq2 = 3200000 / 4000;
 8001b58:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001b5c:	633b      	str	r3, [r7, #48]	; 0x30
    		__HAL_TIM_SET_AUTORELOAD(&htim16, (freq2 - 1));
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b64:	3a01      	subs	r2, #1
 8001b66:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	4a05      	ldr	r2, [pc, #20]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001b6e:	60d3      	str	r3, [r2, #12]
    		__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, soft_pulse);
 8001b70:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b76:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b78:	bf00      	nop
 8001b7a:	3744      	adds	r7, #68	; 0x44
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd90      	pop	{r4, r7, pc}
 8001b80:	200002bc 	.word	0x200002bc
 8001b84:	20000308 	.word	0x20000308
 8001b88:	51eb851f 	.word	0x51eb851f
 8001b8c:	0800a654 	.word	0x0800a654
 8001b90:	20000354 	.word	0x20000354
 8001b94:	0800a664 	.word	0x0800a664

08001b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b9c:	b672      	cpsid	i
}
 8001b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <Error_Handler+0x8>
	...

08001ba4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001baa:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <HAL_MspInit+0x44>)
 8001bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bae:	4a0e      	ldr	r2, [pc, #56]	; (8001be8 <HAL_MspInit+0x44>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6613      	str	r3, [r2, #96]	; 0x60
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <HAL_MspInit+0x44>)
 8001bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	607b      	str	r3, [r7, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <HAL_MspInit+0x44>)
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc6:	4a08      	ldr	r2, [pc, #32]	; (8001be8 <HAL_MspInit+0x44>)
 8001bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	6593      	str	r3, [r2, #88]	; 0x58
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <HAL_MspInit+0x44>)
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	603b      	str	r3, [r7, #0]
 8001bd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40021000 	.word	0x40021000

08001bec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b0a2      	sub	sp, #136	; 0x88
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c04:	f107 0320 	add.w	r3, r7, #32
 8001c08:	2254      	movs	r2, #84	; 0x54
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f006 fbee 	bl	80083ee <memset>
  if(hi2c->Instance==I2C1)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a5e      	ldr	r2, [pc, #376]	; (8001d90 <HAL_I2C_MspInit+0x1a4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d148      	bne.n	8001cae <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c1c:	2340      	movs	r3, #64	; 0x40
 8001c1e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c24:	f107 0320 	add.w	r3, r7, #32
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f003 fea5 	bl	8005978 <HAL_RCCEx_PeriphCLKConfig>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c34:	f7ff ffb0 	bl	8001b98 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c38:	4b56      	ldr	r3, [pc, #344]	; (8001d94 <HAL_I2C_MspInit+0x1a8>)
 8001c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3c:	4a55      	ldr	r2, [pc, #340]	; (8001d94 <HAL_I2C_MspInit+0x1a8>)
 8001c3e:	f043 0302 	orr.w	r3, r3, #2
 8001c42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c44:	4b53      	ldr	r3, [pc, #332]	; (8001d94 <HAL_I2C_MspInit+0x1a8>)
 8001c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	61fb      	str	r3, [r7, #28]
 8001c4e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c50:	23c0      	movs	r3, #192	; 0xc0
 8001c52:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c54:	2312      	movs	r3, #18
 8001c56:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c62:	2304      	movs	r3, #4
 8001c64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c68:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	484a      	ldr	r0, [pc, #296]	; (8001d98 <HAL_I2C_MspInit+0x1ac>)
 8001c70:	f000 fd08 	bl	8002684 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c74:	4b47      	ldr	r3, [pc, #284]	; (8001d94 <HAL_I2C_MspInit+0x1a8>)
 8001c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c78:	4a46      	ldr	r2, [pc, #280]	; (8001d94 <HAL_I2C_MspInit+0x1a8>)
 8001c7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c80:	4b44      	ldr	r3, [pc, #272]	; (8001d94 <HAL_I2C_MspInit+0x1a8>)
 8001c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c88:	61bb      	str	r3, [r7, #24]
 8001c8a:	69bb      	ldr	r3, [r7, #24]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2100      	movs	r1, #0
 8001c90:	201f      	movs	r0, #31
 8001c92:	f000 fc72 	bl	800257a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001c96:	201f      	movs	r0, #31
 8001c98:	f000 fc8b 	bl	80025b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	2020      	movs	r0, #32
 8001ca2:	f000 fc6a 	bl	800257a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001ca6:	2020      	movs	r0, #32
 8001ca8:	f000 fc83 	bl	80025b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001cac:	e06c      	b.n	8001d88 <HAL_I2C_MspInit+0x19c>
  else if(hi2c->Instance==I2C3)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a3a      	ldr	r2, [pc, #232]	; (8001d9c <HAL_I2C_MspInit+0x1b0>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d167      	bne.n	8001d88 <HAL_I2C_MspInit+0x19c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001cb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cbc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cc2:	f107 0320 	add.w	r3, r7, #32
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f003 fe56 	bl	8005978 <HAL_RCCEx_PeriphCLKConfig>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_I2C_MspInit+0xea>
      Error_Handler();
 8001cd2:	f7ff ff61 	bl	8001b98 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd6:	4b2f      	ldr	r3, [pc, #188]	; (8001d94 <HAL_I2C_MspInit+0x1a8>)
 8001cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cda:	4a2e      	ldr	r2, [pc, #184]	; (8001d94 <HAL_I2C_MspInit+0x1a8>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ce2:	4b2c      	ldr	r3, [pc, #176]	; (8001d94 <HAL_I2C_MspInit+0x1a8>)
 8001ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cee:	4b29      	ldr	r3, [pc, #164]	; (8001d94 <HAL_I2C_MspInit+0x1a8>)
 8001cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf2:	4a28      	ldr	r2, [pc, #160]	; (8001d94 <HAL_I2C_MspInit+0x1a8>)
 8001cf4:	f043 0302 	orr.w	r3, r3, #2
 8001cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cfa:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <HAL_I2C_MspInit+0x1a8>)
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d0a:	2312      	movs	r3, #18
 8001d0c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d12:	2303      	movs	r3, #3
 8001d14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d18:	2304      	movs	r3, #4
 8001d1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d22:	4619      	mov	r1, r3
 8001d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d28:	f000 fcac 	bl	8002684 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d2c:	2310      	movs	r3, #16
 8001d2e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d30:	2312      	movs	r3, #18
 8001d32:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d34:	2301      	movs	r3, #1
 8001d36:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d3e:	2304      	movs	r3, #4
 8001d40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d44:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4813      	ldr	r0, [pc, #76]	; (8001d98 <HAL_I2C_MspInit+0x1ac>)
 8001d4c:	f000 fc9a 	bl	8002684 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d50:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <HAL_I2C_MspInit+0x1a8>)
 8001d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d54:	4a0f      	ldr	r2, [pc, #60]	; (8001d94 <HAL_I2C_MspInit+0x1a8>)
 8001d56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d5a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d5c:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <HAL_I2C_MspInit+0x1a8>)
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	2048      	movs	r0, #72	; 0x48
 8001d6e:	f000 fc04 	bl	800257a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001d72:	2048      	movs	r0, #72	; 0x48
 8001d74:	f000 fc1d 	bl	80025b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	2049      	movs	r0, #73	; 0x49
 8001d7e:	f000 fbfc 	bl	800257a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8001d82:	2049      	movs	r0, #73	; 0x49
 8001d84:	f000 fc15 	bl	80025b2 <HAL_NVIC_EnableIRQ>
}
 8001d88:	bf00      	nop
 8001d8a:	3788      	adds	r7, #136	; 0x88
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40005400 	.word	0x40005400
 8001d94:	40021000 	.word	0x40021000
 8001d98:	48000400 	.word	0x48000400
 8001d9c:	40005c00 	.word	0x40005c00

08001da0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a26      	ldr	r2, [pc, #152]	; (8001e48 <HAL_TIM_Base_MspInit+0xa8>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d12c      	bne.n	8001e0c <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001db2:	4b26      	ldr	r3, [pc, #152]	; (8001e4c <HAL_TIM_Base_MspInit+0xac>)
 8001db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db6:	4a25      	ldr	r2, [pc, #148]	; (8001e4c <HAL_TIM_Base_MspInit+0xac>)
 8001db8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dbc:	6613      	str	r3, [r2, #96]	; 0x60
 8001dbe:	4b23      	ldr	r3, [pc, #140]	; (8001e4c <HAL_TIM_Base_MspInit+0xac>)
 8001dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2100      	movs	r1, #0
 8001dce:	2018      	movs	r0, #24
 8001dd0:	f000 fbd3 	bl	800257a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001dd4:	2018      	movs	r0, #24
 8001dd6:	f000 fbec 	bl	80025b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2100      	movs	r1, #0
 8001dde:	2019      	movs	r0, #25
 8001de0:	f000 fbcb 	bl	800257a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001de4:	2019      	movs	r0, #25
 8001de6:	f000 fbe4 	bl	80025b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2100      	movs	r1, #0
 8001dee:	201a      	movs	r0, #26
 8001df0:	f000 fbc3 	bl	800257a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001df4:	201a      	movs	r0, #26
 8001df6:	f000 fbdc 	bl	80025b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	201b      	movs	r0, #27
 8001e00:	f000 fbbb 	bl	800257a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001e04:	201b      	movs	r0, #27
 8001e06:	f000 fbd4 	bl	80025b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001e0a:	e018      	b.n	8001e3e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM16)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a0f      	ldr	r2, [pc, #60]	; (8001e50 <HAL_TIM_Base_MspInit+0xb0>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d113      	bne.n	8001e3e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001e16:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <HAL_TIM_Base_MspInit+0xac>)
 8001e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e1a:	4a0c      	ldr	r2, [pc, #48]	; (8001e4c <HAL_TIM_Base_MspInit+0xac>)
 8001e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e20:	6613      	str	r3, [r2, #96]	; 0x60
 8001e22:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <HAL_TIM_Base_MspInit+0xac>)
 8001e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2100      	movs	r1, #0
 8001e32:	2019      	movs	r0, #25
 8001e34:	f000 fba1 	bl	800257a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001e38:	2019      	movs	r0, #25
 8001e3a:	f000 fbba 	bl	80025b2 <HAL_NVIC_EnableIRQ>
}
 8001e3e:	bf00      	nop
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40012c00 	.word	0x40012c00
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40014400 	.word	0x40014400

08001e54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a11      	ldr	r2, [pc, #68]	; (8001eb8 <HAL_TIM_MspPostInit+0x64>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d11c      	bne.n	8001eb0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e76:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <HAL_TIM_MspPostInit+0x68>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7a:	4a10      	ldr	r2, [pc, #64]	; (8001ebc <HAL_TIM_MspPostInit+0x68>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e82:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <HAL_TIM_MspPostInit+0x68>)
 8001e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e8e:	2340      	movs	r3, #64	; 0x40
 8001e90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e92:	2302      	movs	r3, #2
 8001e94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8001e9e:	230e      	movs	r3, #14
 8001ea0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea2:	f107 030c 	add.w	r3, r7, #12
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eac:	f000 fbea 	bl	8002684 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001eb0:	bf00      	nop
 8001eb2:	3720      	adds	r7, #32
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40014400 	.word	0x40014400
 8001ebc:	40021000 	.word	0x40021000

08001ec0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b09e      	sub	sp, #120	; 0x78
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ed8:	f107 0310 	add.w	r3, r7, #16
 8001edc:	2254      	movs	r2, #84	; 0x54
 8001ede:	2100      	movs	r1, #0
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f006 fa84 	bl	80083ee <memset>
  if(huart->Instance==USART2)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a28      	ldr	r2, [pc, #160]	; (8001f8c <HAL_UART_MspInit+0xcc>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d148      	bne.n	8001f82 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ef8:	f107 0310 	add.w	r3, r7, #16
 8001efc:	4618      	mov	r0, r3
 8001efe:	f003 fd3b 	bl	8005978 <HAL_RCCEx_PeriphCLKConfig>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f08:	f7ff fe46 	bl	8001b98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f0c:	4b20      	ldr	r3, [pc, #128]	; (8001f90 <HAL_UART_MspInit+0xd0>)
 8001f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f10:	4a1f      	ldr	r2, [pc, #124]	; (8001f90 <HAL_UART_MspInit+0xd0>)
 8001f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f16:	6593      	str	r3, [r2, #88]	; 0x58
 8001f18:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <HAL_UART_MspInit+0xd0>)
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f24:	4b1a      	ldr	r3, [pc, #104]	; (8001f90 <HAL_UART_MspInit+0xd0>)
 8001f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f28:	4a19      	ldr	r2, [pc, #100]	; (8001f90 <HAL_UART_MspInit+0xd0>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f30:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <HAL_UART_MspInit+0xd0>)
 8001f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001f3c:	2304      	movs	r3, #4
 8001f3e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f40:	2302      	movs	r3, #2
 8001f42:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f4c:	2307      	movs	r3, #7
 8001f4e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001f50:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f54:	4619      	mov	r1, r3
 8001f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f5a:	f000 fb93 	bl	8002684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f62:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001f70:	2303      	movs	r3, #3
 8001f72:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001f74:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f7e:	f000 fb81 	bl	8002684 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f82:	bf00      	nop
 8001f84:	3778      	adds	r7, #120	; 0x78
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40004400 	.word	0x40004400
 8001f90:	40021000 	.word	0x40021000

08001f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f98:	e7fe      	b.n	8001f98 <NMI_Handler+0x4>

08001f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f9e:	e7fe      	b.n	8001f9e <HardFault_Handler+0x4>

08001fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <MemManage_Handler+0x4>

08001fa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001faa:	e7fe      	b.n	8001faa <BusFault_Handler+0x4>

08001fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <UsageFault_Handler+0x4>

08001fb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe0:	f000 f9ac 	bl	800233c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001fee:	f004 f873 	bl	80060d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	200002bc 	.word	0x200002bc

08001ffc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002000:	4803      	ldr	r0, [pc, #12]	; (8002010 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002002:	f004 f869 	bl	80060d8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002006:	4803      	ldr	r0, [pc, #12]	; (8002014 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002008:	f004 f866 	bl	80060d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}
 8002010:	200002bc 	.word	0x200002bc
 8002014:	20000308 	.word	0x20000308

08002018 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800201c:	4802      	ldr	r0, [pc, #8]	; (8002028 <TIM1_TRG_COM_IRQHandler+0x10>)
 800201e:	f004 f85b 	bl	80060d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	200002bc 	.word	0x200002bc

0800202c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002030:	4802      	ldr	r0, [pc, #8]	; (800203c <TIM1_CC_IRQHandler+0x10>)
 8002032:	f004 f851 	bl	80060d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	200002bc 	.word	0x200002bc

08002040 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002044:	4802      	ldr	r0, [pc, #8]	; (8002050 <I2C1_EV_IRQHandler+0x10>)
 8002046:	f001 f8cd 	bl	80031e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000214 	.word	0x20000214

08002054 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002058:	4802      	ldr	r0, [pc, #8]	; (8002064 <I2C1_ER_IRQHandler+0x10>)
 800205a:	f001 f8dd 	bl	8003218 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000214 	.word	0x20000214

08002068 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 800206c:	4802      	ldr	r0, [pc, #8]	; (8002078 <I2C3_EV_IRQHandler+0x10>)
 800206e:	f001 f8b9 	bl	80031e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000268 	.word	0x20000268

0800207c <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8002080:	4802      	ldr	r0, [pc, #8]	; (800208c <I2C3_ER_IRQHandler+0x10>)
 8002082:	f001 f8c9 	bl	8003218 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000268 	.word	0x20000268

08002090 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return 1;
 8002094:	2301      	movs	r3, #1
}
 8002096:	4618      	mov	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <_kill>:

int _kill(int pid, int sig)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020aa:	f006 f9f3 	bl	8008494 <__errno>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2216      	movs	r2, #22
 80020b2:	601a      	str	r2, [r3, #0]
  return -1;
 80020b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <_exit>:

void _exit (int status)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020c8:	f04f 31ff 	mov.w	r1, #4294967295
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ffe7 	bl	80020a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020d2:	e7fe      	b.n	80020d2 <_exit+0x12>

080020d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	e00a      	b.n	80020fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020e6:	f3af 8000 	nop.w
 80020ea:	4601      	mov	r1, r0
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	60ba      	str	r2, [r7, #8]
 80020f2:	b2ca      	uxtb	r2, r1
 80020f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	3301      	adds	r3, #1
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	429a      	cmp	r2, r3
 8002102:	dbf0      	blt.n	80020e6 <_read+0x12>
  }

  return len;
 8002104:	687b      	ldr	r3, [r7, #4]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b086      	sub	sp, #24
 8002112:	af00      	add	r7, sp, #0
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	e009      	b.n	8002134 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	60ba      	str	r2, [r7, #8]
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	3301      	adds	r3, #1
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	429a      	cmp	r2, r3
 800213a:	dbf1      	blt.n	8002120 <_write+0x12>
  }
  return len;
 800213c:	687b      	ldr	r3, [r7, #4]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <_close>:

int _close(int file)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800214e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002152:	4618      	mov	r0, r3
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800216e:	605a      	str	r2, [r3, #4]
  return 0;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <_isatty>:

int _isatty(int file)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002186:	2301      	movs	r3, #1
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
	...

080021b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021b8:	4a14      	ldr	r2, [pc, #80]	; (800220c <_sbrk+0x5c>)
 80021ba:	4b15      	ldr	r3, [pc, #84]	; (8002210 <_sbrk+0x60>)
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c4:	4b13      	ldr	r3, [pc, #76]	; (8002214 <_sbrk+0x64>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d102      	bne.n	80021d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021cc:	4b11      	ldr	r3, [pc, #68]	; (8002214 <_sbrk+0x64>)
 80021ce:	4a12      	ldr	r2, [pc, #72]	; (8002218 <_sbrk+0x68>)
 80021d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021d2:	4b10      	ldr	r3, [pc, #64]	; (8002214 <_sbrk+0x64>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4413      	add	r3, r2
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d207      	bcs.n	80021f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e0:	f006 f958 	bl	8008494 <__errno>
 80021e4:	4603      	mov	r3, r0
 80021e6:	220c      	movs	r2, #12
 80021e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ea:	f04f 33ff 	mov.w	r3, #4294967295
 80021ee:	e009      	b.n	8002204 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f0:	4b08      	ldr	r3, [pc, #32]	; (8002214 <_sbrk+0x64>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021f6:	4b07      	ldr	r3, [pc, #28]	; (8002214 <_sbrk+0x64>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	4a05      	ldr	r2, [pc, #20]	; (8002214 <_sbrk+0x64>)
 8002200:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002202:	68fb      	ldr	r3, [r7, #12]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20010000 	.word	0x20010000
 8002210:	00000400 	.word	0x00000400
 8002214:	200003dc 	.word	0x200003dc
 8002218:	20000530 	.word	0x20000530

0800221c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <SystemInit+0x20>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002226:	4a05      	ldr	r2, [pc, #20]	; (800223c <SystemInit+0x20>)
 8002228:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800222c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002278 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002244:	f7ff ffea 	bl	800221c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002248:	480c      	ldr	r0, [pc, #48]	; (800227c <LoopForever+0x6>)
  ldr r1, =_edata
 800224a:	490d      	ldr	r1, [pc, #52]	; (8002280 <LoopForever+0xa>)
  ldr r2, =_sidata
 800224c:	4a0d      	ldr	r2, [pc, #52]	; (8002284 <LoopForever+0xe>)
  movs r3, #0
 800224e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002250:	e002      	b.n	8002258 <LoopCopyDataInit>

08002252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002256:	3304      	adds	r3, #4

08002258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800225a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800225c:	d3f9      	bcc.n	8002252 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800225e:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002260:	4c0a      	ldr	r4, [pc, #40]	; (800228c <LoopForever+0x16>)
  movs r3, #0
 8002262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002264:	e001      	b.n	800226a <LoopFillZerobss>

08002266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002268:	3204      	adds	r2, #4

0800226a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800226a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800226c:	d3fb      	bcc.n	8002266 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800226e:	f006 f917 	bl	80084a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002272:	f7fe ff35 	bl	80010e0 <main>

08002276 <LoopForever>:

LoopForever:
    b LoopForever
 8002276:	e7fe      	b.n	8002276 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002278:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800227c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002280:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002284:	0800aa3c 	.word	0x0800aa3c
  ldr r2, =_sbss
 8002288:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800228c:	20000530 	.word	0x20000530

08002290 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002290:	e7fe      	b.n	8002290 <ADC1_IRQHandler>

08002292 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002298:	2300      	movs	r3, #0
 800229a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800229c:	2003      	movs	r0, #3
 800229e:	f000 f961 	bl	8002564 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022a2:	2000      	movs	r0, #0
 80022a4:	f000 f80e 	bl	80022c4 <HAL_InitTick>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d002      	beq.n	80022b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	71fb      	strb	r3, [r7, #7]
 80022b2:	e001      	b.n	80022b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022b4:	f7ff fc76 	bl	8001ba4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022b8:	79fb      	ldrb	r3, [r7, #7]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80022d0:	4b17      	ldr	r3, [pc, #92]	; (8002330 <HAL_InitTick+0x6c>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d023      	beq.n	8002320 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80022d8:	4b16      	ldr	r3, [pc, #88]	; (8002334 <HAL_InitTick+0x70>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4b14      	ldr	r3, [pc, #80]	; (8002330 <HAL_InitTick+0x6c>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	4619      	mov	r1, r3
 80022e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 f96d 	bl	80025ce <HAL_SYSTICK_Config>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10f      	bne.n	800231a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b0f      	cmp	r3, #15
 80022fe:	d809      	bhi.n	8002314 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002300:	2200      	movs	r2, #0
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	f04f 30ff 	mov.w	r0, #4294967295
 8002308:	f000 f937 	bl	800257a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800230c:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <HAL_InitTick+0x74>)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	e007      	b.n	8002324 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	73fb      	strb	r3, [r7, #15]
 8002318:	e004      	b.n	8002324 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	73fb      	strb	r3, [r7, #15]
 800231e:	e001      	b.n	8002324 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002324:	7bfb      	ldrb	r3, [r7, #15]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000008 	.word	0x20000008
 8002334:	20000000 	.word	0x20000000
 8002338:	20000004 	.word	0x20000004

0800233c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_IncTick+0x20>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_IncTick+0x24>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4413      	add	r3, r2
 800234c:	4a04      	ldr	r2, [pc, #16]	; (8002360 <HAL_IncTick+0x24>)
 800234e:	6013      	str	r3, [r2, #0]
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20000008 	.word	0x20000008
 8002360:	200003e0 	.word	0x200003e0

08002364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return uwTick;
 8002368:	4b03      	ldr	r3, [pc, #12]	; (8002378 <HAL_GetTick+0x14>)
 800236a:	681b      	ldr	r3, [r3, #0]
}
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	200003e0 	.word	0x200003e0

0800237c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002384:	f7ff ffee 	bl	8002364 <HAL_GetTick>
 8002388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002394:	d005      	beq.n	80023a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002396:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <HAL_Delay+0x44>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4413      	add	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023a2:	bf00      	nop
 80023a4:	f7ff ffde 	bl	8002364 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d8f7      	bhi.n	80023a4 <HAL_Delay+0x28>
  {
  }
}
 80023b4:	bf00      	nop
 80023b6:	bf00      	nop
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000008 	.word	0x20000008

080023c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d4:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <__NVIC_SetPriorityGrouping+0x44>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023e0:	4013      	ands	r3, r2
 80023e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023f6:	4a04      	ldr	r2, [pc, #16]	; (8002408 <__NVIC_SetPriorityGrouping+0x44>)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	60d3      	str	r3, [r2, #12]
}
 80023fc:	bf00      	nop
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002410:	4b04      	ldr	r3, [pc, #16]	; (8002424 <__NVIC_GetPriorityGrouping+0x18>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	0a1b      	lsrs	r3, r3, #8
 8002416:	f003 0307 	and.w	r3, r3, #7
}
 800241a:	4618      	mov	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	2b00      	cmp	r3, #0
 8002438:	db0b      	blt.n	8002452 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	f003 021f 	and.w	r2, r3, #31
 8002440:	4907      	ldr	r1, [pc, #28]	; (8002460 <__NVIC_EnableIRQ+0x38>)
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	095b      	lsrs	r3, r3, #5
 8002448:	2001      	movs	r0, #1
 800244a:	fa00 f202 	lsl.w	r2, r0, r2
 800244e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	e000e100 	.word	0xe000e100

08002464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	6039      	str	r1, [r7, #0]
 800246e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002474:	2b00      	cmp	r3, #0
 8002476:	db0a      	blt.n	800248e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	b2da      	uxtb	r2, r3
 800247c:	490c      	ldr	r1, [pc, #48]	; (80024b0 <__NVIC_SetPriority+0x4c>)
 800247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002482:	0112      	lsls	r2, r2, #4
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	440b      	add	r3, r1
 8002488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800248c:	e00a      	b.n	80024a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	b2da      	uxtb	r2, r3
 8002492:	4908      	ldr	r1, [pc, #32]	; (80024b4 <__NVIC_SetPriority+0x50>)
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	3b04      	subs	r3, #4
 800249c:	0112      	lsls	r2, r2, #4
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	440b      	add	r3, r1
 80024a2:	761a      	strb	r2, [r3, #24]
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	e000e100 	.word	0xe000e100
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b089      	sub	sp, #36	; 0x24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f1c3 0307 	rsb	r3, r3, #7
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	bf28      	it	cs
 80024d6:	2304      	movcs	r3, #4
 80024d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3304      	adds	r3, #4
 80024de:	2b06      	cmp	r3, #6
 80024e0:	d902      	bls.n	80024e8 <NVIC_EncodePriority+0x30>
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3b03      	subs	r3, #3
 80024e6:	e000      	b.n	80024ea <NVIC_EncodePriority+0x32>
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ec:	f04f 32ff 	mov.w	r2, #4294967295
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43da      	mvns	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	401a      	ands	r2, r3
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002500:	f04f 31ff 	mov.w	r1, #4294967295
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	fa01 f303 	lsl.w	r3, r1, r3
 800250a:	43d9      	mvns	r1, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002510:	4313      	orrs	r3, r2
         );
}
 8002512:	4618      	mov	r0, r3
 8002514:	3724      	adds	r7, #36	; 0x24
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3b01      	subs	r3, #1
 800252c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002530:	d301      	bcc.n	8002536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002532:	2301      	movs	r3, #1
 8002534:	e00f      	b.n	8002556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002536:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <SysTick_Config+0x40>)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3b01      	subs	r3, #1
 800253c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800253e:	210f      	movs	r1, #15
 8002540:	f04f 30ff 	mov.w	r0, #4294967295
 8002544:	f7ff ff8e 	bl	8002464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002548:	4b05      	ldr	r3, [pc, #20]	; (8002560 <SysTick_Config+0x40>)
 800254a:	2200      	movs	r2, #0
 800254c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800254e:	4b04      	ldr	r3, [pc, #16]	; (8002560 <SysTick_Config+0x40>)
 8002550:	2207      	movs	r2, #7
 8002552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	e000e010 	.word	0xe000e010

08002564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff ff29 	bl	80023c4 <__NVIC_SetPriorityGrouping>
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b086      	sub	sp, #24
 800257e:	af00      	add	r7, sp, #0
 8002580:	4603      	mov	r3, r0
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	607a      	str	r2, [r7, #4]
 8002586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800258c:	f7ff ff3e 	bl	800240c <__NVIC_GetPriorityGrouping>
 8002590:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	68b9      	ldr	r1, [r7, #8]
 8002596:	6978      	ldr	r0, [r7, #20]
 8002598:	f7ff ff8e 	bl	80024b8 <NVIC_EncodePriority>
 800259c:	4602      	mov	r2, r0
 800259e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a2:	4611      	mov	r1, r2
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff5d 	bl	8002464 <__NVIC_SetPriority>
}
 80025aa:	bf00      	nop
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	4603      	mov	r3, r0
 80025ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ff31 	bl	8002428 <__NVIC_EnableIRQ>
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff ffa2 	bl	8002520 <SysTick_Config>
 80025dc:	4603      	mov	r3, r0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b084      	sub	sp, #16
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d005      	beq.n	800260a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2204      	movs	r2, #4
 8002602:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	73fb      	strb	r3, [r7, #15]
 8002608:	e029      	b.n	800265e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 020e 	bic.w	r2, r2, #14
 8002618:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0201 	bic.w	r2, r2, #1
 8002628:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	f003 021c 	and.w	r2, r3, #28
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	2101      	movs	r1, #1
 8002638:	fa01 f202 	lsl.w	r2, r1, r2
 800263c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	4798      	blx	r3
    }
  }
  return status;
 800265e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002676:	b2db      	uxtb	r3, r3
}
 8002678:	4618      	mov	r0, r3
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002684:	b480      	push	{r7}
 8002686:	b087      	sub	sp, #28
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002692:	e148      	b.n	8002926 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	2101      	movs	r1, #1
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	fa01 f303 	lsl.w	r3, r1, r3
 80026a0:	4013      	ands	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 813a 	beq.w	8002920 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 0303 	and.w	r3, r3, #3
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d005      	beq.n	80026c4 <HAL_GPIO_Init+0x40>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d130      	bne.n	8002726 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	2203      	movs	r2, #3
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4013      	ands	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026fa:	2201      	movs	r2, #1
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4013      	ands	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	091b      	lsrs	r3, r3, #4
 8002710:	f003 0201 	and.w	r2, r3, #1
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	2b03      	cmp	r3, #3
 8002730:	d017      	beq.n	8002762 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	2203      	movs	r2, #3
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43db      	mvns	r3, r3
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	4013      	ands	r3, r2
 8002748:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4313      	orrs	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d123      	bne.n	80027b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	08da      	lsrs	r2, r3, #3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3208      	adds	r2, #8
 8002776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800277a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	220f      	movs	r2, #15
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43db      	mvns	r3, r3
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4013      	ands	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	691a      	ldr	r2, [r3, #16]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	08da      	lsrs	r2, r3, #3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3208      	adds	r2, #8
 80027b0:	6939      	ldr	r1, [r7, #16]
 80027b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	2203      	movs	r2, #3
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43db      	mvns	r3, r3
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4013      	ands	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 0203 	and.w	r2, r3, #3
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 8094 	beq.w	8002920 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f8:	4b52      	ldr	r3, [pc, #328]	; (8002944 <HAL_GPIO_Init+0x2c0>)
 80027fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027fc:	4a51      	ldr	r2, [pc, #324]	; (8002944 <HAL_GPIO_Init+0x2c0>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	6613      	str	r3, [r2, #96]	; 0x60
 8002804:	4b4f      	ldr	r3, [pc, #316]	; (8002944 <HAL_GPIO_Init+0x2c0>)
 8002806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002810:	4a4d      	ldr	r2, [pc, #308]	; (8002948 <HAL_GPIO_Init+0x2c4>)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	089b      	lsrs	r3, r3, #2
 8002816:	3302      	adds	r3, #2
 8002818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800281c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	220f      	movs	r2, #15
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4013      	ands	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800283a:	d00d      	beq.n	8002858 <HAL_GPIO_Init+0x1d4>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a43      	ldr	r2, [pc, #268]	; (800294c <HAL_GPIO_Init+0x2c8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d007      	beq.n	8002854 <HAL_GPIO_Init+0x1d0>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a42      	ldr	r2, [pc, #264]	; (8002950 <HAL_GPIO_Init+0x2cc>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d101      	bne.n	8002850 <HAL_GPIO_Init+0x1cc>
 800284c:	2302      	movs	r3, #2
 800284e:	e004      	b.n	800285a <HAL_GPIO_Init+0x1d6>
 8002850:	2307      	movs	r3, #7
 8002852:	e002      	b.n	800285a <HAL_GPIO_Init+0x1d6>
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <HAL_GPIO_Init+0x1d6>
 8002858:	2300      	movs	r3, #0
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	f002 0203 	and.w	r2, r2, #3
 8002860:	0092      	lsls	r2, r2, #2
 8002862:	4093      	lsls	r3, r2
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	4313      	orrs	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800286a:	4937      	ldr	r1, [pc, #220]	; (8002948 <HAL_GPIO_Init+0x2c4>)
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	089b      	lsrs	r3, r3, #2
 8002870:	3302      	adds	r3, #2
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002878:	4b36      	ldr	r3, [pc, #216]	; (8002954 <HAL_GPIO_Init+0x2d0>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	43db      	mvns	r3, r3
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4013      	ands	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	4313      	orrs	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800289c:	4a2d      	ldr	r2, [pc, #180]	; (8002954 <HAL_GPIO_Init+0x2d0>)
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028a2:	4b2c      	ldr	r3, [pc, #176]	; (8002954 <HAL_GPIO_Init+0x2d0>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	43db      	mvns	r3, r3
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4013      	ands	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028c6:	4a23      	ldr	r2, [pc, #140]	; (8002954 <HAL_GPIO_Init+0x2d0>)
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80028cc:	4b21      	ldr	r3, [pc, #132]	; (8002954 <HAL_GPIO_Init+0x2d0>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	43db      	mvns	r3, r3
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4013      	ands	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028f0:	4a18      	ldr	r2, [pc, #96]	; (8002954 <HAL_GPIO_Init+0x2d0>)
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80028f6:	4b17      	ldr	r3, [pc, #92]	; (8002954 <HAL_GPIO_Init+0x2d0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	43db      	mvns	r3, r3
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4013      	ands	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800291a:	4a0e      	ldr	r2, [pc, #56]	; (8002954 <HAL_GPIO_Init+0x2d0>)
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	3301      	adds	r3, #1
 8002924:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	fa22 f303 	lsr.w	r3, r2, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	f47f aeaf 	bne.w	8002694 <HAL_GPIO_Init+0x10>
  }
}
 8002936:	bf00      	nop
 8002938:	bf00      	nop
 800293a:	371c      	adds	r7, #28
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	40021000 	.word	0x40021000
 8002948:	40010000 	.word	0x40010000
 800294c:	48000400 	.word	0x48000400
 8002950:	48000800 	.word	0x48000800
 8002954:	40010400 	.word	0x40010400

08002958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	807b      	strh	r3, [r7, #2]
 8002964:	4613      	mov	r3, r2
 8002966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002968:	787b      	ldrb	r3, [r7, #1]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800296e:	887a      	ldrh	r2, [r7, #2]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002974:	e002      	b.n	800297c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002976:	887a      	ldrh	r2, [r7, #2]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e08d      	b.n	8002ab6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d106      	bne.n	80029b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff f91c 	bl	8001bec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2224      	movs	r2, #36	; 0x24
 80029b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0201 	bic.w	r2, r2, #1
 80029ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d107      	bne.n	8002a02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	e006      	b.n	8002a10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d108      	bne.n	8002a2a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	e007      	b.n	8002a3a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69d9      	ldr	r1, [r3, #28]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a1a      	ldr	r2, [r3, #32]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0201 	orr.w	r2, r2, #1
 8002a96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af02      	add	r7, sp, #8
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	607a      	str	r2, [r7, #4]
 8002aca:	461a      	mov	r2, r3
 8002acc:	460b      	mov	r3, r1
 8002ace:	817b      	strh	r3, [r7, #10]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b20      	cmp	r3, #32
 8002ade:	f040 80fd 	bne.w	8002cdc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d101      	bne.n	8002af0 <HAL_I2C_Master_Transmit+0x30>
 8002aec:	2302      	movs	r3, #2
 8002aee:	e0f6      	b.n	8002cde <HAL_I2C_Master_Transmit+0x21e>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002af8:	f7ff fc34 	bl	8002364 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	2319      	movs	r3, #25
 8002b04:	2201      	movs	r2, #1
 8002b06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f001 fca1 	bl	8004452 <I2C_WaitOnFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e0e1      	b.n	8002cde <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2221      	movs	r2, #33	; 0x21
 8002b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2210      	movs	r2, #16
 8002b26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	893a      	ldrh	r2, [r7, #8]
 8002b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	2bff      	cmp	r3, #255	; 0xff
 8002b4a:	d906      	bls.n	8002b5a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	22ff      	movs	r2, #255	; 0xff
 8002b50:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002b52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	e007      	b.n	8002b6a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002b64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b68:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d024      	beq.n	8002bbc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	781a      	ldrb	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	1c5a      	adds	r2, r3, #1
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	3301      	adds	r3, #1
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	8979      	ldrh	r1, [r7, #10]
 8002bae:	4b4e      	ldr	r3, [pc, #312]	; (8002ce8 <HAL_I2C_Master_Transmit+0x228>)
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f001 fe87 	bl	80048c8 <I2C_TransferConfig>
 8002bba:	e066      	b.n	8002c8a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	8979      	ldrh	r1, [r7, #10]
 8002bc4:	4b48      	ldr	r3, [pc, #288]	; (8002ce8 <HAL_I2C_Master_Transmit+0x228>)
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f001 fe7c 	bl	80048c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002bd0:	e05b      	b.n	8002c8a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	6a39      	ldr	r1, [r7, #32]
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f001 fc8a 	bl	80044f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e07b      	b.n	8002cde <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	781a      	ldrb	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	1c5a      	adds	r2, r3, #1
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d034      	beq.n	8002c8a <HAL_I2C_Master_Transmit+0x1ca>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d130      	bne.n	8002c8a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	2180      	movs	r1, #128	; 0x80
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f001 fc0d 	bl	8004452 <I2C_WaitOnFlagUntilTimeout>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e04d      	b.n	8002cde <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	2bff      	cmp	r3, #255	; 0xff
 8002c4a:	d90e      	bls.n	8002c6a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	22ff      	movs	r2, #255	; 0xff
 8002c50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	8979      	ldrh	r1, [r7, #10]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f001 fe30 	bl	80048c8 <I2C_TransferConfig>
 8002c68:	e00f      	b.n	8002c8a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	8979      	ldrh	r1, [r7, #10]
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f001 fe1f 	bl	80048c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d19e      	bne.n	8002bd2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	6a39      	ldr	r1, [r7, #32]
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f001 fc70 	bl	800457e <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e01a      	b.n	8002cde <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2220      	movs	r2, #32
 8002cae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6859      	ldr	r1, [r3, #4]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <HAL_I2C_Master_Transmit+0x22c>)
 8002cbc:	400b      	ands	r3, r1
 8002cbe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	e000      	b.n	8002cde <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002cdc:	2302      	movs	r3, #2
  }
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	80002000 	.word	0x80002000
 8002cec:	fe00e800 	.word	0xfe00e800

08002cf0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	607a      	str	r2, [r7, #4]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	817b      	strh	r3, [r7, #10]
 8002d00:	4613      	mov	r3, r2
 8002d02:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b20      	cmp	r3, #32
 8002d0e:	f040 80db 	bne.w	8002ec8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_I2C_Master_Receive+0x30>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e0d4      	b.n	8002eca <HAL_I2C_Master_Receive+0x1da>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d28:	f7ff fb1c 	bl	8002364 <HAL_GetTick>
 8002d2c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	2319      	movs	r3, #25
 8002d34:	2201      	movs	r2, #1
 8002d36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f001 fb89 	bl	8004452 <I2C_WaitOnFlagUntilTimeout>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e0bf      	b.n	8002eca <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2222      	movs	r2, #34	; 0x22
 8002d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2210      	movs	r2, #16
 8002d56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	893a      	ldrh	r2, [r7, #8]
 8002d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	2bff      	cmp	r3, #255	; 0xff
 8002d7a:	d90e      	bls.n	8002d9a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	22ff      	movs	r2, #255	; 0xff
 8002d80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	8979      	ldrh	r1, [r7, #10]
 8002d8a:	4b52      	ldr	r3, [pc, #328]	; (8002ed4 <HAL_I2C_Master_Receive+0x1e4>)
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f001 fd98 	bl	80048c8 <I2C_TransferConfig>
 8002d98:	e06d      	b.n	8002e76 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	8979      	ldrh	r1, [r7, #10]
 8002dac:	4b49      	ldr	r3, [pc, #292]	; (8002ed4 <HAL_I2C_Master_Receive+0x1e4>)
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f001 fd87 	bl	80048c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002dba:	e05c      	b.n	8002e76 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	6a39      	ldr	r1, [r7, #32]
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f001 fc1f 	bl	8004604 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e07c      	b.n	8002eca <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	1c5a      	adds	r2, r3, #1
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d034      	beq.n	8002e76 <HAL_I2C_Master_Receive+0x186>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d130      	bne.n	8002e76 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2180      	movs	r1, #128	; 0x80
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f001 fb17 	bl	8004452 <I2C_WaitOnFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e04d      	b.n	8002eca <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	2bff      	cmp	r3, #255	; 0xff
 8002e36:	d90e      	bls.n	8002e56 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	22ff      	movs	r2, #255	; 0xff
 8002e3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	8979      	ldrh	r1, [r7, #10]
 8002e46:	2300      	movs	r3, #0
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f001 fd3a 	bl	80048c8 <I2C_TransferConfig>
 8002e54:	e00f      	b.n	8002e76 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	8979      	ldrh	r1, [r7, #10]
 8002e68:	2300      	movs	r3, #0
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f001 fd29 	bl	80048c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d19d      	bne.n	8002dbc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	6a39      	ldr	r1, [r7, #32]
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f001 fb7a 	bl	800457e <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e01a      	b.n	8002eca <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6859      	ldr	r1, [r3, #4]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <HAL_I2C_Master_Receive+0x1e8>)
 8002ea8:	400b      	ands	r3, r1
 8002eaa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	e000      	b.n	8002eca <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002ec8:	2302      	movs	r3, #2
  }
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	80002400 	.word	0x80002400
 8002ed8:	fe00e800 	.word	0xfe00e800

08002edc <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	603b      	str	r3, [r7, #0]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ef8:	2b28      	cmp	r3, #40	; 0x28
 8002efa:	f040 8098 	bne.w	800302e <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8002f04:	88fb      	ldrh	r3, [r7, #6]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d105      	bne.n	8002f16 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f10:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e08c      	b.n	8003030 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002f16:	f248 0101 	movw	r1, #32769	; 0x8001
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f001 fd8a 	bl	8004a34 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e080      	b.n	8003030 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b2a      	cmp	r3, #42	; 0x2a
 8002f40:	d12a      	bne.n	8002f98 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002f42:	2102      	movs	r1, #2
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f001 fd75 	bl	8004a34 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f58:	d11e      	bne.n	8002f98 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f68:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d012      	beq.n	8002f98 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f76:	4a30      	ldr	r2, [pc, #192]	; (8003038 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 8002f78:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fb31 	bl	80025e6 <HAL_DMA_Abort_IT>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d006      	beq.n	8002f98 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f94:	4610      	mov	r0, r2
 8002f96:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2229      	movs	r2, #41	; 0x29
 8002f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fbc:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	88fa      	ldrh	r2, [r7, #6]
 8002fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	4a17      	ldr	r2, [pc, #92]	; (800303c <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 8002fde:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	bf0c      	ite	eq
 8002fee:	2301      	moveq	r3, #1
 8002ff0:	2300      	movne	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	0c1b      	lsrs	r3, r3, #16
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b01      	cmp	r3, #1
 8003008:	d106      	bne.n	8003018 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 800300a:	7dfb      	ldrb	r3, [r7, #23]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2208      	movs	r2, #8
 8003016:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8003020:	f248 0101 	movw	r1, #32769	; 0x8001
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f001 fc81 	bl	800492c <I2C_Enable_IRQ>

    return HAL_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	e000      	b.n	8003030 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
  }
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	08004417 	.word	0x08004417
 800303c:	0800334b 	.word	0x0800334b

08003040 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	603b      	str	r3, [r7, #0]
 800304c:	4613      	mov	r3, r2
 800304e:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003056:	b2db      	uxtb	r3, r3
 8003058:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800305c:	2b28      	cmp	r3, #40	; 0x28
 800305e:	f040 8098 	bne.w	8003192 <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8003068:	88fb      	ldrh	r3, [r7, #6]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d105      	bne.n	800307a <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003074:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e08c      	b.n	8003194 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800307a:	f248 0102 	movw	r1, #32770	; 0x8002
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f001 fcd8 	bl	8004a34 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 800308e:	2302      	movs	r3, #2
 8003090:	e080      	b.n	8003194 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b29      	cmp	r3, #41	; 0x29
 80030a4:	d12a      	bne.n	80030fc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80030a6:	2101      	movs	r1, #1
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f001 fcc3 	bl	8004a34 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030bc:	d11e      	bne.n	80030fc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030cc:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d012      	beq.n	80030fc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030da:	4a30      	ldr	r2, [pc, #192]	; (800319c <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 80030dc:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff fa7f 	bl	80025e6 <HAL_DMA_Abort_IT>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d006      	beq.n	80030fc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030f8:	4610      	mov	r0, r2
 80030fa:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	222a      	movs	r2, #42	; 0x2a
 8003100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2220      	movs	r2, #32
 8003108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003120:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	88fa      	ldrh	r2, [r7, #6]
 800312c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	4a17      	ldr	r2, [pc, #92]	; (80031a0 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 8003142:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b08      	cmp	r3, #8
 8003150:	bf0c      	ite	eq
 8003152:	2301      	moveq	r3, #1
 8003154:	2300      	movne	r3, #0
 8003156:	b2db      	uxtb	r3, r3
 8003158:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	0c1b      	lsrs	r3, r3, #16
 8003162:	b2db      	uxtb	r3, r3
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d106      	bne.n	800317c <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 800316e:	7dfb      	ldrb	r3, [r7, #23]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2208      	movs	r2, #8
 800317a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8003184:	f248 0102 	movw	r1, #32770	; 0x8002
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f001 fbcf 	bl	800492c <I2C_Enable_IRQ>

    return HAL_OK;
 800318e:	2300      	movs	r3, #0
 8003190:	e000      	b.n	8003194 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
  }
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	08004417 	.word	0x08004417
 80031a0:	0800334b 	.word	0x0800334b

080031a4 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b20      	cmp	r3, #32
 80031b6:	d10d      	bne.n	80031d4 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2228      	movs	r2, #40	; 0x28
 80031bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a07      	ldr	r2, [pc, #28]	; (80031e0 <HAL_I2C_EnableListen_IT+0x3c>)
 80031c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80031c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f001 fbae 	bl	800492c <I2C_Enable_IRQ>

    return HAL_OK;
 80031d0:	2300      	movs	r3, #0
 80031d2:	e000      	b.n	80031d6 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 80031d4:	2302      	movs	r3, #2
  }
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	0800334b 	.word	0x0800334b

080031e4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003200:	2b00      	cmp	r3, #0
 8003202:	d005      	beq.n	8003210 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	68f9      	ldr	r1, [r7, #12]
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	4798      	blx	r3
  }
}
 8003210:	bf00      	nop
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00f      	beq.n	800325a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003248:	f043 0201 	orr.w	r2, r3, #1
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003258:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00f      	beq.n	8003284 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00a      	beq.n	8003284 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	f043 0208 	orr.w	r2, r3, #8
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003282:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00f      	beq.n	80032ae <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00a      	beq.n	80032ae <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329c:	f043 0202 	orr.w	r2, r3, #2
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032ac:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f003 030b 	and.w	r3, r3, #11
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80032be:	68f9      	ldr	r1, [r7, #12]
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 ff6d 	bl	80041a0 <I2C_ITError>
  }
}
 80032c6:	bf00      	nop
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800333e:	4618      	mov	r0, r3
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b086      	sub	sp, #24
 800334e:	af00      	add	r7, sp, #0
 8003350:	60f8      	str	r0, [r7, #12]
 8003352:	60b9      	str	r1, [r7, #8]
 8003354:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <I2C_Slave_ISR_IT+0x24>
 800336a:	2302      	movs	r3, #2
 800336c:	e0e1      	b.n	8003532 <I2C_Slave_ISR_IT+0x1e8>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	f003 0320 	and.w	r3, r3, #32
 800337c:	2b00      	cmp	r3, #0
 800337e:	d008      	beq.n	8003392 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800338a:	6939      	ldr	r1, [r7, #16]
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 fda1 	bl	8003ed4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	2b00      	cmp	r3, #0
 800339a:	d04b      	beq.n	8003434 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d046      	beq.n	8003434 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d128      	bne.n	8003402 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b28      	cmp	r3, #40	; 0x28
 80033ba:	d108      	bne.n	80033ce <I2C_Slave_ISR_IT+0x84>
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033c2:	d104      	bne.n	80033ce <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80033c4:	6939      	ldr	r1, [r7, #16]
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 fe96 	bl	80040f8 <I2C_ITListenCplt>
 80033cc:	e031      	b.n	8003432 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b29      	cmp	r3, #41	; 0x29
 80033d8:	d10e      	bne.n	80033f8 <I2C_Slave_ISR_IT+0xae>
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033e0:	d00a      	beq.n	80033f8 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2210      	movs	r2, #16
 80033e8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 ffef 	bl	80043ce <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 fc4a 	bl	8003c8a <I2C_ITSlaveSeqCplt>
 80033f6:	e01c      	b.n	8003432 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2210      	movs	r2, #16
 80033fe:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003400:	e08f      	b.n	8003522 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2210      	movs	r2, #16
 8003408:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	f043 0204 	orr.w	r2, r3, #4
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <I2C_Slave_ISR_IT+0xda>
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003422:	d17e      	bne.n	8003522 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003428:	4619      	mov	r1, r3
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f000 feb8 	bl	80041a0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003430:	e077      	b.n	8003522 <I2C_Slave_ISR_IT+0x1d8>
 8003432:	e076      	b.n	8003522 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f003 0304 	and.w	r3, r3, #4
 800343a:	2b00      	cmp	r3, #0
 800343c:	d02f      	beq.n	800349e <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003444:	2b00      	cmp	r3, #0
 8003446:	d02a      	beq.n	800349e <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344c:	b29b      	uxth	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d018      	beq.n	8003484 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	1c5a      	adds	r2, r3, #1
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346e:	3b01      	subs	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003488:	b29b      	uxth	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d14b      	bne.n	8003526 <I2C_Slave_ISR_IT+0x1dc>
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003494:	d047      	beq.n	8003526 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 fbf7 	bl	8003c8a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800349c:	e043      	b.n	8003526 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d009      	beq.n	80034bc <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d004      	beq.n	80034bc <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80034b2:	6939      	ldr	r1, [r7, #16]
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 fb27 	bl	8003b08 <I2C_ITAddrCplt>
 80034ba:	e035      	b.n	8003528 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d030      	beq.n	8003528 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d02b      	beq.n	8003528 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d018      	beq.n	800350c <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	781a      	ldrb	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003502:	3b01      	subs	r3, #1
 8003504:	b29a      	uxth	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	851a      	strh	r2, [r3, #40]	; 0x28
 800350a:	e00d      	b.n	8003528 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003512:	d002      	beq.n	800351a <I2C_Slave_ISR_IT+0x1d0>
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d106      	bne.n	8003528 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 fbb5 	bl	8003c8a <I2C_ITSlaveSeqCplt>
 8003520:	e002      	b.n	8003528 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8003522:	bf00      	nop
 8003524:	e000      	b.n	8003528 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8003526:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b088      	sub	sp, #32
 800353e:	af02      	add	r7, sp, #8
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <I2C_Master_ISR_DMA+0x1a>
 8003550:	2302      	movs	r3, #2
 8003552:	e0d9      	b.n	8003708 <I2C_Master_ISR_DMA+0x1ce>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f003 0310 	and.w	r3, r3, #16
 8003562:	2b00      	cmp	r3, #0
 8003564:	d016      	beq.n	8003594 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800356c:	2b00      	cmp	r3, #0
 800356e:	d011      	beq.n	8003594 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2210      	movs	r2, #16
 8003576:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357c:	f043 0204 	orr.w	r2, r3, #4
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003584:	2120      	movs	r1, #32
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f001 f9d0 	bl	800492c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 ff1e 	bl	80043ce <I2C_Flush_TXDR>
 8003592:	e0b4      	b.n	80036fe <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359a:	2b00      	cmp	r3, #0
 800359c:	d071      	beq.n	8003682 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d06c      	beq.n	8003682 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035b6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d04e      	beq.n	8003660 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ce:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2bff      	cmp	r3, #255	; 0xff
 80035d8:	d906      	bls.n	80035e8 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	22ff      	movs	r2, #255	; 0xff
 80035de:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80035e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	e010      	b.n	800360a <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035fa:	d003      	beq.n	8003604 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	617b      	str	r3, [r7, #20]
 8003602:	e002      	b.n	800360a <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003604:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003608:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360e:	b2da      	uxtb	r2, r3
 8003610:	8a79      	ldrh	r1, [r7, #18]
 8003612:	2300      	movs	r3, #0
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f001 f955 	bl	80048c8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	b29a      	uxth	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b22      	cmp	r3, #34	; 0x22
 800363a:	d108      	bne.n	800364e <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800364a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800364c:	e057      	b.n	80036fe <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800365c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800365e:	e04e      	b.n	80036fe <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800366e:	d003      	beq.n	8003678 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 facd 	bl	8003c10 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003676:	e042      	b.n	80036fe <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003678:	2140      	movs	r1, #64	; 0x40
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 fd90 	bl	80041a0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003680:	e03d      	b.n	80036fe <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003688:	2b00      	cmp	r3, #0
 800368a:	d028      	beq.n	80036de <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003692:	2b00      	cmp	r3, #0
 8003694:	d023      	beq.n	80036de <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d119      	bne.n	80036d4 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036ae:	d025      	beq.n	80036fc <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036b8:	d108      	bne.n	80036cc <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036c8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80036ca:	e017      	b.n	80036fc <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 fa9f 	bl	8003c10 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80036d2:	e013      	b.n	80036fc <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80036d4:	2140      	movs	r1, #64	; 0x40
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 fd62 	bl	80041a0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80036dc:	e00e      	b.n	80036fc <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f003 0320 	and.w	r3, r3, #32
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00a      	beq.n	80036fe <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d005      	beq.n	80036fe <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80036f2:	68b9      	ldr	r1, [r7, #8]
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 fb25 	bl	8003d44 <I2C_ITMasterCplt>
 80036fa:	e000      	b.n	80036fe <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80036fc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af02      	add	r7, sp, #8
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800371c:	4b8d      	ldr	r3, [pc, #564]	; (8003954 <I2C_Mem_ISR_DMA+0x244>)
 800371e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <I2C_Mem_ISR_DMA+0x1e>
 800372a:	2302      	movs	r3, #2
 800372c:	e10e      	b.n	800394c <I2C_Mem_ISR_DMA+0x23c>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f003 0310 	and.w	r3, r3, #16
 800373c:	2b00      	cmp	r3, #0
 800373e:	d016      	beq.n	800376e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003746:	2b00      	cmp	r3, #0
 8003748:	d011      	beq.n	800376e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2210      	movs	r2, #16
 8003750:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	f043 0204 	orr.w	r2, r3, #4
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800375e:	2120      	movs	r1, #32
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f001 f8e3 	bl	800492c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 fe31 	bl	80043ce <I2C_Flush_TXDR>
 800376c:	e0e9      	b.n	8003942 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00e      	beq.n	8003796 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800377e:	2b00      	cmp	r3, #0
 8003780:	d009      	beq.n	8003796 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800378a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f04f 32ff 	mov.w	r2, #4294967295
 8003792:	651a      	str	r2, [r3, #80]	; 0x50
 8003794:	e0d5      	b.n	8003942 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379c:	2b00      	cmp	r3, #0
 800379e:	d05f      	beq.n	8003860 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d05a      	beq.n	8003860 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80037aa:	2101      	movs	r1, #1
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f001 f941 	bl	8004a34 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80037b2:	2110      	movs	r1, #16
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f001 f8b9 	bl	800492c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d048      	beq.n	8003856 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	2bff      	cmp	r3, #255	; 0xff
 80037cc:	d910      	bls.n	80037f0 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	22ff      	movs	r2, #255	; 0xff
 80037d2:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d8:	b299      	uxth	r1, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	2300      	movs	r3, #0
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f001 f86d 	bl	80048c8 <I2C_TransferConfig>
 80037ee:	e011      	b.n	8003814 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037fe:	b299      	uxth	r1, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003804:	b2da      	uxtb	r2, r3
 8003806:	2300      	movs	r3, #0
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f001 f85a 	bl	80048c8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b22      	cmp	r3, #34	; 0x22
 8003830:	d108      	bne.n	8003844 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003840:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003842:	e07e      	b.n	8003942 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003852:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003854:	e075      	b.n	8003942 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003856:	2140      	movs	r1, #64	; 0x40
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 fca1 	bl	80041a0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800385e:	e070      	b.n	8003942 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	d05d      	beq.n	8003926 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003870:	2b00      	cmp	r3, #0
 8003872:	d058      	beq.n	8003926 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003874:	2101      	movs	r1, #1
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f001 f8dc 	bl	8004a34 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800387c:	2110      	movs	r1, #16
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f001 f854 	bl	800492c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b22      	cmp	r3, #34	; 0x22
 800388e:	d101      	bne.n	8003894 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8003890:	4b31      	ldr	r3, [pc, #196]	; (8003958 <I2C_Mem_ISR_DMA+0x248>)
 8003892:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003898:	b29b      	uxth	r3, r3
 800389a:	2bff      	cmp	r3, #255	; 0xff
 800389c:	d910      	bls.n	80038c0 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	22ff      	movs	r2, #255	; 0xff
 80038a2:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a8:	b299      	uxth	r1, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f001 f805 	bl	80048c8 <I2C_TransferConfig>
 80038be:	e011      	b.n	80038e4 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ce:	b299      	uxth	r1, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 fff2 	bl	80048c8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b22      	cmp	r3, #34	; 0x22
 8003900:	d108      	bne.n	8003914 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003910:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003912:	e016      	b.n	8003942 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003922:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003924:	e00d      	b.n	8003942 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	f003 0320 	and.w	r3, r3, #32
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800393a:	68b9      	ldr	r1, [r7, #8]
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 fa01 	bl	8003d44 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	80002000 	.word	0x80002000
 8003958:	80002400 	.word	0x80002400

0800395c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b088      	sub	sp, #32
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800396e:	2300      	movs	r3, #0
 8003970:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <I2C_Slave_ISR_DMA+0x24>
 800397c:	2302      	movs	r3, #2
 800397e:	e0bf      	b.n	8003b00 <I2C_Slave_ISR_DMA+0x1a4>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b00      	cmp	r3, #0
 8003990:	d008      	beq.n	80039a4 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 fa98 	bl	8003ed4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 8095 	beq.w	8003ada <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 808f 	beq.w	8003ada <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d104      	bne.n	80039d0 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d07d      	beq.n	8003acc <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00c      	beq.n	80039f2 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d007      	beq.n	80039f2 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 80039ee:	2301      	movs	r3, #1
 80039f0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00c      	beq.n	8003a14 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d007      	beq.n	8003a14 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8003a10:	2301      	movs	r3, #1
 8003a12:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d128      	bne.n	8003a6c <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b28      	cmp	r3, #40	; 0x28
 8003a24:	d108      	bne.n	8003a38 <I2C_Slave_ISR_DMA+0xdc>
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a2c:	d104      	bne.n	8003a38 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003a2e:	68b9      	ldr	r1, [r7, #8]
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 fb61 	bl	80040f8 <I2C_ITListenCplt>
 8003a36:	e048      	b.n	8003aca <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b29      	cmp	r3, #41	; 0x29
 8003a42:	d10e      	bne.n	8003a62 <I2C_Slave_ISR_DMA+0x106>
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a4a:	d00a      	beq.n	8003a62 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2210      	movs	r2, #16
 8003a52:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 fcba 	bl	80043ce <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 f915 	bl	8003c8a <I2C_ITSlaveSeqCplt>
 8003a60:	e033      	b.n	8003aca <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2210      	movs	r2, #16
 8003a68:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003a6a:	e034      	b.n	8003ad6 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2210      	movs	r2, #16
 8003a72:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a78:	f043 0204 	orr.w	r2, r3, #4
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a86:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <I2C_Slave_ISR_DMA+0x13a>
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a94:	d11f      	bne.n	8003ad6 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a96:	7dfb      	ldrb	r3, [r7, #23]
 8003a98:	2b21      	cmp	r3, #33	; 0x21
 8003a9a:	d002      	beq.n	8003aa2 <I2C_Slave_ISR_DMA+0x146>
 8003a9c:	7dfb      	ldrb	r3, [r7, #23]
 8003a9e:	2b29      	cmp	r3, #41	; 0x29
 8003aa0:	d103      	bne.n	8003aaa <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2221      	movs	r2, #33	; 0x21
 8003aa6:	631a      	str	r2, [r3, #48]	; 0x30
 8003aa8:	e008      	b.n	8003abc <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003aaa:	7dfb      	ldrb	r3, [r7, #23]
 8003aac:	2b22      	cmp	r3, #34	; 0x22
 8003aae:	d002      	beq.n	8003ab6 <I2C_Slave_ISR_DMA+0x15a>
 8003ab0:	7dfb      	ldrb	r3, [r7, #23]
 8003ab2:	2b2a      	cmp	r3, #42	; 0x2a
 8003ab4:	d102      	bne.n	8003abc <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2222      	movs	r2, #34	; 0x22
 8003aba:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 fb6c 	bl	80041a0 <I2C_ITError>
      if (treatdmanack == 1U)
 8003ac8:	e005      	b.n	8003ad6 <I2C_Slave_ISR_DMA+0x17a>
 8003aca:	e004      	b.n	8003ad6 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2210      	movs	r2, #16
 8003ad2:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003ad4:	e00f      	b.n	8003af6 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8003ad6:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003ad8:	e00d      	b.n	8003af6 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d008      	beq.n	8003af6 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 f809 	bl	8003b08 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3720      	adds	r7, #32
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b1e:	2b28      	cmp	r3, #40	; 0x28
 8003b20:	d16a      	bne.n	8003bf8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	0c1b      	lsrs	r3, r3, #16
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	0c1b      	lsrs	r3, r3, #16
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003b40:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b4e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003b5c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d138      	bne.n	8003bd8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003b66:	897b      	ldrh	r3, [r7, #10]
 8003b68:	09db      	lsrs	r3, r3, #7
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	89bb      	ldrh	r3, [r7, #12]
 8003b6e:	4053      	eors	r3, r2
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	f003 0306 	and.w	r3, r3, #6
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d11c      	bne.n	8003bb4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003b7a:	897b      	ldrh	r3, [r7, #10]
 8003b7c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b82:	1c5a      	adds	r2, r3, #1
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d13b      	bne.n	8003c08 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2208      	movs	r2, #8
 8003b9c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003ba6:	89ba      	ldrh	r2, [r7, #12]
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
 8003baa:	4619      	mov	r1, r3
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7fd f9df 	bl	8000f70 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003bb2:	e029      	b.n	8003c08 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003bb4:	893b      	ldrh	r3, [r7, #8]
 8003bb6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003bb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 ff39 	bl	8004a34 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003bca:	89ba      	ldrh	r2, [r7, #12]
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	4619      	mov	r1, r3
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7fd f9cd 	bl	8000f70 <HAL_I2C_AddrCallback>
}
 8003bd6:	e017      	b.n	8003c08 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003bd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 ff29 	bl	8004a34 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003bea:	89ba      	ldrh	r2, [r7, #12]
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
 8003bee:	4619      	mov	r1, r3
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7fd f9bd 	bl	8000f70 <HAL_I2C_AddrCallback>
}
 8003bf6:	e007      	b.n	8003c08 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2208      	movs	r2, #8
 8003bfe:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003c08:	bf00      	nop
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b21      	cmp	r3, #33	; 0x21
 8003c2a:	d115      	bne.n	8003c58 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2211      	movs	r2, #17
 8003c38:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003c40:	2101      	movs	r1, #1
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 fef6 	bl	8004a34 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7ff fb3c 	bl	80032ce <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c56:	e014      	b.n	8003c82 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2212      	movs	r2, #18
 8003c64:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003c6c:	2102      	movs	r1, #2
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fee0 	bl	8004a34 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff fb30 	bl	80032e2 <HAL_I2C_MasterRxCpltCallback>
}
 8003c82:	bf00      	nop
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b084      	sub	sp, #16
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d008      	beq.n	8003cbe <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	e00c      	b.n	8003cd8 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d007      	beq.n	8003cd8 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cd6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b29      	cmp	r3, #41	; 0x29
 8003ce2:	d112      	bne.n	8003d0a <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2228      	movs	r2, #40	; 0x28
 8003ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2221      	movs	r2, #33	; 0x21
 8003cf0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fe9d 	bl	8004a34 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7fd f9ae 	bl	8001064 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003d08:	e017      	b.n	8003d3a <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b2a      	cmp	r3, #42	; 0x2a
 8003d14:	d111      	bne.n	8003d3a <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2228      	movs	r2, #40	; 0x28
 8003d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2222      	movs	r2, #34	; 0x22
 8003d22:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003d24:	2102      	movs	r1, #2
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fe84 	bl	8004a34 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7fd f95d 	bl	8000ff4 <HAL_I2C_SlaveRxCpltCallback>
}
 8003d3a:	bf00      	nop
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2220      	movs	r2, #32
 8003d58:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b21      	cmp	r3, #33	; 0x21
 8003d64:	d107      	bne.n	8003d76 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003d66:	2101      	movs	r1, #1
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 fe63 	bl	8004a34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2211      	movs	r2, #17
 8003d72:	631a      	str	r2, [r3, #48]	; 0x30
 8003d74:	e00c      	b.n	8003d90 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b22      	cmp	r3, #34	; 0x22
 8003d80:	d106      	bne.n	8003d90 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003d82:	2102      	movs	r1, #2
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 fe55 	bl	8004a34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2212      	movs	r2, #18
 8003d8e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6859      	ldr	r1, [r3, #4]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	4b4c      	ldr	r3, [pc, #304]	; (8003ecc <I2C_ITMasterCplt+0x188>)
 8003d9c:	400b      	ands	r3, r1
 8003d9e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a49      	ldr	r2, [pc, #292]	; (8003ed0 <I2C_ITMasterCplt+0x18c>)
 8003daa:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f003 0310 	and.w	r3, r3, #16
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d009      	beq.n	8003dca <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2210      	movs	r2, #16
 8003dbc:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	f043 0204 	orr.w	r2, r3, #4
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b60      	cmp	r3, #96	; 0x60
 8003dd4:	d10a      	bne.n	8003dec <I2C_ITMasterCplt+0xa8>
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d005      	beq.n	8003dec <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003dea:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 faee 	bl	80043ce <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b60      	cmp	r3, #96	; 0x60
 8003e02:	d002      	beq.n	8003e0a <I2C_ITMasterCplt+0xc6>
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d006      	beq.n	8003e18 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0e:	4619      	mov	r1, r3
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f9c5 	bl	80041a0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003e16:	e054      	b.n	8003ec2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b21      	cmp	r3, #33	; 0x21
 8003e22:	d124      	bne.n	8003e6e <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b40      	cmp	r3, #64	; 0x40
 8003e3c:	d10b      	bne.n	8003e56 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff fa51 	bl	80032f6 <HAL_I2C_MemTxCpltCallback>
}
 8003e54:	e035      	b.n	8003ec2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff fa31 	bl	80032ce <HAL_I2C_MasterTxCpltCallback>
}
 8003e6c:	e029      	b.n	8003ec2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b22      	cmp	r3, #34	; 0x22
 8003e78:	d123      	bne.n	8003ec2 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b40      	cmp	r3, #64	; 0x40
 8003e92:	d10b      	bne.n	8003eac <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7ff fa30 	bl	800330a <HAL_I2C_MemRxCpltCallback>
}
 8003eaa:	e00a      	b.n	8003ec2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7ff fa10 	bl	80032e2 <HAL_I2C_MasterRxCpltCallback>
}
 8003ec2:	bf00      	nop
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	fe00e800 	.word	0xfe00e800
 8003ed0:	ffff0000 	.word	0xffff0000

08003ed4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ef0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
 8003efc:	2b21      	cmp	r3, #33	; 0x21
 8003efe:	d002      	beq.n	8003f06 <I2C_ITSlaveCplt+0x32>
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
 8003f02:	2b29      	cmp	r3, #41	; 0x29
 8003f04:	d108      	bne.n	8003f18 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003f06:	f248 0101 	movw	r1, #32769	; 0x8001
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fd92 	bl	8004a34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2221      	movs	r2, #33	; 0x21
 8003f14:	631a      	str	r2, [r3, #48]	; 0x30
 8003f16:	e019      	b.n	8003f4c <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
 8003f1a:	2b22      	cmp	r3, #34	; 0x22
 8003f1c:	d002      	beq.n	8003f24 <I2C_ITSlaveCplt+0x50>
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
 8003f20:	2b2a      	cmp	r3, #42	; 0x2a
 8003f22:	d108      	bne.n	8003f36 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003f24:	f248 0102 	movw	r1, #32770	; 0x8002
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 fd83 	bl	8004a34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2222      	movs	r2, #34	; 0x22
 8003f32:	631a      	str	r2, [r3, #48]	; 0x30
 8003f34:	e00a      	b.n	8003f4c <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003f36:	7bfb      	ldrb	r3, [r7, #15]
 8003f38:	2b28      	cmp	r3, #40	; 0x28
 8003f3a:	d107      	bne.n	8003f4c <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003f3c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 fd77 	bl	8004a34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f5a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6859      	ldr	r1, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	4b62      	ldr	r3, [pc, #392]	; (80040f0 <I2C_ITSlaveCplt+0x21c>)
 8003f68:	400b      	ands	r3, r1
 8003f6a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 fa2e 	bl	80043ce <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d013      	beq.n	8003fa4 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f8a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d01f      	beq.n	8003fd4 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fa2:	e017      	b.n	8003fd4 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d012      	beq.n	8003fd4 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fbc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d006      	beq.n	8003fd4 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d020      	beq.n	8004020 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f023 0304 	bic.w	r3, r3, #4
 8003fe4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	1c5a      	adds	r2, r3, #1
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00c      	beq.n	8004020 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800400a:	3b01      	subs	r3, #1
 800400c:	b29a      	uxth	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d005      	beq.n	8004036 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402e:	f043 0204 	orr.w	r2, r3, #4
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004048:	2b00      	cmp	r3, #0
 800404a:	d010      	beq.n	800406e <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004050:	4619      	mov	r1, r3
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f8a4 	bl	80041a0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b28      	cmp	r3, #40	; 0x28
 8004062:	d141      	bne.n	80040e8 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004064:	6979      	ldr	r1, [r7, #20]
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f846 	bl	80040f8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800406c:	e03c      	b.n	80040e8 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004072:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004076:	d014      	beq.n	80040a2 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7ff fe06 	bl	8003c8a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a1c      	ldr	r2, [pc, #112]	; (80040f4 <I2C_ITSlaveCplt+0x220>)
 8004082:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7fc ff5c 	bl	8000f58 <HAL_I2C_ListenCpltCallback>
}
 80040a0:	e022      	b.n	80040e8 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b22      	cmp	r3, #34	; 0x22
 80040ac:	d10e      	bne.n	80040cc <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7fc ff95 	bl	8000ff4 <HAL_I2C_SlaveRxCpltCallback>
}
 80040ca:	e00d      	b.n	80040e8 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2220      	movs	r2, #32
 80040d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7fc ffbe 	bl	8001064 <HAL_I2C_SlaveTxCpltCallback>
}
 80040e8:	bf00      	nop
 80040ea:	3718      	adds	r7, #24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	fe00e800 	.word	0xfe00e800
 80040f4:	ffff0000 	.word	0xffff0000

080040f8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a25      	ldr	r2, [pc, #148]	; (800419c <I2C_ITListenCplt+0xa4>)
 8004106:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2220      	movs	r2, #32
 8004112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	f003 0304 	and.w	r3, r3, #4
 800412a:	2b00      	cmp	r3, #0
 800412c:	d022      	beq.n	8004174 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414a:	2b00      	cmp	r3, #0
 800414c:	d012      	beq.n	8004174 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004152:	3b01      	subs	r3, #1
 8004154:	b29a      	uxth	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415e:	b29b      	uxth	r3, r3
 8004160:	3b01      	subs	r3, #1
 8004162:	b29a      	uxth	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416c:	f043 0204 	orr.w	r2, r3, #4
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004174:	f248 0103 	movw	r1, #32771	; 0x8003
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 fc5b 	bl	8004a34 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2210      	movs	r2, #16
 8004184:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7fc fee2 	bl	8000f58 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004194:	bf00      	nop
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	ffff0000 	.word	0xffff0000

080041a0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041b0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a6d      	ldr	r2, [pc, #436]	; (8004374 <I2C_ITError+0x1d4>)
 80041be:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
 80041d4:	2b28      	cmp	r3, #40	; 0x28
 80041d6:	d005      	beq.n	80041e4 <I2C_ITError+0x44>
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
 80041da:	2b29      	cmp	r3, #41	; 0x29
 80041dc:	d002      	beq.n	80041e4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80041de:	7bfb      	ldrb	r3, [r7, #15]
 80041e0:	2b2a      	cmp	r3, #42	; 0x2a
 80041e2:	d10b      	bne.n	80041fc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80041e4:	2103      	movs	r1, #3
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fc24 	bl	8004a34 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2228      	movs	r2, #40	; 0x28
 80041f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a60      	ldr	r2, [pc, #384]	; (8004378 <I2C_ITError+0x1d8>)
 80041f8:	635a      	str	r2, [r3, #52]	; 0x34
 80041fa:	e030      	b.n	800425e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80041fc:	f248 0103 	movw	r1, #32771	; 0x8003
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 fc17 	bl	8004a34 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f8e1 	bl	80043ce <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b60      	cmp	r3, #96	; 0x60
 8004216:	d01f      	beq.n	8004258 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2220      	movs	r2, #32
 800421c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	f003 0320 	and.w	r3, r3, #32
 800422a:	2b20      	cmp	r3, #32
 800422c:	d114      	bne.n	8004258 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	f003 0310 	and.w	r3, r3, #16
 8004238:	2b10      	cmp	r3, #16
 800423a:	d109      	bne.n	8004250 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2210      	movs	r2, #16
 8004242:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004248:	f043 0204 	orr.w	r2, r3, #4
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2220      	movs	r2, #32
 8004256:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004268:	2b00      	cmp	r3, #0
 800426a:	d039      	beq.n	80042e0 <I2C_ITError+0x140>
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2b11      	cmp	r3, #17
 8004270:	d002      	beq.n	8004278 <I2C_ITError+0xd8>
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2b21      	cmp	r3, #33	; 0x21
 8004276:	d133      	bne.n	80042e0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004282:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004286:	d107      	bne.n	8004298 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004296:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429c:	4618      	mov	r0, r3
 800429e:	f7fe f9e3 	bl	8002668 <HAL_DMA_GetState>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d017      	beq.n	80042d8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ac:	4a33      	ldr	r2, [pc, #204]	; (800437c <I2C_ITError+0x1dc>)
 80042ae:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fe f992 	bl	80025e6 <HAL_DMA_Abort_IT>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d04d      	beq.n	8004364 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042d2:	4610      	mov	r0, r2
 80042d4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042d6:	e045      	b.n	8004364 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 f851 	bl	8004380 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042de:	e041      	b.n	8004364 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d039      	beq.n	800435c <I2C_ITError+0x1bc>
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2b12      	cmp	r3, #18
 80042ec:	d002      	beq.n	80042f4 <I2C_ITError+0x154>
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	2b22      	cmp	r3, #34	; 0x22
 80042f2:	d133      	bne.n	800435c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004302:	d107      	bne.n	8004314 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004312:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004318:	4618      	mov	r0, r3
 800431a:	f7fe f9a5 	bl	8002668 <HAL_DMA_GetState>
 800431e:	4603      	mov	r3, r0
 8004320:	2b01      	cmp	r3, #1
 8004322:	d017      	beq.n	8004354 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004328:	4a14      	ldr	r2, [pc, #80]	; (800437c <I2C_ITError+0x1dc>)
 800432a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004338:	4618      	mov	r0, r3
 800433a:	f7fe f954 	bl	80025e6 <HAL_DMA_Abort_IT>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d011      	beq.n	8004368 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800434e:	4610      	mov	r0, r2
 8004350:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004352:	e009      	b.n	8004368 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f813 	bl	8004380 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800435a:	e005      	b.n	8004368 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f80f 	bl	8004380 <I2C_TreatErrorCallback>
  }
}
 8004362:	e002      	b.n	800436a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004364:	bf00      	nop
 8004366:	e000      	b.n	800436a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004368:	bf00      	nop
}
 800436a:	bf00      	nop
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	ffff0000 	.word	0xffff0000
 8004378:	0800334b 	.word	0x0800334b
 800437c:	08004417 	.word	0x08004417

08004380 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b60      	cmp	r3, #96	; 0x60
 8004392:	d10e      	bne.n	80043b2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7fe ffb7 	bl	800331e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80043b0:	e009      	b.n	80043c6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f7fc fe71 	bl	80010a8 <HAL_I2C_ErrorCallback>
}
 80043c6:	bf00      	nop
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d103      	bne.n	80043ec <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2200      	movs	r2, #0
 80043ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d007      	beq.n	800440a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	699a      	ldr	r2, [r3, #24]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0201 	orr.w	r2, r2, #1
 8004408:	619a      	str	r2, [r3, #24]
  }
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b084      	sub	sp, #16
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004422:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004430:	2200      	movs	r2, #0
 8004432:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004440:	2200      	movs	r2, #0
 8004442:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f7ff ff9b 	bl	8004380 <I2C_TreatErrorCallback>
}
 800444a:	bf00      	nop
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b084      	sub	sp, #16
 8004456:	af00      	add	r7, sp, #0
 8004458:	60f8      	str	r0, [r7, #12]
 800445a:	60b9      	str	r1, [r7, #8]
 800445c:	603b      	str	r3, [r7, #0]
 800445e:	4613      	mov	r3, r2
 8004460:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004462:	e031      	b.n	80044c8 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446a:	d02d      	beq.n	80044c8 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800446c:	f7fd ff7a 	bl	8002364 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	429a      	cmp	r2, r3
 800447a:	d302      	bcc.n	8004482 <I2C_WaitOnFlagUntilTimeout+0x30>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d122      	bne.n	80044c8 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	699a      	ldr	r2, [r3, #24]
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	4013      	ands	r3, r2
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	429a      	cmp	r2, r3
 8004490:	bf0c      	ite	eq
 8004492:	2301      	moveq	r3, #1
 8004494:	2300      	movne	r3, #0
 8004496:	b2db      	uxtb	r3, r3
 8004498:	461a      	mov	r2, r3
 800449a:	79fb      	ldrb	r3, [r7, #7]
 800449c:	429a      	cmp	r2, r3
 800449e:	d113      	bne.n	80044c8 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a4:	f043 0220 	orr.w	r2, r3, #32
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2220      	movs	r2, #32
 80044b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e00f      	b.n	80044e8 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699a      	ldr	r2, [r3, #24]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	4013      	ands	r3, r2
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	bf0c      	ite	eq
 80044d8:	2301      	moveq	r3, #1
 80044da:	2300      	movne	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	461a      	mov	r2, r3
 80044e0:	79fb      	ldrb	r3, [r7, #7]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d0be      	beq.n	8004464 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044fc:	e033      	b.n	8004566 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	68b9      	ldr	r1, [r7, #8]
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 f900 	bl	8004708 <I2C_IsErrorOccurred>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e031      	b.n	8004576 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004518:	d025      	beq.n	8004566 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800451a:	f7fd ff23 	bl	8002364 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	429a      	cmp	r2, r3
 8004528:	d302      	bcc.n	8004530 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d11a      	bne.n	8004566 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b02      	cmp	r3, #2
 800453c:	d013      	beq.n	8004566 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004542:	f043 0220 	orr.w	r2, r3, #32
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2220      	movs	r2, #32
 800454e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e007      	b.n	8004576 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b02      	cmp	r3, #2
 8004572:	d1c4      	bne.n	80044fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b084      	sub	sp, #16
 8004582:	af00      	add	r7, sp, #0
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800458a:	e02f      	b.n	80045ec <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	68b9      	ldr	r1, [r7, #8]
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 f8b9 	bl	8004708 <I2C_IsErrorOccurred>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e02d      	b.n	80045fc <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a0:	f7fd fee0 	bl	8002364 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d302      	bcc.n	80045b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d11a      	bne.n	80045ec <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b20      	cmp	r3, #32
 80045c2:	d013      	beq.n	80045ec <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c8:	f043 0220 	orr.w	r2, r3, #32
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e007      	b.n	80045fc <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	f003 0320 	and.w	r3, r3, #32
 80045f6:	2b20      	cmp	r3, #32
 80045f8:	d1c8      	bne.n	800458c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004610:	e06b      	b.n	80046ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	68b9      	ldr	r1, [r7, #8]
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 f876 	bl	8004708 <I2C_IsErrorOccurred>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e069      	b.n	80046fa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	f003 0320 	and.w	r3, r3, #32
 8004630:	2b20      	cmp	r3, #32
 8004632:	d138      	bne.n	80046a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	f003 0304 	and.w	r3, r3, #4
 800463e:	2b04      	cmp	r3, #4
 8004640:	d105      	bne.n	800464e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	e055      	b.n	80046fa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	f003 0310 	and.w	r3, r3, #16
 8004658:	2b10      	cmp	r3, #16
 800465a:	d107      	bne.n	800466c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2210      	movs	r2, #16
 8004662:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2204      	movs	r2, #4
 8004668:	645a      	str	r2, [r3, #68]	; 0x44
 800466a:	e002      	b.n	8004672 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2220      	movs	r2, #32
 8004678:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6859      	ldr	r1, [r3, #4]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	4b1f      	ldr	r3, [pc, #124]	; (8004704 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8004686:	400b      	ands	r3, r1
 8004688:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2220      	movs	r2, #32
 800468e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e029      	b.n	80046fa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a6:	f7fd fe5d 	bl	8002364 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d302      	bcc.n	80046bc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d116      	bne.n	80046ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d00f      	beq.n	80046ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ce:	f043 0220 	orr.w	r2, r3, #32
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2220      	movs	r2, #32
 80046da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e007      	b.n	80046fa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d18c      	bne.n	8004612 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	fe00e800 	.word	0xfe00e800

08004708 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08a      	sub	sp, #40	; 0x28
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004714:	2300      	movs	r3, #0
 8004716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004722:	2300      	movs	r3, #0
 8004724:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	f003 0310 	and.w	r3, r3, #16
 8004730:	2b00      	cmp	r3, #0
 8004732:	d068      	beq.n	8004806 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2210      	movs	r2, #16
 800473a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800473c:	e049      	b.n	80047d2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004744:	d045      	beq.n	80047d2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004746:	f7fd fe0d 	bl	8002364 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	429a      	cmp	r2, r3
 8004754:	d302      	bcc.n	800475c <I2C_IsErrorOccurred+0x54>
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d13a      	bne.n	80047d2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004766:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800476e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800477a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800477e:	d121      	bne.n	80047c4 <I2C_IsErrorOccurred+0xbc>
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004786:	d01d      	beq.n	80047c4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004788:	7cfb      	ldrb	r3, [r7, #19]
 800478a:	2b20      	cmp	r3, #32
 800478c:	d01a      	beq.n	80047c4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800479c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800479e:	f7fd fde1 	bl	8002364 <HAL_GetTick>
 80047a2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047a4:	e00e      	b.n	80047c4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80047a6:	f7fd fddd 	bl	8002364 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b19      	cmp	r3, #25
 80047b2:	d907      	bls.n	80047c4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	f043 0320 	orr.w	r3, r3, #32
 80047ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80047c2:	e006      	b.n	80047d2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	f003 0320 	and.w	r3, r3, #32
 80047ce:	2b20      	cmp	r3, #32
 80047d0:	d1e9      	bne.n	80047a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	f003 0320 	and.w	r3, r3, #32
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d003      	beq.n	80047e8 <I2C_IsErrorOccurred+0xe0>
 80047e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0aa      	beq.n	800473e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80047e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d103      	bne.n	80047f8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2220      	movs	r2, #32
 80047f6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	f043 0304 	orr.w	r3, r3, #4
 80047fe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00b      	beq.n	8004830 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	f043 0301 	orr.w	r3, r3, #1
 800481e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004828:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00b      	beq.n	8004852 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	f043 0308 	orr.w	r3, r3, #8
 8004840:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800484a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00b      	beq.n	8004874 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	f043 0302 	orr.w	r3, r3, #2
 8004862:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800486c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004874:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004878:	2b00      	cmp	r3, #0
 800487a:	d01c      	beq.n	80048b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f7ff fda6 	bl	80043ce <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6859      	ldr	r1, [r3, #4]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	4b0d      	ldr	r3, [pc, #52]	; (80048c4 <I2C_IsErrorOccurred+0x1bc>)
 800488e:	400b      	ands	r3, r1
 8004890:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	431a      	orrs	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80048b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3728      	adds	r7, #40	; 0x28
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	fe00e800 	.word	0xfe00e800

080048c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	607b      	str	r3, [r7, #4]
 80048d2:	460b      	mov	r3, r1
 80048d4:	817b      	strh	r3, [r7, #10]
 80048d6:	4613      	mov	r3, r2
 80048d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048da:	897b      	ldrh	r3, [r7, #10]
 80048dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048e0:	7a7b      	ldrb	r3, [r7, #9]
 80048e2:	041b      	lsls	r3, r3, #16
 80048e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	6a3b      	ldr	r3, [r7, #32]
 8004900:	0d5b      	lsrs	r3, r3, #21
 8004902:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004906:	4b08      	ldr	r3, [pc, #32]	; (8004928 <I2C_TransferConfig+0x60>)
 8004908:	430b      	orrs	r3, r1
 800490a:	43db      	mvns	r3, r3
 800490c:	ea02 0103 	and.w	r1, r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	430a      	orrs	r2, r1
 8004918:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800491a:	bf00      	nop
 800491c:	371c      	adds	r7, #28
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	03ff63ff 	.word	0x03ff63ff

0800492c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	460b      	mov	r3, r1
 8004936:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004940:	4a39      	ldr	r2, [pc, #228]	; (8004a28 <I2C_Enable_IRQ+0xfc>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d032      	beq.n	80049ac <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800494a:	4a38      	ldr	r2, [pc, #224]	; (8004a2c <I2C_Enable_IRQ+0x100>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d02d      	beq.n	80049ac <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004954:	4a36      	ldr	r2, [pc, #216]	; (8004a30 <I2C_Enable_IRQ+0x104>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d028      	beq.n	80049ac <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800495a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800495e:	2b00      	cmp	r3, #0
 8004960:	da03      	bge.n	800496a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004968:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800496a:	887b      	ldrh	r3, [r7, #2]
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b00      	cmp	r3, #0
 8004972:	d003      	beq.n	800497c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800497a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800497c:	887b      	ldrh	r3, [r7, #2]
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800498c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800498e:	887b      	ldrh	r3, [r7, #2]
 8004990:	2b10      	cmp	r3, #16
 8004992:	d103      	bne.n	800499c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800499a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800499c:	887b      	ldrh	r3, [r7, #2]
 800499e:	2b20      	cmp	r3, #32
 80049a0:	d133      	bne.n	8004a0a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f043 0320 	orr.w	r3, r3, #32
 80049a8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80049aa:	e02e      	b.n	8004a0a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80049ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	da03      	bge.n	80049bc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80049ba:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80049bc:	887b      	ldrh	r3, [r7, #2]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80049cc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80049ce:	887b      	ldrh	r3, [r7, #2]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80049de:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80049e0:	887b      	ldrh	r3, [r7, #2]
 80049e2:	2b10      	cmp	r3, #16
 80049e4:	d103      	bne.n	80049ee <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80049ec:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80049ee:	887b      	ldrh	r3, [r7, #2]
 80049f0:	2b20      	cmp	r3, #32
 80049f2:	d103      	bne.n	80049fc <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80049fa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80049fc:	887b      	ldrh	r3, [r7, #2]
 80049fe:	2b40      	cmp	r3, #64	; 0x40
 8004a00:	d103      	bne.n	8004a0a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a08:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6819      	ldr	r1, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	601a      	str	r2, [r3, #0]
}
 8004a1a:	bf00      	nop
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	0800353b 	.word	0x0800353b
 8004a2c:	0800395d 	.word	0x0800395d
 8004a30:	08003711 	.word	0x08003711

08004a34 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004a44:	887b      	ldrh	r3, [r7, #2]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00f      	beq.n	8004a6e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004a54:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a62:	2b28      	cmp	r3, #40	; 0x28
 8004a64:	d003      	beq.n	8004a6e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004a6c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004a6e:	887b      	ldrh	r3, [r7, #2]
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00f      	beq.n	8004a98 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004a7e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a8c:	2b28      	cmp	r3, #40	; 0x28
 8004a8e:	d003      	beq.n	8004a98 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004a96:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004a98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	da03      	bge.n	8004aa8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004aa6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004aa8:	887b      	ldrh	r3, [r7, #2]
 8004aaa:	2b10      	cmp	r3, #16
 8004aac:	d103      	bne.n	8004ab6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004ab4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004ab6:	887b      	ldrh	r3, [r7, #2]
 8004ab8:	2b20      	cmp	r3, #32
 8004aba:	d103      	bne.n	8004ac4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f043 0320 	orr.w	r3, r3, #32
 8004ac2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004ac4:	887b      	ldrh	r3, [r7, #2]
 8004ac6:	2b40      	cmp	r3, #64	; 0x40
 8004ac8:	d103      	bne.n	8004ad2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ad0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6819      	ldr	r1, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	43da      	mvns	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	400a      	ands	r2, r1
 8004ae2:	601a      	str	r2, [r3, #0]
}
 8004ae4:	bf00      	nop
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b20      	cmp	r3, #32
 8004b04:	d138      	bne.n	8004b78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d101      	bne.n	8004b14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004b10:	2302      	movs	r3, #2
 8004b12:	e032      	b.n	8004b7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2224      	movs	r2, #36	; 0x24
 8004b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 0201 	bic.w	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6819      	ldr	r1, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0201 	orr.w	r2, r2, #1
 8004b62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	e000      	b.n	8004b7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b78:	2302      	movs	r3, #2
  }
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b085      	sub	sp, #20
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
 8004b8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b20      	cmp	r3, #32
 8004b9a:	d139      	bne.n	8004c10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d101      	bne.n	8004baa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	e033      	b.n	8004c12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2224      	movs	r2, #36	; 0x24
 8004bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0201 	bic.w	r2, r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004bd8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	021b      	lsls	r3, r3, #8
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0201 	orr.w	r2, r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	e000      	b.n	8004c12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004c10:	2302      	movs	r3, #2
  }
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
	...

08004c20 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c24:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a04      	ldr	r2, [pc, #16]	; (8004c3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c2e:	6013      	str	r3, [r2, #0]
}
 8004c30:	bf00      	nop
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40007000 	.word	0x40007000

08004c40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004c44:	4b04      	ldr	r3, [pc, #16]	; (8004c58 <HAL_PWREx_GetVoltageRange+0x18>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	40007000 	.word	0x40007000

08004c5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c6a:	d130      	bne.n	8004cce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c6c:	4b23      	ldr	r3, [pc, #140]	; (8004cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c78:	d038      	beq.n	8004cec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c7a:	4b20      	ldr	r3, [pc, #128]	; (8004cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c82:	4a1e      	ldr	r2, [pc, #120]	; (8004cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c88:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c8a:	4b1d      	ldr	r3, [pc, #116]	; (8004d00 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2232      	movs	r2, #50	; 0x32
 8004c90:	fb02 f303 	mul.w	r3, r2, r3
 8004c94:	4a1b      	ldr	r2, [pc, #108]	; (8004d04 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004c96:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9a:	0c9b      	lsrs	r3, r3, #18
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ca0:	e002      	b.n	8004ca8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ca8:	4b14      	ldr	r3, [pc, #80]	; (8004cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb4:	d102      	bne.n	8004cbc <HAL_PWREx_ControlVoltageScaling+0x60>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1f2      	bne.n	8004ca2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cbc:	4b0f      	ldr	r3, [pc, #60]	; (8004cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cc8:	d110      	bne.n	8004cec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e00f      	b.n	8004cee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004cce:	4b0b      	ldr	r3, [pc, #44]	; (8004cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cda:	d007      	beq.n	8004cec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004cdc:	4b07      	ldr	r3, [pc, #28]	; (8004cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ce4:	4a05      	ldr	r2, [pc, #20]	; (8004cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ce6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	40007000 	.word	0x40007000
 8004d00:	20000000 	.word	0x20000000
 8004d04:	431bde83 	.word	0x431bde83

08004d08 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b088      	sub	sp, #32
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d102      	bne.n	8004d1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	f000 bc02 	b.w	8005520 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d1c:	4b96      	ldr	r3, [pc, #600]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f003 030c 	and.w	r3, r3, #12
 8004d24:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d26:	4b94      	ldr	r3, [pc, #592]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f003 0303 	and.w	r3, r3, #3
 8004d2e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0310 	and.w	r3, r3, #16
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 80e4 	beq.w	8004f06 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d007      	beq.n	8004d54 <HAL_RCC_OscConfig+0x4c>
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	2b0c      	cmp	r3, #12
 8004d48:	f040 808b 	bne.w	8004e62 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	f040 8087 	bne.w	8004e62 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d54:	4b88      	ldr	r3, [pc, #544]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d005      	beq.n	8004d6c <HAL_RCC_OscConfig+0x64>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e3d9      	b.n	8005520 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a1a      	ldr	r2, [r3, #32]
 8004d70:	4b81      	ldr	r3, [pc, #516]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0308 	and.w	r3, r3, #8
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d004      	beq.n	8004d86 <HAL_RCC_OscConfig+0x7e>
 8004d7c:	4b7e      	ldr	r3, [pc, #504]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d84:	e005      	b.n	8004d92 <HAL_RCC_OscConfig+0x8a>
 8004d86:	4b7c      	ldr	r3, [pc, #496]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d8c:	091b      	lsrs	r3, r3, #4
 8004d8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d223      	bcs.n	8004dde <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fd8c 	bl	80058b8 <RCC_SetFlashLatencyFromMSIRange>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e3ba      	b.n	8005520 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004daa:	4b73      	ldr	r3, [pc, #460]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a72      	ldr	r2, [pc, #456]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004db0:	f043 0308 	orr.w	r3, r3, #8
 8004db4:	6013      	str	r3, [r2, #0]
 8004db6:	4b70      	ldr	r3, [pc, #448]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	496d      	ldr	r1, [pc, #436]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dc8:	4b6b      	ldr	r3, [pc, #428]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	69db      	ldr	r3, [r3, #28]
 8004dd4:	021b      	lsls	r3, r3, #8
 8004dd6:	4968      	ldr	r1, [pc, #416]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	604b      	str	r3, [r1, #4]
 8004ddc:	e025      	b.n	8004e2a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004dde:	4b66      	ldr	r3, [pc, #408]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a65      	ldr	r2, [pc, #404]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004de4:	f043 0308 	orr.w	r3, r3, #8
 8004de8:	6013      	str	r3, [r2, #0]
 8004dea:	4b63      	ldr	r3, [pc, #396]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	4960      	ldr	r1, [pc, #384]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dfc:	4b5e      	ldr	r3, [pc, #376]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	021b      	lsls	r3, r3, #8
 8004e0a:	495b      	ldr	r1, [pc, #364]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d109      	bne.n	8004e2a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 fd4c 	bl	80058b8 <RCC_SetFlashLatencyFromMSIRange>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e37a      	b.n	8005520 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e2a:	f000 fc81 	bl	8005730 <HAL_RCC_GetSysClockFreq>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	4b51      	ldr	r3, [pc, #324]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	091b      	lsrs	r3, r3, #4
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	4950      	ldr	r1, [pc, #320]	; (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004e3c:	5ccb      	ldrb	r3, [r1, r3]
 8004e3e:	f003 031f 	and.w	r3, r3, #31
 8004e42:	fa22 f303 	lsr.w	r3, r2, r3
 8004e46:	4a4e      	ldr	r2, [pc, #312]	; (8004f80 <HAL_RCC_OscConfig+0x278>)
 8004e48:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004e4a:	4b4e      	ldr	r3, [pc, #312]	; (8004f84 <HAL_RCC_OscConfig+0x27c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fd fa38 	bl	80022c4 <HAL_InitTick>
 8004e54:	4603      	mov	r3, r0
 8004e56:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d052      	beq.n	8004f04 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
 8004e60:	e35e      	b.n	8005520 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d032      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004e6a:	4b43      	ldr	r3, [pc, #268]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a42      	ldr	r2, [pc, #264]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004e70:	f043 0301 	orr.w	r3, r3, #1
 8004e74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e76:	f7fd fa75 	bl	8002364 <HAL_GetTick>
 8004e7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e7c:	e008      	b.n	8004e90 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e7e:	f7fd fa71 	bl	8002364 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e347      	b.n	8005520 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e90:	4b39      	ldr	r3, [pc, #228]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0f0      	beq.n	8004e7e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e9c:	4b36      	ldr	r3, [pc, #216]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a35      	ldr	r2, [pc, #212]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004ea2:	f043 0308 	orr.w	r3, r3, #8
 8004ea6:	6013      	str	r3, [r2, #0]
 8004ea8:	4b33      	ldr	r3, [pc, #204]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	4930      	ldr	r1, [pc, #192]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004eba:	4b2f      	ldr	r3, [pc, #188]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	021b      	lsls	r3, r3, #8
 8004ec8:	492b      	ldr	r1, [pc, #172]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	604b      	str	r3, [r1, #4]
 8004ece:	e01a      	b.n	8004f06 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004ed0:	4b29      	ldr	r3, [pc, #164]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a28      	ldr	r2, [pc, #160]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004ed6:	f023 0301 	bic.w	r3, r3, #1
 8004eda:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004edc:	f7fd fa42 	bl	8002364 <HAL_GetTick>
 8004ee0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ee2:	e008      	b.n	8004ef6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ee4:	f7fd fa3e 	bl	8002364 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e314      	b.n	8005520 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ef6:	4b20      	ldr	r3, [pc, #128]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1f0      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x1dc>
 8004f02:	e000      	b.n	8004f06 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f04:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d073      	beq.n	8004ffa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	d005      	beq.n	8004f24 <HAL_RCC_OscConfig+0x21c>
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	2b0c      	cmp	r3, #12
 8004f1c:	d10e      	bne.n	8004f3c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	2b03      	cmp	r3, #3
 8004f22:	d10b      	bne.n	8004f3c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f24:	4b14      	ldr	r3, [pc, #80]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d063      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x2f0>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d15f      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e2f1      	b.n	8005520 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f44:	d106      	bne.n	8004f54 <HAL_RCC_OscConfig+0x24c>
 8004f46:	4b0c      	ldr	r3, [pc, #48]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a0b      	ldr	r2, [pc, #44]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f50:	6013      	str	r3, [r2, #0]
 8004f52:	e025      	b.n	8004fa0 <HAL_RCC_OscConfig+0x298>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f5c:	d114      	bne.n	8004f88 <HAL_RCC_OscConfig+0x280>
 8004f5e:	4b06      	ldr	r3, [pc, #24]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a05      	ldr	r2, [pc, #20]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f68:	6013      	str	r3, [r2, #0]
 8004f6a:	4b03      	ldr	r3, [pc, #12]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a02      	ldr	r2, [pc, #8]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f74:	6013      	str	r3, [r2, #0]
 8004f76:	e013      	b.n	8004fa0 <HAL_RCC_OscConfig+0x298>
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	0800a674 	.word	0x0800a674
 8004f80:	20000000 	.word	0x20000000
 8004f84:	20000004 	.word	0x20000004
 8004f88:	4ba0      	ldr	r3, [pc, #640]	; (800520c <HAL_RCC_OscConfig+0x504>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a9f      	ldr	r2, [pc, #636]	; (800520c <HAL_RCC_OscConfig+0x504>)
 8004f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f92:	6013      	str	r3, [r2, #0]
 8004f94:	4b9d      	ldr	r3, [pc, #628]	; (800520c <HAL_RCC_OscConfig+0x504>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a9c      	ldr	r2, [pc, #624]	; (800520c <HAL_RCC_OscConfig+0x504>)
 8004f9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d013      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa8:	f7fd f9dc 	bl	8002364 <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fb0:	f7fd f9d8 	bl	8002364 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b64      	cmp	r3, #100	; 0x64
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e2ae      	b.n	8005520 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fc2:	4b92      	ldr	r3, [pc, #584]	; (800520c <HAL_RCC_OscConfig+0x504>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d0f0      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x2a8>
 8004fce:	e014      	b.n	8004ffa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd0:	f7fd f9c8 	bl	8002364 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fd8:	f7fd f9c4 	bl	8002364 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b64      	cmp	r3, #100	; 0x64
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e29a      	b.n	8005520 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fea:	4b88      	ldr	r3, [pc, #544]	; (800520c <HAL_RCC_OscConfig+0x504>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1f0      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x2d0>
 8004ff6:	e000      	b.n	8004ffa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d060      	beq.n	80050c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	2b04      	cmp	r3, #4
 800500a:	d005      	beq.n	8005018 <HAL_RCC_OscConfig+0x310>
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	2b0c      	cmp	r3, #12
 8005010:	d119      	bne.n	8005046 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2b02      	cmp	r3, #2
 8005016:	d116      	bne.n	8005046 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005018:	4b7c      	ldr	r3, [pc, #496]	; (800520c <HAL_RCC_OscConfig+0x504>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005020:	2b00      	cmp	r3, #0
 8005022:	d005      	beq.n	8005030 <HAL_RCC_OscConfig+0x328>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e277      	b.n	8005520 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005030:	4b76      	ldr	r3, [pc, #472]	; (800520c <HAL_RCC_OscConfig+0x504>)
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	061b      	lsls	r3, r3, #24
 800503e:	4973      	ldr	r1, [pc, #460]	; (800520c <HAL_RCC_OscConfig+0x504>)
 8005040:	4313      	orrs	r3, r2
 8005042:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005044:	e040      	b.n	80050c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d023      	beq.n	8005096 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800504e:	4b6f      	ldr	r3, [pc, #444]	; (800520c <HAL_RCC_OscConfig+0x504>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a6e      	ldr	r2, [pc, #440]	; (800520c <HAL_RCC_OscConfig+0x504>)
 8005054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005058:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505a:	f7fd f983 	bl	8002364 <HAL_GetTick>
 800505e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005060:	e008      	b.n	8005074 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005062:	f7fd f97f 	bl	8002364 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	2b02      	cmp	r3, #2
 800506e:	d901      	bls.n	8005074 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e255      	b.n	8005520 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005074:	4b65      	ldr	r3, [pc, #404]	; (800520c <HAL_RCC_OscConfig+0x504>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800507c:	2b00      	cmp	r3, #0
 800507e:	d0f0      	beq.n	8005062 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005080:	4b62      	ldr	r3, [pc, #392]	; (800520c <HAL_RCC_OscConfig+0x504>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	061b      	lsls	r3, r3, #24
 800508e:	495f      	ldr	r1, [pc, #380]	; (800520c <HAL_RCC_OscConfig+0x504>)
 8005090:	4313      	orrs	r3, r2
 8005092:	604b      	str	r3, [r1, #4]
 8005094:	e018      	b.n	80050c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005096:	4b5d      	ldr	r3, [pc, #372]	; (800520c <HAL_RCC_OscConfig+0x504>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a5c      	ldr	r2, [pc, #368]	; (800520c <HAL_RCC_OscConfig+0x504>)
 800509c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a2:	f7fd f95f 	bl	8002364 <HAL_GetTick>
 80050a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050a8:	e008      	b.n	80050bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050aa:	f7fd f95b 	bl	8002364 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e231      	b.n	8005520 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050bc:	4b53      	ldr	r3, [pc, #332]	; (800520c <HAL_RCC_OscConfig+0x504>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1f0      	bne.n	80050aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0308 	and.w	r3, r3, #8
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d03c      	beq.n	800514e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d01c      	beq.n	8005116 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050dc:	4b4b      	ldr	r3, [pc, #300]	; (800520c <HAL_RCC_OscConfig+0x504>)
 80050de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050e2:	4a4a      	ldr	r2, [pc, #296]	; (800520c <HAL_RCC_OscConfig+0x504>)
 80050e4:	f043 0301 	orr.w	r3, r3, #1
 80050e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ec:	f7fd f93a 	bl	8002364 <HAL_GetTick>
 80050f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050f4:	f7fd f936 	bl	8002364 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e20c      	b.n	8005520 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005106:	4b41      	ldr	r3, [pc, #260]	; (800520c <HAL_RCC_OscConfig+0x504>)
 8005108:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0ef      	beq.n	80050f4 <HAL_RCC_OscConfig+0x3ec>
 8005114:	e01b      	b.n	800514e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005116:	4b3d      	ldr	r3, [pc, #244]	; (800520c <HAL_RCC_OscConfig+0x504>)
 8005118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800511c:	4a3b      	ldr	r2, [pc, #236]	; (800520c <HAL_RCC_OscConfig+0x504>)
 800511e:	f023 0301 	bic.w	r3, r3, #1
 8005122:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005126:	f7fd f91d 	bl	8002364 <HAL_GetTick>
 800512a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800512c:	e008      	b.n	8005140 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800512e:	f7fd f919 	bl	8002364 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	2b02      	cmp	r3, #2
 800513a:	d901      	bls.n	8005140 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e1ef      	b.n	8005520 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005140:	4b32      	ldr	r3, [pc, #200]	; (800520c <HAL_RCC_OscConfig+0x504>)
 8005142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1ef      	bne.n	800512e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0304 	and.w	r3, r3, #4
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 80a6 	beq.w	80052a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800515c:	2300      	movs	r3, #0
 800515e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005160:	4b2a      	ldr	r3, [pc, #168]	; (800520c <HAL_RCC_OscConfig+0x504>)
 8005162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10d      	bne.n	8005188 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800516c:	4b27      	ldr	r3, [pc, #156]	; (800520c <HAL_RCC_OscConfig+0x504>)
 800516e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005170:	4a26      	ldr	r2, [pc, #152]	; (800520c <HAL_RCC_OscConfig+0x504>)
 8005172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005176:	6593      	str	r3, [r2, #88]	; 0x58
 8005178:	4b24      	ldr	r3, [pc, #144]	; (800520c <HAL_RCC_OscConfig+0x504>)
 800517a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005180:	60bb      	str	r3, [r7, #8]
 8005182:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005184:	2301      	movs	r3, #1
 8005186:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005188:	4b21      	ldr	r3, [pc, #132]	; (8005210 <HAL_RCC_OscConfig+0x508>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005190:	2b00      	cmp	r3, #0
 8005192:	d118      	bne.n	80051c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005194:	4b1e      	ldr	r3, [pc, #120]	; (8005210 <HAL_RCC_OscConfig+0x508>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a1d      	ldr	r2, [pc, #116]	; (8005210 <HAL_RCC_OscConfig+0x508>)
 800519a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800519e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051a0:	f7fd f8e0 	bl	8002364 <HAL_GetTick>
 80051a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051a6:	e008      	b.n	80051ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051a8:	f7fd f8dc 	bl	8002364 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e1b2      	b.n	8005520 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051ba:	4b15      	ldr	r3, [pc, #84]	; (8005210 <HAL_RCC_OscConfig+0x508>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d0f0      	beq.n	80051a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d108      	bne.n	80051e0 <HAL_RCC_OscConfig+0x4d8>
 80051ce:	4b0f      	ldr	r3, [pc, #60]	; (800520c <HAL_RCC_OscConfig+0x504>)
 80051d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d4:	4a0d      	ldr	r2, [pc, #52]	; (800520c <HAL_RCC_OscConfig+0x504>)
 80051d6:	f043 0301 	orr.w	r3, r3, #1
 80051da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80051de:	e029      	b.n	8005234 <HAL_RCC_OscConfig+0x52c>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	2b05      	cmp	r3, #5
 80051e6:	d115      	bne.n	8005214 <HAL_RCC_OscConfig+0x50c>
 80051e8:	4b08      	ldr	r3, [pc, #32]	; (800520c <HAL_RCC_OscConfig+0x504>)
 80051ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ee:	4a07      	ldr	r2, [pc, #28]	; (800520c <HAL_RCC_OscConfig+0x504>)
 80051f0:	f043 0304 	orr.w	r3, r3, #4
 80051f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80051f8:	4b04      	ldr	r3, [pc, #16]	; (800520c <HAL_RCC_OscConfig+0x504>)
 80051fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051fe:	4a03      	ldr	r2, [pc, #12]	; (800520c <HAL_RCC_OscConfig+0x504>)
 8005200:	f043 0301 	orr.w	r3, r3, #1
 8005204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005208:	e014      	b.n	8005234 <HAL_RCC_OscConfig+0x52c>
 800520a:	bf00      	nop
 800520c:	40021000 	.word	0x40021000
 8005210:	40007000 	.word	0x40007000
 8005214:	4b9a      	ldr	r3, [pc, #616]	; (8005480 <HAL_RCC_OscConfig+0x778>)
 8005216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521a:	4a99      	ldr	r2, [pc, #612]	; (8005480 <HAL_RCC_OscConfig+0x778>)
 800521c:	f023 0301 	bic.w	r3, r3, #1
 8005220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005224:	4b96      	ldr	r3, [pc, #600]	; (8005480 <HAL_RCC_OscConfig+0x778>)
 8005226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522a:	4a95      	ldr	r2, [pc, #596]	; (8005480 <HAL_RCC_OscConfig+0x778>)
 800522c:	f023 0304 	bic.w	r3, r3, #4
 8005230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d016      	beq.n	800526a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800523c:	f7fd f892 	bl	8002364 <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005242:	e00a      	b.n	800525a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005244:	f7fd f88e 	bl	8002364 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005252:	4293      	cmp	r3, r2
 8005254:	d901      	bls.n	800525a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e162      	b.n	8005520 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800525a:	4b89      	ldr	r3, [pc, #548]	; (8005480 <HAL_RCC_OscConfig+0x778>)
 800525c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0ed      	beq.n	8005244 <HAL_RCC_OscConfig+0x53c>
 8005268:	e015      	b.n	8005296 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800526a:	f7fd f87b 	bl	8002364 <HAL_GetTick>
 800526e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005270:	e00a      	b.n	8005288 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005272:	f7fd f877 	bl	8002364 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005280:	4293      	cmp	r3, r2
 8005282:	d901      	bls.n	8005288 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e14b      	b.n	8005520 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005288:	4b7d      	ldr	r3, [pc, #500]	; (8005480 <HAL_RCC_OscConfig+0x778>)
 800528a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1ed      	bne.n	8005272 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005296:	7ffb      	ldrb	r3, [r7, #31]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d105      	bne.n	80052a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800529c:	4b78      	ldr	r3, [pc, #480]	; (8005480 <HAL_RCC_OscConfig+0x778>)
 800529e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a0:	4a77      	ldr	r2, [pc, #476]	; (8005480 <HAL_RCC_OscConfig+0x778>)
 80052a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0320 	and.w	r3, r3, #32
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d03c      	beq.n	800532e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d01c      	beq.n	80052f6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052bc:	4b70      	ldr	r3, [pc, #448]	; (8005480 <HAL_RCC_OscConfig+0x778>)
 80052be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052c2:	4a6f      	ldr	r2, [pc, #444]	; (8005480 <HAL_RCC_OscConfig+0x778>)
 80052c4:	f043 0301 	orr.w	r3, r3, #1
 80052c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052cc:	f7fd f84a 	bl	8002364 <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052d4:	f7fd f846 	bl	8002364 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e11c      	b.n	8005520 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80052e6:	4b66      	ldr	r3, [pc, #408]	; (8005480 <HAL_RCC_OscConfig+0x778>)
 80052e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d0ef      	beq.n	80052d4 <HAL_RCC_OscConfig+0x5cc>
 80052f4:	e01b      	b.n	800532e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80052f6:	4b62      	ldr	r3, [pc, #392]	; (8005480 <HAL_RCC_OscConfig+0x778>)
 80052f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052fc:	4a60      	ldr	r2, [pc, #384]	; (8005480 <HAL_RCC_OscConfig+0x778>)
 80052fe:	f023 0301 	bic.w	r3, r3, #1
 8005302:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005306:	f7fd f82d 	bl	8002364 <HAL_GetTick>
 800530a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800530c:	e008      	b.n	8005320 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800530e:	f7fd f829 	bl	8002364 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b02      	cmp	r3, #2
 800531a:	d901      	bls.n	8005320 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e0ff      	b.n	8005520 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005320:	4b57      	ldr	r3, [pc, #348]	; (8005480 <HAL_RCC_OscConfig+0x778>)
 8005322:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1ef      	bne.n	800530e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005332:	2b00      	cmp	r3, #0
 8005334:	f000 80f3 	beq.w	800551e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533c:	2b02      	cmp	r3, #2
 800533e:	f040 80c9 	bne.w	80054d4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005342:	4b4f      	ldr	r3, [pc, #316]	; (8005480 <HAL_RCC_OscConfig+0x778>)
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f003 0203 	and.w	r2, r3, #3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005352:	429a      	cmp	r2, r3
 8005354:	d12c      	bne.n	80053b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005360:	3b01      	subs	r3, #1
 8005362:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005364:	429a      	cmp	r2, r3
 8005366:	d123      	bne.n	80053b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005372:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005374:	429a      	cmp	r2, r3
 8005376:	d11b      	bne.n	80053b0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005382:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005384:	429a      	cmp	r2, r3
 8005386:	d113      	bne.n	80053b0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005392:	085b      	lsrs	r3, r3, #1
 8005394:	3b01      	subs	r3, #1
 8005396:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005398:	429a      	cmp	r2, r3
 800539a:	d109      	bne.n	80053b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	085b      	lsrs	r3, r3, #1
 80053a8:	3b01      	subs	r3, #1
 80053aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d06b      	beq.n	8005488 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	2b0c      	cmp	r3, #12
 80053b4:	d062      	beq.n	800547c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80053b6:	4b32      	ldr	r3, [pc, #200]	; (8005480 <HAL_RCC_OscConfig+0x778>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e0ac      	b.n	8005520 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80053c6:	4b2e      	ldr	r3, [pc, #184]	; (8005480 <HAL_RCC_OscConfig+0x778>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a2d      	ldr	r2, [pc, #180]	; (8005480 <HAL_RCC_OscConfig+0x778>)
 80053cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053d0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80053d2:	f7fc ffc7 	bl	8002364 <HAL_GetTick>
 80053d6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053d8:	e008      	b.n	80053ec <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053da:	f7fc ffc3 	bl	8002364 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d901      	bls.n	80053ec <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e099      	b.n	8005520 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053ec:	4b24      	ldr	r3, [pc, #144]	; (8005480 <HAL_RCC_OscConfig+0x778>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1f0      	bne.n	80053da <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053f8:	4b21      	ldr	r3, [pc, #132]	; (8005480 <HAL_RCC_OscConfig+0x778>)
 80053fa:	68da      	ldr	r2, [r3, #12]
 80053fc:	4b21      	ldr	r3, [pc, #132]	; (8005484 <HAL_RCC_OscConfig+0x77c>)
 80053fe:	4013      	ands	r3, r2
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005408:	3a01      	subs	r2, #1
 800540a:	0112      	lsls	r2, r2, #4
 800540c:	4311      	orrs	r1, r2
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005412:	0212      	lsls	r2, r2, #8
 8005414:	4311      	orrs	r1, r2
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800541a:	0852      	lsrs	r2, r2, #1
 800541c:	3a01      	subs	r2, #1
 800541e:	0552      	lsls	r2, r2, #21
 8005420:	4311      	orrs	r1, r2
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005426:	0852      	lsrs	r2, r2, #1
 8005428:	3a01      	subs	r2, #1
 800542a:	0652      	lsls	r2, r2, #25
 800542c:	4311      	orrs	r1, r2
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005432:	06d2      	lsls	r2, r2, #27
 8005434:	430a      	orrs	r2, r1
 8005436:	4912      	ldr	r1, [pc, #72]	; (8005480 <HAL_RCC_OscConfig+0x778>)
 8005438:	4313      	orrs	r3, r2
 800543a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800543c:	4b10      	ldr	r3, [pc, #64]	; (8005480 <HAL_RCC_OscConfig+0x778>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a0f      	ldr	r2, [pc, #60]	; (8005480 <HAL_RCC_OscConfig+0x778>)
 8005442:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005446:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005448:	4b0d      	ldr	r3, [pc, #52]	; (8005480 <HAL_RCC_OscConfig+0x778>)
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	4a0c      	ldr	r2, [pc, #48]	; (8005480 <HAL_RCC_OscConfig+0x778>)
 800544e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005452:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005454:	f7fc ff86 	bl	8002364 <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800545c:	f7fc ff82 	bl	8002364 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e058      	b.n	8005520 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800546e:	4b04      	ldr	r3, [pc, #16]	; (8005480 <HAL_RCC_OscConfig+0x778>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d0f0      	beq.n	800545c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800547a:	e050      	b.n	800551e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e04f      	b.n	8005520 <HAL_RCC_OscConfig+0x818>
 8005480:	40021000 	.word	0x40021000
 8005484:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005488:	4b27      	ldr	r3, [pc, #156]	; (8005528 <HAL_RCC_OscConfig+0x820>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d144      	bne.n	800551e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005494:	4b24      	ldr	r3, [pc, #144]	; (8005528 <HAL_RCC_OscConfig+0x820>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a23      	ldr	r2, [pc, #140]	; (8005528 <HAL_RCC_OscConfig+0x820>)
 800549a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800549e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054a0:	4b21      	ldr	r3, [pc, #132]	; (8005528 <HAL_RCC_OscConfig+0x820>)
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	4a20      	ldr	r2, [pc, #128]	; (8005528 <HAL_RCC_OscConfig+0x820>)
 80054a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054ac:	f7fc ff5a 	bl	8002364 <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054b2:	e008      	b.n	80054c6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054b4:	f7fc ff56 	bl	8002364 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e02c      	b.n	8005520 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054c6:	4b18      	ldr	r3, [pc, #96]	; (8005528 <HAL_RCC_OscConfig+0x820>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0f0      	beq.n	80054b4 <HAL_RCC_OscConfig+0x7ac>
 80054d2:	e024      	b.n	800551e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	2b0c      	cmp	r3, #12
 80054d8:	d01f      	beq.n	800551a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054da:	4b13      	ldr	r3, [pc, #76]	; (8005528 <HAL_RCC_OscConfig+0x820>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a12      	ldr	r2, [pc, #72]	; (8005528 <HAL_RCC_OscConfig+0x820>)
 80054e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e6:	f7fc ff3d 	bl	8002364 <HAL_GetTick>
 80054ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054ec:	e008      	b.n	8005500 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ee:	f7fc ff39 	bl	8002364 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d901      	bls.n	8005500 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e00f      	b.n	8005520 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005500:	4b09      	ldr	r3, [pc, #36]	; (8005528 <HAL_RCC_OscConfig+0x820>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1f0      	bne.n	80054ee <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800550c:	4b06      	ldr	r3, [pc, #24]	; (8005528 <HAL_RCC_OscConfig+0x820>)
 800550e:	68da      	ldr	r2, [r3, #12]
 8005510:	4905      	ldr	r1, [pc, #20]	; (8005528 <HAL_RCC_OscConfig+0x820>)
 8005512:	4b06      	ldr	r3, [pc, #24]	; (800552c <HAL_RCC_OscConfig+0x824>)
 8005514:	4013      	ands	r3, r2
 8005516:	60cb      	str	r3, [r1, #12]
 8005518:	e001      	b.n	800551e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e000      	b.n	8005520 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3720      	adds	r7, #32
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	40021000 	.word	0x40021000
 800552c:	feeefffc 	.word	0xfeeefffc

08005530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e0e7      	b.n	8005714 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005544:	4b75      	ldr	r3, [pc, #468]	; (800571c <HAL_RCC_ClockConfig+0x1ec>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0307 	and.w	r3, r3, #7
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	429a      	cmp	r2, r3
 8005550:	d910      	bls.n	8005574 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005552:	4b72      	ldr	r3, [pc, #456]	; (800571c <HAL_RCC_ClockConfig+0x1ec>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f023 0207 	bic.w	r2, r3, #7
 800555a:	4970      	ldr	r1, [pc, #448]	; (800571c <HAL_RCC_ClockConfig+0x1ec>)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	4313      	orrs	r3, r2
 8005560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005562:	4b6e      	ldr	r3, [pc, #440]	; (800571c <HAL_RCC_ClockConfig+0x1ec>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0307 	and.w	r3, r3, #7
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	429a      	cmp	r2, r3
 800556e:	d001      	beq.n	8005574 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e0cf      	b.n	8005714 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d010      	beq.n	80055a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689a      	ldr	r2, [r3, #8]
 8005584:	4b66      	ldr	r3, [pc, #408]	; (8005720 <HAL_RCC_ClockConfig+0x1f0>)
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800558c:	429a      	cmp	r2, r3
 800558e:	d908      	bls.n	80055a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005590:	4b63      	ldr	r3, [pc, #396]	; (8005720 <HAL_RCC_ClockConfig+0x1f0>)
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	4960      	ldr	r1, [pc, #384]	; (8005720 <HAL_RCC_ClockConfig+0x1f0>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d04c      	beq.n	8005648 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	2b03      	cmp	r3, #3
 80055b4:	d107      	bne.n	80055c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055b6:	4b5a      	ldr	r3, [pc, #360]	; (8005720 <HAL_RCC_ClockConfig+0x1f0>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d121      	bne.n	8005606 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e0a6      	b.n	8005714 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d107      	bne.n	80055de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055ce:	4b54      	ldr	r3, [pc, #336]	; (8005720 <HAL_RCC_ClockConfig+0x1f0>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d115      	bne.n	8005606 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e09a      	b.n	8005714 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d107      	bne.n	80055f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055e6:	4b4e      	ldr	r3, [pc, #312]	; (8005720 <HAL_RCC_ClockConfig+0x1f0>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d109      	bne.n	8005606 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e08e      	b.n	8005714 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055f6:	4b4a      	ldr	r3, [pc, #296]	; (8005720 <HAL_RCC_ClockConfig+0x1f0>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e086      	b.n	8005714 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005606:	4b46      	ldr	r3, [pc, #280]	; (8005720 <HAL_RCC_ClockConfig+0x1f0>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f023 0203 	bic.w	r2, r3, #3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	4943      	ldr	r1, [pc, #268]	; (8005720 <HAL_RCC_ClockConfig+0x1f0>)
 8005614:	4313      	orrs	r3, r2
 8005616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005618:	f7fc fea4 	bl	8002364 <HAL_GetTick>
 800561c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800561e:	e00a      	b.n	8005636 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005620:	f7fc fea0 	bl	8002364 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	f241 3288 	movw	r2, #5000	; 0x1388
 800562e:	4293      	cmp	r3, r2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e06e      	b.n	8005714 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005636:	4b3a      	ldr	r3, [pc, #232]	; (8005720 <HAL_RCC_ClockConfig+0x1f0>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 020c 	and.w	r2, r3, #12
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	429a      	cmp	r2, r3
 8005646:	d1eb      	bne.n	8005620 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d010      	beq.n	8005676 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	4b31      	ldr	r3, [pc, #196]	; (8005720 <HAL_RCC_ClockConfig+0x1f0>)
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005660:	429a      	cmp	r2, r3
 8005662:	d208      	bcs.n	8005676 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005664:	4b2e      	ldr	r3, [pc, #184]	; (8005720 <HAL_RCC_ClockConfig+0x1f0>)
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	492b      	ldr	r1, [pc, #172]	; (8005720 <HAL_RCC_ClockConfig+0x1f0>)
 8005672:	4313      	orrs	r3, r2
 8005674:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005676:	4b29      	ldr	r3, [pc, #164]	; (800571c <HAL_RCC_ClockConfig+0x1ec>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0307 	and.w	r3, r3, #7
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	429a      	cmp	r2, r3
 8005682:	d210      	bcs.n	80056a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005684:	4b25      	ldr	r3, [pc, #148]	; (800571c <HAL_RCC_ClockConfig+0x1ec>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f023 0207 	bic.w	r2, r3, #7
 800568c:	4923      	ldr	r1, [pc, #140]	; (800571c <HAL_RCC_ClockConfig+0x1ec>)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	4313      	orrs	r3, r2
 8005692:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005694:	4b21      	ldr	r3, [pc, #132]	; (800571c <HAL_RCC_ClockConfig+0x1ec>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d001      	beq.n	80056a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e036      	b.n	8005714 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0304 	and.w	r3, r3, #4
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d008      	beq.n	80056c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056b2:	4b1b      	ldr	r3, [pc, #108]	; (8005720 <HAL_RCC_ClockConfig+0x1f0>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	4918      	ldr	r1, [pc, #96]	; (8005720 <HAL_RCC_ClockConfig+0x1f0>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0308 	and.w	r3, r3, #8
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d009      	beq.n	80056e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056d0:	4b13      	ldr	r3, [pc, #76]	; (8005720 <HAL_RCC_ClockConfig+0x1f0>)
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	00db      	lsls	r3, r3, #3
 80056de:	4910      	ldr	r1, [pc, #64]	; (8005720 <HAL_RCC_ClockConfig+0x1f0>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056e4:	f000 f824 	bl	8005730 <HAL_RCC_GetSysClockFreq>
 80056e8:	4602      	mov	r2, r0
 80056ea:	4b0d      	ldr	r3, [pc, #52]	; (8005720 <HAL_RCC_ClockConfig+0x1f0>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	091b      	lsrs	r3, r3, #4
 80056f0:	f003 030f 	and.w	r3, r3, #15
 80056f4:	490b      	ldr	r1, [pc, #44]	; (8005724 <HAL_RCC_ClockConfig+0x1f4>)
 80056f6:	5ccb      	ldrb	r3, [r1, r3]
 80056f8:	f003 031f 	and.w	r3, r3, #31
 80056fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005700:	4a09      	ldr	r2, [pc, #36]	; (8005728 <HAL_RCC_ClockConfig+0x1f8>)
 8005702:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005704:	4b09      	ldr	r3, [pc, #36]	; (800572c <HAL_RCC_ClockConfig+0x1fc>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4618      	mov	r0, r3
 800570a:	f7fc fddb 	bl	80022c4 <HAL_InitTick>
 800570e:	4603      	mov	r3, r0
 8005710:	72fb      	strb	r3, [r7, #11]

  return status;
 8005712:	7afb      	ldrb	r3, [r7, #11]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	40022000 	.word	0x40022000
 8005720:	40021000 	.word	0x40021000
 8005724:	0800a674 	.word	0x0800a674
 8005728:	20000000 	.word	0x20000000
 800572c:	20000004 	.word	0x20000004

08005730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005730:	b480      	push	{r7}
 8005732:	b089      	sub	sp, #36	; 0x24
 8005734:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005736:	2300      	movs	r3, #0
 8005738:	61fb      	str	r3, [r7, #28]
 800573a:	2300      	movs	r3, #0
 800573c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800573e:	4b3e      	ldr	r3, [pc, #248]	; (8005838 <HAL_RCC_GetSysClockFreq+0x108>)
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f003 030c 	and.w	r3, r3, #12
 8005746:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005748:	4b3b      	ldr	r3, [pc, #236]	; (8005838 <HAL_RCC_GetSysClockFreq+0x108>)
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f003 0303 	and.w	r3, r3, #3
 8005750:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d005      	beq.n	8005764 <HAL_RCC_GetSysClockFreq+0x34>
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	2b0c      	cmp	r3, #12
 800575c:	d121      	bne.n	80057a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d11e      	bne.n	80057a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005764:	4b34      	ldr	r3, [pc, #208]	; (8005838 <HAL_RCC_GetSysClockFreq+0x108>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0308 	and.w	r3, r3, #8
 800576c:	2b00      	cmp	r3, #0
 800576e:	d107      	bne.n	8005780 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005770:	4b31      	ldr	r3, [pc, #196]	; (8005838 <HAL_RCC_GetSysClockFreq+0x108>)
 8005772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005776:	0a1b      	lsrs	r3, r3, #8
 8005778:	f003 030f 	and.w	r3, r3, #15
 800577c:	61fb      	str	r3, [r7, #28]
 800577e:	e005      	b.n	800578c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005780:	4b2d      	ldr	r3, [pc, #180]	; (8005838 <HAL_RCC_GetSysClockFreq+0x108>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	091b      	lsrs	r3, r3, #4
 8005786:	f003 030f 	and.w	r3, r3, #15
 800578a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800578c:	4a2b      	ldr	r2, [pc, #172]	; (800583c <HAL_RCC_GetSysClockFreq+0x10c>)
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005794:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10d      	bne.n	80057b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057a0:	e00a      	b.n	80057b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	2b04      	cmp	r3, #4
 80057a6:	d102      	bne.n	80057ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80057a8:	4b25      	ldr	r3, [pc, #148]	; (8005840 <HAL_RCC_GetSysClockFreq+0x110>)
 80057aa:	61bb      	str	r3, [r7, #24]
 80057ac:	e004      	b.n	80057b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	d101      	bne.n	80057b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80057b4:	4b23      	ldr	r3, [pc, #140]	; (8005844 <HAL_RCC_GetSysClockFreq+0x114>)
 80057b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	2b0c      	cmp	r3, #12
 80057bc:	d134      	bne.n	8005828 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057be:	4b1e      	ldr	r3, [pc, #120]	; (8005838 <HAL_RCC_GetSysClockFreq+0x108>)
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f003 0303 	and.w	r3, r3, #3
 80057c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d003      	beq.n	80057d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2b03      	cmp	r3, #3
 80057d2:	d003      	beq.n	80057dc <HAL_RCC_GetSysClockFreq+0xac>
 80057d4:	e005      	b.n	80057e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80057d6:	4b1a      	ldr	r3, [pc, #104]	; (8005840 <HAL_RCC_GetSysClockFreq+0x110>)
 80057d8:	617b      	str	r3, [r7, #20]
      break;
 80057da:	e005      	b.n	80057e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80057dc:	4b19      	ldr	r3, [pc, #100]	; (8005844 <HAL_RCC_GetSysClockFreq+0x114>)
 80057de:	617b      	str	r3, [r7, #20]
      break;
 80057e0:	e002      	b.n	80057e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	617b      	str	r3, [r7, #20]
      break;
 80057e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057e8:	4b13      	ldr	r3, [pc, #76]	; (8005838 <HAL_RCC_GetSysClockFreq+0x108>)
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	091b      	lsrs	r3, r3, #4
 80057ee:	f003 0307 	and.w	r3, r3, #7
 80057f2:	3301      	adds	r3, #1
 80057f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80057f6:	4b10      	ldr	r3, [pc, #64]	; (8005838 <HAL_RCC_GetSysClockFreq+0x108>)
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	0a1b      	lsrs	r3, r3, #8
 80057fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	fb03 f202 	mul.w	r2, r3, r2
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	fbb2 f3f3 	udiv	r3, r2, r3
 800580c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800580e:	4b0a      	ldr	r3, [pc, #40]	; (8005838 <HAL_RCC_GetSysClockFreq+0x108>)
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	0e5b      	lsrs	r3, r3, #25
 8005814:	f003 0303 	and.w	r3, r3, #3
 8005818:	3301      	adds	r3, #1
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	fbb2 f3f3 	udiv	r3, r2, r3
 8005826:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005828:	69bb      	ldr	r3, [r7, #24]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3724      	adds	r7, #36	; 0x24
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	40021000 	.word	0x40021000
 800583c:	0800a68c 	.word	0x0800a68c
 8005840:	00f42400 	.word	0x00f42400
 8005844:	007a1200 	.word	0x007a1200

08005848 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005848:	b480      	push	{r7}
 800584a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800584c:	4b03      	ldr	r3, [pc, #12]	; (800585c <HAL_RCC_GetHCLKFreq+0x14>)
 800584e:	681b      	ldr	r3, [r3, #0]
}
 8005850:	4618      	mov	r0, r3
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	20000000 	.word	0x20000000

08005860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005864:	f7ff fff0 	bl	8005848 <HAL_RCC_GetHCLKFreq>
 8005868:	4602      	mov	r2, r0
 800586a:	4b06      	ldr	r3, [pc, #24]	; (8005884 <HAL_RCC_GetPCLK1Freq+0x24>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	0a1b      	lsrs	r3, r3, #8
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	4904      	ldr	r1, [pc, #16]	; (8005888 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005876:	5ccb      	ldrb	r3, [r1, r3]
 8005878:	f003 031f 	and.w	r3, r3, #31
 800587c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005880:	4618      	mov	r0, r3
 8005882:	bd80      	pop	{r7, pc}
 8005884:	40021000 	.word	0x40021000
 8005888:	0800a684 	.word	0x0800a684

0800588c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005890:	f7ff ffda 	bl	8005848 <HAL_RCC_GetHCLKFreq>
 8005894:	4602      	mov	r2, r0
 8005896:	4b06      	ldr	r3, [pc, #24]	; (80058b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	0adb      	lsrs	r3, r3, #11
 800589c:	f003 0307 	and.w	r3, r3, #7
 80058a0:	4904      	ldr	r1, [pc, #16]	; (80058b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80058a2:	5ccb      	ldrb	r3, [r1, r3]
 80058a4:	f003 031f 	and.w	r3, r3, #31
 80058a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	40021000 	.word	0x40021000
 80058b4:	0800a684 	.word	0x0800a684

080058b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80058c0:	2300      	movs	r3, #0
 80058c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80058c4:	4b2a      	ldr	r3, [pc, #168]	; (8005970 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d003      	beq.n	80058d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80058d0:	f7ff f9b6 	bl	8004c40 <HAL_PWREx_GetVoltageRange>
 80058d4:	6178      	str	r0, [r7, #20]
 80058d6:	e014      	b.n	8005902 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80058d8:	4b25      	ldr	r3, [pc, #148]	; (8005970 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058dc:	4a24      	ldr	r2, [pc, #144]	; (8005970 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e2:	6593      	str	r3, [r2, #88]	; 0x58
 80058e4:	4b22      	ldr	r3, [pc, #136]	; (8005970 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ec:	60fb      	str	r3, [r7, #12]
 80058ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80058f0:	f7ff f9a6 	bl	8004c40 <HAL_PWREx_GetVoltageRange>
 80058f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80058f6:	4b1e      	ldr	r3, [pc, #120]	; (8005970 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058fa:	4a1d      	ldr	r2, [pc, #116]	; (8005970 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005900:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005908:	d10b      	bne.n	8005922 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b80      	cmp	r3, #128	; 0x80
 800590e:	d919      	bls.n	8005944 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2ba0      	cmp	r3, #160	; 0xa0
 8005914:	d902      	bls.n	800591c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005916:	2302      	movs	r3, #2
 8005918:	613b      	str	r3, [r7, #16]
 800591a:	e013      	b.n	8005944 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800591c:	2301      	movs	r3, #1
 800591e:	613b      	str	r3, [r7, #16]
 8005920:	e010      	b.n	8005944 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b80      	cmp	r3, #128	; 0x80
 8005926:	d902      	bls.n	800592e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005928:	2303      	movs	r3, #3
 800592a:	613b      	str	r3, [r7, #16]
 800592c:	e00a      	b.n	8005944 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2b80      	cmp	r3, #128	; 0x80
 8005932:	d102      	bne.n	800593a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005934:	2302      	movs	r3, #2
 8005936:	613b      	str	r3, [r7, #16]
 8005938:	e004      	b.n	8005944 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b70      	cmp	r3, #112	; 0x70
 800593e:	d101      	bne.n	8005944 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005940:	2301      	movs	r3, #1
 8005942:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005944:	4b0b      	ldr	r3, [pc, #44]	; (8005974 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f023 0207 	bic.w	r2, r3, #7
 800594c:	4909      	ldr	r1, [pc, #36]	; (8005974 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005954:	4b07      	ldr	r3, [pc, #28]	; (8005974 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0307 	and.w	r3, r3, #7
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	429a      	cmp	r2, r3
 8005960:	d001      	beq.n	8005966 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e000      	b.n	8005968 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3718      	adds	r7, #24
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	40021000 	.word	0x40021000
 8005974:	40022000 	.word	0x40022000

08005978 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005980:	2300      	movs	r3, #0
 8005982:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005984:	2300      	movs	r3, #0
 8005986:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005990:	2b00      	cmp	r3, #0
 8005992:	d031      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005998:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800599c:	d01a      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800599e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80059a2:	d814      	bhi.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x56>
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d009      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80059a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059ac:	d10f      	bne.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80059ae:	4b5d      	ldr	r3, [pc, #372]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	4a5c      	ldr	r2, [pc, #368]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80059b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059b8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059ba:	e00c      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3304      	adds	r3, #4
 80059c0:	2100      	movs	r1, #0
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 f9de 	bl	8005d84 <RCCEx_PLLSAI1_Config>
 80059c8:	4603      	mov	r3, r0
 80059ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059cc:	e003      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	74fb      	strb	r3, [r7, #19]
      break;
 80059d2:	e000      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80059d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059d6:	7cfb      	ldrb	r3, [r7, #19]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10b      	bne.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059dc:	4b51      	ldr	r3, [pc, #324]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80059de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ea:	494e      	ldr	r1, [pc, #312]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80059f2:	e001      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f4:	7cfb      	ldrb	r3, [r7, #19]
 80059f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 809e 	beq.w	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a06:	2300      	movs	r3, #0
 8005a08:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a0a:	4b46      	ldr	r3, [pc, #280]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005a16:	2301      	movs	r3, #1
 8005a18:	e000      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00d      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a20:	4b40      	ldr	r3, [pc, #256]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a24:	4a3f      	ldr	r2, [pc, #252]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a2a:	6593      	str	r3, [r2, #88]	; 0x58
 8005a2c:	4b3d      	ldr	r3, [pc, #244]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a34:	60bb      	str	r3, [r7, #8]
 8005a36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a3c:	4b3a      	ldr	r3, [pc, #232]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a39      	ldr	r2, [pc, #228]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a48:	f7fc fc8c 	bl	8002364 <HAL_GetTick>
 8005a4c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005a4e:	e009      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a50:	f7fc fc88 	bl	8002364 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d902      	bls.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	74fb      	strb	r3, [r7, #19]
        break;
 8005a62:	e005      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005a64:	4b30      	ldr	r3, [pc, #192]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d0ef      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005a70:	7cfb      	ldrb	r3, [r7, #19]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d15a      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a76:	4b2b      	ldr	r3, [pc, #172]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a80:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d01e      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d019      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a92:	4b24      	ldr	r3, [pc, #144]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a9c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a9e:	4b21      	ldr	r3, [pc, #132]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa4:	4a1f      	ldr	r2, [pc, #124]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005aae:	4b1d      	ldr	r3, [pc, #116]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab4:	4a1b      	ldr	r2, [pc, #108]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005abe:	4a19      	ldr	r2, [pc, #100]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d016      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad0:	f7fc fc48 	bl	8002364 <HAL_GetTick>
 8005ad4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ad6:	e00b      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ad8:	f7fc fc44 	bl	8002364 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d902      	bls.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	74fb      	strb	r3, [r7, #19]
            break;
 8005aee:	e006      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005af0:	4b0c      	ldr	r3, [pc, #48]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d0ec      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005afe:	7cfb      	ldrb	r3, [r7, #19]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10b      	bne.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b04:	4b07      	ldr	r3, [pc, #28]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b12:	4904      	ldr	r1, [pc, #16]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005b1a:	e009      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b1c:	7cfb      	ldrb	r3, [r7, #19]
 8005b1e:	74bb      	strb	r3, [r7, #18]
 8005b20:	e006      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005b22:	bf00      	nop
 8005b24:	40021000 	.word	0x40021000
 8005b28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b2c:	7cfb      	ldrb	r3, [r7, #19]
 8005b2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b30:	7c7b      	ldrb	r3, [r7, #17]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d105      	bne.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b36:	4b8a      	ldr	r3, [pc, #552]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b3a:	4a89      	ldr	r2, [pc, #548]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b40:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00a      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b4e:	4b84      	ldr	r3, [pc, #528]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b54:	f023 0203 	bic.w	r2, r3, #3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	4980      	ldr	r1, [pc, #512]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0302 	and.w	r3, r3, #2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00a      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b70:	4b7b      	ldr	r3, [pc, #492]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b76:	f023 020c 	bic.w	r2, r3, #12
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	4978      	ldr	r1, [pc, #480]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0320 	and.w	r3, r3, #32
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00a      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b92:	4b73      	ldr	r3, [pc, #460]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b98:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba0:	496f      	ldr	r1, [pc, #444]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00a      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bb4:	4b6a      	ldr	r3, [pc, #424]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bba:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc2:	4967      	ldr	r1, [pc, #412]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00a      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005bd6:	4b62      	ldr	r3, [pc, #392]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be4:	495e      	ldr	r1, [pc, #376]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00a      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005bf8:	4b59      	ldr	r3, [pc, #356]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c06:	4956      	ldr	r1, [pc, #344]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00a      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c1a:	4b51      	ldr	r3, [pc, #324]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c28:	494d      	ldr	r1, [pc, #308]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d028      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c3c:	4b48      	ldr	r3, [pc, #288]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4a:	4945      	ldr	r1, [pc, #276]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c5a:	d106      	bne.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c5c:	4b40      	ldr	r3, [pc, #256]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	4a3f      	ldr	r2, [pc, #252]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c66:	60d3      	str	r3, [r2, #12]
 8005c68:	e011      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c72:	d10c      	bne.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	3304      	adds	r3, #4
 8005c78:	2101      	movs	r1, #1
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 f882 	bl	8005d84 <RCCEx_PLLSAI1_Config>
 8005c80:	4603      	mov	r3, r0
 8005c82:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005c84:	7cfb      	ldrb	r3, [r7, #19]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005c8a:	7cfb      	ldrb	r3, [r7, #19]
 8005c8c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d028      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c9a:	4b31      	ldr	r3, [pc, #196]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca8:	492d      	ldr	r1, [pc, #180]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cb8:	d106      	bne.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cba:	4b29      	ldr	r3, [pc, #164]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	4a28      	ldr	r2, [pc, #160]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005cc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cc4:	60d3      	str	r3, [r2, #12]
 8005cc6:	e011      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ccc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cd0:	d10c      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	3304      	adds	r3, #4
 8005cd6:	2101      	movs	r1, #1
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 f853 	bl	8005d84 <RCCEx_PLLSAI1_Config>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ce2:	7cfb      	ldrb	r3, [r7, #19]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005ce8:	7cfb      	ldrb	r3, [r7, #19]
 8005cea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01c      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005cf8:	4b19      	ldr	r3, [pc, #100]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cfe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d06:	4916      	ldr	r1, [pc, #88]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d16:	d10c      	bne.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	2102      	movs	r1, #2
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 f830 	bl	8005d84 <RCCEx_PLLSAI1_Config>
 8005d24:	4603      	mov	r3, r0
 8005d26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d28:	7cfb      	ldrb	r3, [r7, #19]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005d2e:	7cfb      	ldrb	r3, [r7, #19]
 8005d30:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00a      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005d3e:	4b08      	ldr	r3, [pc, #32]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d44:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d4c:	4904      	ldr	r1, [pc, #16]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005d54:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	40021000 	.word	0x40021000

08005d64 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005d64:	b480      	push	{r7}
 8005d66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005d68:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a04      	ldr	r2, [pc, #16]	; (8005d80 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005d6e:	f043 0304 	orr.w	r3, r3, #4
 8005d72:	6013      	str	r3, [r2, #0]
}
 8005d74:	bf00      	nop
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	40021000 	.word	0x40021000

08005d84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d92:	4b74      	ldr	r3, [pc, #464]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	f003 0303 	and.w	r3, r3, #3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d018      	beq.n	8005dd0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005d9e:	4b71      	ldr	r3, [pc, #452]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f003 0203 	and.w	r2, r3, #3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d10d      	bne.n	8005dca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
       ||
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d009      	beq.n	8005dca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005db6:	4b6b      	ldr	r3, [pc, #428]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	091b      	lsrs	r3, r3, #4
 8005dbc:	f003 0307 	and.w	r3, r3, #7
 8005dc0:	1c5a      	adds	r2, r3, #1
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
       ||
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d047      	beq.n	8005e5a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	73fb      	strb	r3, [r7, #15]
 8005dce:	e044      	b.n	8005e5a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2b03      	cmp	r3, #3
 8005dd6:	d018      	beq.n	8005e0a <RCCEx_PLLSAI1_Config+0x86>
 8005dd8:	2b03      	cmp	r3, #3
 8005dda:	d825      	bhi.n	8005e28 <RCCEx_PLLSAI1_Config+0xa4>
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d002      	beq.n	8005de6 <RCCEx_PLLSAI1_Config+0x62>
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d009      	beq.n	8005df8 <RCCEx_PLLSAI1_Config+0x74>
 8005de4:	e020      	b.n	8005e28 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005de6:	4b5f      	ldr	r3, [pc, #380]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0302 	and.w	r3, r3, #2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d11d      	bne.n	8005e2e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005df6:	e01a      	b.n	8005e2e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005df8:	4b5a      	ldr	r3, [pc, #360]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d116      	bne.n	8005e32 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e08:	e013      	b.n	8005e32 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005e0a:	4b56      	ldr	r3, [pc, #344]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10f      	bne.n	8005e36 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005e16:	4b53      	ldr	r3, [pc, #332]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d109      	bne.n	8005e36 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e26:	e006      	b.n	8005e36 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e2c:	e004      	b.n	8005e38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005e2e:	bf00      	nop
 8005e30:	e002      	b.n	8005e38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005e32:	bf00      	nop
 8005e34:	e000      	b.n	8005e38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005e36:	bf00      	nop
    }

    if(status == HAL_OK)
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10d      	bne.n	8005e5a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005e3e:	4b49      	ldr	r3, [pc, #292]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6819      	ldr	r1, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	011b      	lsls	r3, r3, #4
 8005e52:	430b      	orrs	r3, r1
 8005e54:	4943      	ldr	r1, [pc, #268]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005e5a:	7bfb      	ldrb	r3, [r7, #15]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d17c      	bne.n	8005f5a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005e60:	4b40      	ldr	r3, [pc, #256]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a3f      	ldr	r2, [pc, #252]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e6c:	f7fc fa7a 	bl	8002364 <HAL_GetTick>
 8005e70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e72:	e009      	b.n	8005e88 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e74:	f7fc fa76 	bl	8002364 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d902      	bls.n	8005e88 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	73fb      	strb	r3, [r7, #15]
        break;
 8005e86:	e005      	b.n	8005e94 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e88:	4b36      	ldr	r3, [pc, #216]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1ef      	bne.n	8005e74 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d15f      	bne.n	8005f5a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d110      	bne.n	8005ec2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ea0:	4b30      	ldr	r3, [pc, #192]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005ea8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	6892      	ldr	r2, [r2, #8]
 8005eb0:	0211      	lsls	r1, r2, #8
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	68d2      	ldr	r2, [r2, #12]
 8005eb6:	06d2      	lsls	r2, r2, #27
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	492a      	ldr	r1, [pc, #168]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	610b      	str	r3, [r1, #16]
 8005ec0:	e027      	b.n	8005f12 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d112      	bne.n	8005eee <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ec8:	4b26      	ldr	r3, [pc, #152]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005ed0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	6892      	ldr	r2, [r2, #8]
 8005ed8:	0211      	lsls	r1, r2, #8
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	6912      	ldr	r2, [r2, #16]
 8005ede:	0852      	lsrs	r2, r2, #1
 8005ee0:	3a01      	subs	r2, #1
 8005ee2:	0552      	lsls	r2, r2, #21
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	491f      	ldr	r1, [pc, #124]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	610b      	str	r3, [r1, #16]
 8005eec:	e011      	b.n	8005f12 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005eee:	4b1d      	ldr	r3, [pc, #116]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005ef6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	6892      	ldr	r2, [r2, #8]
 8005efe:	0211      	lsls	r1, r2, #8
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	6952      	ldr	r2, [r2, #20]
 8005f04:	0852      	lsrs	r2, r2, #1
 8005f06:	3a01      	subs	r2, #1
 8005f08:	0652      	lsls	r2, r2, #25
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	4915      	ldr	r1, [pc, #84]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005f12:	4b14      	ldr	r3, [pc, #80]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a13      	ldr	r2, [pc, #76]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f1c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f1e:	f7fc fa21 	bl	8002364 <HAL_GetTick>
 8005f22:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f24:	e009      	b.n	8005f3a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f26:	f7fc fa1d 	bl	8002364 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d902      	bls.n	8005f3a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	73fb      	strb	r3, [r7, #15]
          break;
 8005f38:	e005      	b.n	8005f46 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f3a:	4b0a      	ldr	r3, [pc, #40]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d0ef      	beq.n	8005f26 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d106      	bne.n	8005f5a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005f4c:	4b05      	ldr	r3, [pc, #20]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f4e:	691a      	ldr	r2, [r3, #16]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	4903      	ldr	r1, [pc, #12]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	40021000 	.word	0x40021000

08005f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e049      	b.n	800600e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d106      	bne.n	8005f94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7fb ff06 	bl	8001da0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2202      	movs	r2, #2
 8005f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	3304      	adds	r3, #4
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	4610      	mov	r0, r2
 8005fa8:	f000 fb04 	bl	80065b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3708      	adds	r7, #8
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b082      	sub	sp, #8
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d101      	bne.n	8006028 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e049      	b.n	80060bc <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	d106      	bne.n	8006042 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f841 	bl	80060c4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2202      	movs	r2, #2
 8006046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	3304      	adds	r3, #4
 8006052:	4619      	mov	r1, r3
 8006054:	4610      	mov	r0, r2
 8006056:	f000 faad 	bl	80065b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3708      	adds	r7, #8
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d020      	beq.n	800613c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f003 0302 	and.w	r3, r3, #2
 8006100:	2b00      	cmp	r3, #0
 8006102:	d01b      	beq.n	800613c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f06f 0202 	mvn.w	r2, #2
 800610c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	f003 0303 	and.w	r3, r3, #3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d003      	beq.n	800612a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fa27 	bl	8006576 <HAL_TIM_IC_CaptureCallback>
 8006128:	e005      	b.n	8006136 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 fa19 	bl	8006562 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 fa2a 	bl	800658a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f003 0304 	and.w	r3, r3, #4
 8006142:	2b00      	cmp	r3, #0
 8006144:	d020      	beq.n	8006188 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f003 0304 	and.w	r3, r3, #4
 800614c:	2b00      	cmp	r3, #0
 800614e:	d01b      	beq.n	8006188 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f06f 0204 	mvn.w	r2, #4
 8006158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2202      	movs	r2, #2
 800615e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800616a:	2b00      	cmp	r3, #0
 800616c:	d003      	beq.n	8006176 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fa01 	bl	8006576 <HAL_TIM_IC_CaptureCallback>
 8006174:	e005      	b.n	8006182 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f9f3 	bl	8006562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 fa04 	bl	800658a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	f003 0308 	and.w	r3, r3, #8
 800618e:	2b00      	cmp	r3, #0
 8006190:	d020      	beq.n	80061d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f003 0308 	and.w	r3, r3, #8
 8006198:	2b00      	cmp	r3, #0
 800619a:	d01b      	beq.n	80061d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f06f 0208 	mvn.w	r2, #8
 80061a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2204      	movs	r2, #4
 80061aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	f003 0303 	and.w	r3, r3, #3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f9db 	bl	8006576 <HAL_TIM_IC_CaptureCallback>
 80061c0:	e005      	b.n	80061ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f9cd 	bl	8006562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f9de 	bl	800658a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f003 0310 	and.w	r3, r3, #16
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d020      	beq.n	8006220 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f003 0310 	and.w	r3, r3, #16
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d01b      	beq.n	8006220 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f06f 0210 	mvn.w	r2, #16
 80061f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2208      	movs	r2, #8
 80061f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f9b5 	bl	8006576 <HAL_TIM_IC_CaptureCallback>
 800620c:	e005      	b.n	800621a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f9a7 	bl	8006562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f9b8 	bl	800658a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00c      	beq.n	8006244 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b00      	cmp	r3, #0
 8006232:	d007      	beq.n	8006244 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f06f 0201 	mvn.w	r2, #1
 800623c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7fb fc34 	bl	8001aac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00c      	beq.n	8006268 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006254:	2b00      	cmp	r3, #0
 8006256:	d007      	beq.n	8006268 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fe0a 	bl	8006e7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00c      	beq.n	800628c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006278:	2b00      	cmp	r3, #0
 800627a:	d007      	beq.n	800628c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fe02 	bl	8006e90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00c      	beq.n	80062b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629c:	2b00      	cmp	r3, #0
 800629e:	d007      	beq.n	80062b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f977 	bl	800659e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f003 0320 	and.w	r3, r3, #32
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00c      	beq.n	80062d4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f003 0320 	and.w	r3, r3, #32
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d007      	beq.n	80062d4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f06f 0220 	mvn.w	r2, #32
 80062cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fdca 	bl	8006e68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062d4:	bf00      	nop
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b086      	sub	sp, #24
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062e8:	2300      	movs	r3, #0
 80062ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d101      	bne.n	80062fa <HAL_TIM_OC_ConfigChannel+0x1e>
 80062f6:	2302      	movs	r3, #2
 80062f8:	e066      	b.n	80063c8 <HAL_TIM_OC_ConfigChannel+0xec>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b14      	cmp	r3, #20
 8006306:	d857      	bhi.n	80063b8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006308:	a201      	add	r2, pc, #4	; (adr r2, 8006310 <HAL_TIM_OC_ConfigChannel+0x34>)
 800630a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630e:	bf00      	nop
 8006310:	08006365 	.word	0x08006365
 8006314:	080063b9 	.word	0x080063b9
 8006318:	080063b9 	.word	0x080063b9
 800631c:	080063b9 	.word	0x080063b9
 8006320:	08006373 	.word	0x08006373
 8006324:	080063b9 	.word	0x080063b9
 8006328:	080063b9 	.word	0x080063b9
 800632c:	080063b9 	.word	0x080063b9
 8006330:	08006381 	.word	0x08006381
 8006334:	080063b9 	.word	0x080063b9
 8006338:	080063b9 	.word	0x080063b9
 800633c:	080063b9 	.word	0x080063b9
 8006340:	0800638f 	.word	0x0800638f
 8006344:	080063b9 	.word	0x080063b9
 8006348:	080063b9 	.word	0x080063b9
 800634c:	080063b9 	.word	0x080063b9
 8006350:	0800639d 	.word	0x0800639d
 8006354:	080063b9 	.word	0x080063b9
 8006358:	080063b9 	.word	0x080063b9
 800635c:	080063b9 	.word	0x080063b9
 8006360:	080063ab 	.word	0x080063ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68b9      	ldr	r1, [r7, #8]
 800636a:	4618      	mov	r0, r3
 800636c:	f000 f986 	bl	800667c <TIM_OC1_SetConfig>
      break;
 8006370:	e025      	b.n	80063be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68b9      	ldr	r1, [r7, #8]
 8006378:	4618      	mov	r0, r3
 800637a:	f000 f9fb 	bl	8006774 <TIM_OC2_SetConfig>
      break;
 800637e:	e01e      	b.n	80063be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68b9      	ldr	r1, [r7, #8]
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fa6e 	bl	8006868 <TIM_OC3_SetConfig>
      break;
 800638c:	e017      	b.n	80063be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68b9      	ldr	r1, [r7, #8]
 8006394:	4618      	mov	r0, r3
 8006396:	f000 fadf 	bl	8006958 <TIM_OC4_SetConfig>
      break;
 800639a:	e010      	b.n	80063be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68b9      	ldr	r1, [r7, #8]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fb36 	bl	8006a14 <TIM_OC5_SetConfig>
      break;
 80063a8:	e009      	b.n	80063be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68b9      	ldr	r1, [r7, #8]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f000 fb87 	bl	8006ac4 <TIM_OC6_SetConfig>
      break;
 80063b6:	e002      	b.n	80063be <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	75fb      	strb	r3, [r7, #23]
      break;
 80063bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3718      	adds	r7, #24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_TIM_ConfigClockSource+0x1c>
 80063e8:	2302      	movs	r3, #2
 80063ea:	e0b6      	b.n	800655a <HAL_TIM_ConfigClockSource+0x18a>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800640a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800640e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006416:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006428:	d03e      	beq.n	80064a8 <HAL_TIM_ConfigClockSource+0xd8>
 800642a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800642e:	f200 8087 	bhi.w	8006540 <HAL_TIM_ConfigClockSource+0x170>
 8006432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006436:	f000 8086 	beq.w	8006546 <HAL_TIM_ConfigClockSource+0x176>
 800643a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800643e:	d87f      	bhi.n	8006540 <HAL_TIM_ConfigClockSource+0x170>
 8006440:	2b70      	cmp	r3, #112	; 0x70
 8006442:	d01a      	beq.n	800647a <HAL_TIM_ConfigClockSource+0xaa>
 8006444:	2b70      	cmp	r3, #112	; 0x70
 8006446:	d87b      	bhi.n	8006540 <HAL_TIM_ConfigClockSource+0x170>
 8006448:	2b60      	cmp	r3, #96	; 0x60
 800644a:	d050      	beq.n	80064ee <HAL_TIM_ConfigClockSource+0x11e>
 800644c:	2b60      	cmp	r3, #96	; 0x60
 800644e:	d877      	bhi.n	8006540 <HAL_TIM_ConfigClockSource+0x170>
 8006450:	2b50      	cmp	r3, #80	; 0x50
 8006452:	d03c      	beq.n	80064ce <HAL_TIM_ConfigClockSource+0xfe>
 8006454:	2b50      	cmp	r3, #80	; 0x50
 8006456:	d873      	bhi.n	8006540 <HAL_TIM_ConfigClockSource+0x170>
 8006458:	2b40      	cmp	r3, #64	; 0x40
 800645a:	d058      	beq.n	800650e <HAL_TIM_ConfigClockSource+0x13e>
 800645c:	2b40      	cmp	r3, #64	; 0x40
 800645e:	d86f      	bhi.n	8006540 <HAL_TIM_ConfigClockSource+0x170>
 8006460:	2b30      	cmp	r3, #48	; 0x30
 8006462:	d064      	beq.n	800652e <HAL_TIM_ConfigClockSource+0x15e>
 8006464:	2b30      	cmp	r3, #48	; 0x30
 8006466:	d86b      	bhi.n	8006540 <HAL_TIM_ConfigClockSource+0x170>
 8006468:	2b20      	cmp	r3, #32
 800646a:	d060      	beq.n	800652e <HAL_TIM_ConfigClockSource+0x15e>
 800646c:	2b20      	cmp	r3, #32
 800646e:	d867      	bhi.n	8006540 <HAL_TIM_ConfigClockSource+0x170>
 8006470:	2b00      	cmp	r3, #0
 8006472:	d05c      	beq.n	800652e <HAL_TIM_ConfigClockSource+0x15e>
 8006474:	2b10      	cmp	r3, #16
 8006476:	d05a      	beq.n	800652e <HAL_TIM_ConfigClockSource+0x15e>
 8006478:	e062      	b.n	8006540 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800648a:	f000 fbef 	bl	8006c6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800649c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	609a      	str	r2, [r3, #8]
      break;
 80064a6:	e04f      	b.n	8006548 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064b8:	f000 fbd8 	bl	8006c6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	689a      	ldr	r2, [r3, #8]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064ca:	609a      	str	r2, [r3, #8]
      break;
 80064cc:	e03c      	b.n	8006548 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064da:	461a      	mov	r2, r3
 80064dc:	f000 fb4c 	bl	8006b78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2150      	movs	r1, #80	; 0x50
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 fba5 	bl	8006c36 <TIM_ITRx_SetConfig>
      break;
 80064ec:	e02c      	b.n	8006548 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064fa:	461a      	mov	r2, r3
 80064fc:	f000 fb6b 	bl	8006bd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2160      	movs	r1, #96	; 0x60
 8006506:	4618      	mov	r0, r3
 8006508:	f000 fb95 	bl	8006c36 <TIM_ITRx_SetConfig>
      break;
 800650c:	e01c      	b.n	8006548 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800651a:	461a      	mov	r2, r3
 800651c:	f000 fb2c 	bl	8006b78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2140      	movs	r1, #64	; 0x40
 8006526:	4618      	mov	r0, r3
 8006528:	f000 fb85 	bl	8006c36 <TIM_ITRx_SetConfig>
      break;
 800652c:	e00c      	b.n	8006548 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4619      	mov	r1, r3
 8006538:	4610      	mov	r0, r2
 800653a:	f000 fb7c 	bl	8006c36 <TIM_ITRx_SetConfig>
      break;
 800653e:	e003      	b.n	8006548 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	73fb      	strb	r3, [r7, #15]
      break;
 8006544:	e000      	b.n	8006548 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006546:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006558:	7bfb      	ldrb	r3, [r7, #15]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800656a:	bf00      	nop
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006576:	b480      	push	{r7}
 8006578:	b083      	sub	sp, #12
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800657e:	bf00      	nop
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800658a:	b480      	push	{r7}
 800658c:	b083      	sub	sp, #12
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006592:	bf00      	nop
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800659e:	b480      	push	{r7}
 80065a0:	b083      	sub	sp, #12
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065a6:	bf00      	nop
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
	...

080065b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a2a      	ldr	r2, [pc, #168]	; (8006670 <TIM_Base_SetConfig+0xbc>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d003      	beq.n	80065d4 <TIM_Base_SetConfig+0x20>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d2:	d108      	bne.n	80065e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a21      	ldr	r2, [pc, #132]	; (8006670 <TIM_Base_SetConfig+0xbc>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d00b      	beq.n	8006606 <TIM_Base_SetConfig+0x52>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065f4:	d007      	beq.n	8006606 <TIM_Base_SetConfig+0x52>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a1e      	ldr	r2, [pc, #120]	; (8006674 <TIM_Base_SetConfig+0xc0>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d003      	beq.n	8006606 <TIM_Base_SetConfig+0x52>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a1d      	ldr	r2, [pc, #116]	; (8006678 <TIM_Base_SetConfig+0xc4>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d108      	bne.n	8006618 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800660c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	4313      	orrs	r3, r2
 8006616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	4313      	orrs	r3, r2
 8006624:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	689a      	ldr	r2, [r3, #8]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a0c      	ldr	r2, [pc, #48]	; (8006670 <TIM_Base_SetConfig+0xbc>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d007      	beq.n	8006654 <TIM_Base_SetConfig+0xa0>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a0b      	ldr	r2, [pc, #44]	; (8006674 <TIM_Base_SetConfig+0xc0>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d003      	beq.n	8006654 <TIM_Base_SetConfig+0xa0>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a0a      	ldr	r2, [pc, #40]	; (8006678 <TIM_Base_SetConfig+0xc4>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d103      	bne.n	800665c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	691a      	ldr	r2, [r3, #16]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	615a      	str	r2, [r3, #20]
}
 8006662:	bf00      	nop
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	40012c00 	.word	0x40012c00
 8006674:	40014000 	.word	0x40014000
 8006678:	40014400 	.word	0x40014400

0800667c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800667c:	b480      	push	{r7}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a1b      	ldr	r3, [r3, #32]
 8006690:	f023 0201 	bic.w	r2, r3, #1
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f023 0303 	bic.w	r3, r3, #3
 80066b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	4313      	orrs	r3, r2
 80066c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	f023 0302 	bic.w	r3, r3, #2
 80066c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a24      	ldr	r2, [pc, #144]	; (8006768 <TIM_OC1_SetConfig+0xec>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d007      	beq.n	80066ec <TIM_OC1_SetConfig+0x70>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a23      	ldr	r2, [pc, #140]	; (800676c <TIM_OC1_SetConfig+0xf0>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d003      	beq.n	80066ec <TIM_OC1_SetConfig+0x70>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a22      	ldr	r2, [pc, #136]	; (8006770 <TIM_OC1_SetConfig+0xf4>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d10c      	bne.n	8006706 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f023 0308 	bic.w	r3, r3, #8
 80066f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f023 0304 	bic.w	r3, r3, #4
 8006704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a17      	ldr	r2, [pc, #92]	; (8006768 <TIM_OC1_SetConfig+0xec>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d007      	beq.n	800671e <TIM_OC1_SetConfig+0xa2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a16      	ldr	r2, [pc, #88]	; (800676c <TIM_OC1_SetConfig+0xf0>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d003      	beq.n	800671e <TIM_OC1_SetConfig+0xa2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a15      	ldr	r2, [pc, #84]	; (8006770 <TIM_OC1_SetConfig+0xf4>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d111      	bne.n	8006742 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800672c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	4313      	orrs	r3, r2
 8006736:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	4313      	orrs	r3, r2
 8006740:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	685a      	ldr	r2, [r3, #4]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	621a      	str	r2, [r3, #32]
}
 800675c:	bf00      	nop
 800675e:	371c      	adds	r7, #28
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr
 8006768:	40012c00 	.word	0x40012c00
 800676c:	40014000 	.word	0x40014000
 8006770:	40014400 	.word	0x40014400

08006774 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006774:	b480      	push	{r7}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a1b      	ldr	r3, [r3, #32]
 8006788:	f023 0210 	bic.w	r2, r3, #16
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	021b      	lsls	r3, r3, #8
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	f023 0320 	bic.w	r3, r3, #32
 80067c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	011b      	lsls	r3, r3, #4
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a22      	ldr	r2, [pc, #136]	; (800685c <TIM_OC2_SetConfig+0xe8>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d10d      	bne.n	80067f4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	011b      	lsls	r3, r3, #4
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a19      	ldr	r2, [pc, #100]	; (800685c <TIM_OC2_SetConfig+0xe8>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d007      	beq.n	800680c <TIM_OC2_SetConfig+0x98>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a18      	ldr	r2, [pc, #96]	; (8006860 <TIM_OC2_SetConfig+0xec>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d003      	beq.n	800680c <TIM_OC2_SetConfig+0x98>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a17      	ldr	r2, [pc, #92]	; (8006864 <TIM_OC2_SetConfig+0xf0>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d113      	bne.n	8006834 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006812:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800681a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	4313      	orrs	r3, r2
 8006826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	699b      	ldr	r3, [r3, #24]
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	4313      	orrs	r3, r2
 8006832:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	621a      	str	r2, [r3, #32]
}
 800684e:	bf00      	nop
 8006850:	371c      	adds	r7, #28
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	40012c00 	.word	0x40012c00
 8006860:	40014000 	.word	0x40014000
 8006864:	40014400 	.word	0x40014400

08006868 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a1b      	ldr	r3, [r3, #32]
 800687c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800689a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f023 0303 	bic.w	r3, r3, #3
 80068a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	021b      	lsls	r3, r3, #8
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	4313      	orrs	r3, r2
 80068c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a21      	ldr	r2, [pc, #132]	; (800694c <TIM_OC3_SetConfig+0xe4>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d10d      	bne.n	80068e6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	021b      	lsls	r3, r3, #8
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	4313      	orrs	r3, r2
 80068dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a18      	ldr	r2, [pc, #96]	; (800694c <TIM_OC3_SetConfig+0xe4>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d007      	beq.n	80068fe <TIM_OC3_SetConfig+0x96>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a17      	ldr	r2, [pc, #92]	; (8006950 <TIM_OC3_SetConfig+0xe8>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d003      	beq.n	80068fe <TIM_OC3_SetConfig+0x96>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a16      	ldr	r2, [pc, #88]	; (8006954 <TIM_OC3_SetConfig+0xec>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d113      	bne.n	8006926 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006904:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800690c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	011b      	lsls	r3, r3, #4
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	4313      	orrs	r3, r2
 8006918:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	011b      	lsls	r3, r3, #4
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	4313      	orrs	r3, r2
 8006924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	621a      	str	r2, [r3, #32]
}
 8006940:	bf00      	nop
 8006942:	371c      	adds	r7, #28
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	40012c00 	.word	0x40012c00
 8006950:	40014000 	.word	0x40014000
 8006954:	40014400 	.word	0x40014400

08006958 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006958:	b480      	push	{r7}
 800695a:	b087      	sub	sp, #28
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a1b      	ldr	r3, [r3, #32]
 8006966:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800698a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006992:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	021b      	lsls	r3, r3, #8
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	4313      	orrs	r3, r2
 800699e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	031b      	lsls	r3, r3, #12
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a14      	ldr	r2, [pc, #80]	; (8006a08 <TIM_OC4_SetConfig+0xb0>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d007      	beq.n	80069cc <TIM_OC4_SetConfig+0x74>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a13      	ldr	r2, [pc, #76]	; (8006a0c <TIM_OC4_SetConfig+0xb4>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d003      	beq.n	80069cc <TIM_OC4_SetConfig+0x74>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a12      	ldr	r2, [pc, #72]	; (8006a10 <TIM_OC4_SetConfig+0xb8>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d109      	bne.n	80069e0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	019b      	lsls	r3, r3, #6
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	4313      	orrs	r3, r2
 80069de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	621a      	str	r2, [r3, #32]
}
 80069fa:	bf00      	nop
 80069fc:	371c      	adds	r7, #28
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	40012c00 	.word	0x40012c00
 8006a0c:	40014000 	.word	0x40014000
 8006a10:	40014400 	.word	0x40014400

08006a14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b087      	sub	sp, #28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006a58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	041b      	lsls	r3, r3, #16
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a13      	ldr	r2, [pc, #76]	; (8006ab8 <TIM_OC5_SetConfig+0xa4>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d007      	beq.n	8006a7e <TIM_OC5_SetConfig+0x6a>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a12      	ldr	r2, [pc, #72]	; (8006abc <TIM_OC5_SetConfig+0xa8>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d003      	beq.n	8006a7e <TIM_OC5_SetConfig+0x6a>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a11      	ldr	r2, [pc, #68]	; (8006ac0 <TIM_OC5_SetConfig+0xac>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d109      	bne.n	8006a92 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	021b      	lsls	r3, r3, #8
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	685a      	ldr	r2, [r3, #4]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	621a      	str	r2, [r3, #32]
}
 8006aac:	bf00      	nop
 8006aae:	371c      	adds	r7, #28
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr
 8006ab8:	40012c00 	.word	0x40012c00
 8006abc:	40014000 	.word	0x40014000
 8006ac0:	40014400 	.word	0x40014400

08006ac4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b087      	sub	sp, #28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a1b      	ldr	r3, [r3, #32]
 8006ad8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	021b      	lsls	r3, r3, #8
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	051b      	lsls	r3, r3, #20
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a14      	ldr	r2, [pc, #80]	; (8006b6c <TIM_OC6_SetConfig+0xa8>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d007      	beq.n	8006b30 <TIM_OC6_SetConfig+0x6c>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a13      	ldr	r2, [pc, #76]	; (8006b70 <TIM_OC6_SetConfig+0xac>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d003      	beq.n	8006b30 <TIM_OC6_SetConfig+0x6c>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a12      	ldr	r2, [pc, #72]	; (8006b74 <TIM_OC6_SetConfig+0xb0>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d109      	bne.n	8006b44 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	695b      	ldr	r3, [r3, #20]
 8006b3c:	029b      	lsls	r3, r3, #10
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	621a      	str	r2, [r3, #32]
}
 8006b5e:	bf00      	nop
 8006b60:	371c      	adds	r7, #28
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	40012c00 	.word	0x40012c00
 8006b70:	40014000 	.word	0x40014000
 8006b74:	40014400 	.word	0x40014400

08006b78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b087      	sub	sp, #28
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6a1b      	ldr	r3, [r3, #32]
 8006b88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	f023 0201 	bic.w	r2, r3, #1
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ba2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	011b      	lsls	r3, r3, #4
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f023 030a 	bic.w	r3, r3, #10
 8006bb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	621a      	str	r2, [r3, #32]
}
 8006bca:	bf00      	nop
 8006bcc:	371c      	adds	r7, #28
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b087      	sub	sp, #28
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	60f8      	str	r0, [r7, #12]
 8006bde:	60b9      	str	r1, [r7, #8]
 8006be0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	f023 0210 	bic.w	r2, r3, #16
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	031b      	lsls	r3, r3, #12
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	011b      	lsls	r3, r3, #4
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	621a      	str	r2, [r3, #32]
}
 8006c2a:	bf00      	nop
 8006c2c:	371c      	adds	r7, #28
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b085      	sub	sp, #20
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	f043 0307 	orr.w	r3, r3, #7
 8006c58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	609a      	str	r2, [r3, #8]
}
 8006c60:	bf00      	nop
 8006c62:	3714      	adds	r7, #20
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b087      	sub	sp, #28
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
 8006c78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	021a      	lsls	r2, r3, #8
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	431a      	orrs	r2, r3
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	609a      	str	r2, [r3, #8]
}
 8006ca0:	bf00      	nop
 8006ca2:	371c      	adds	r7, #28
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d101      	bne.n	8006cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	e04f      	b.n	8006d64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a21      	ldr	r2, [pc, #132]	; (8006d70 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d108      	bne.n	8006d00 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006cf4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a14      	ldr	r2, [pc, #80]	; (8006d70 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d009      	beq.n	8006d38 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d2c:	d004      	beq.n	8006d38 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a10      	ldr	r2, [pc, #64]	; (8006d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d10c      	bne.n	8006d52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr
 8006d70:	40012c00 	.word	0x40012c00
 8006d74:	40014000 	.word	0x40014000

08006d78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006d82:	2300      	movs	r3, #0
 8006d84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d101      	bne.n	8006d94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006d90:	2302      	movs	r3, #2
 8006d92:	e060      	b.n	8006e56 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	695b      	ldr	r3, [r3, #20]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	041b      	lsls	r3, r3, #16
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a14      	ldr	r2, [pc, #80]	; (8006e64 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d115      	bne.n	8006e44 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	051b      	lsls	r3, r3, #20
 8006e24:	4313      	orrs	r3, r2
 8006e26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	6a1b      	ldr	r3, [r3, #32]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3714      	adds	r7, #20
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	40012c00 	.word	0x40012c00

08006e68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d101      	bne.n	8006eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e040      	b.n	8006f38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d106      	bne.n	8006ecc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7fa fffa 	bl	8001ec0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2224      	movs	r2, #36	; 0x24
 8006ed0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f022 0201 	bic.w	r2, r2, #1
 8006ee0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d002      	beq.n	8006ef0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fade 	bl	80074ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f8af 	bl	8007054 <UART_SetConfig>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d101      	bne.n	8006f00 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e01b      	b.n	8006f38 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	685a      	ldr	r2, [r3, #4]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	689a      	ldr	r2, [r3, #8]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f042 0201 	orr.w	r2, r2, #1
 8006f2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fb5d 	bl	80075f0 <UART_CheckIdleState>
 8006f36:	4603      	mov	r3, r0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3708      	adds	r7, #8
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b08a      	sub	sp, #40	; 0x28
 8006f44:	af02      	add	r7, sp, #8
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	603b      	str	r3, [r7, #0]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f54:	2b20      	cmp	r3, #32
 8006f56:	d178      	bne.n	800704a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <HAL_UART_Transmit+0x24>
 8006f5e:	88fb      	ldrh	r3, [r7, #6]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d101      	bne.n	8006f68 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e071      	b.n	800704c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2221      	movs	r2, #33	; 0x21
 8006f74:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f76:	f7fb f9f5 	bl	8002364 <HAL_GetTick>
 8006f7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	88fa      	ldrh	r2, [r7, #6]
 8006f80:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	88fa      	ldrh	r2, [r7, #6]
 8006f88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f94:	d108      	bne.n	8006fa8 <HAL_UART_Transmit+0x68>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d104      	bne.n	8006fa8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	61bb      	str	r3, [r7, #24]
 8006fa6:	e003      	b.n	8006fb0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fac:	2300      	movs	r3, #0
 8006fae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006fb0:	e030      	b.n	8007014 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	2180      	movs	r1, #128	; 0x80
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f000 fbbf 	bl	8007740 <UART_WaitOnFlagUntilTimeout>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d004      	beq.n	8006fd2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2220      	movs	r2, #32
 8006fcc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e03c      	b.n	800704c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10b      	bne.n	8006ff0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	881a      	ldrh	r2, [r3, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fe4:	b292      	uxth	r2, r2
 8006fe6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	3302      	adds	r3, #2
 8006fec:	61bb      	str	r3, [r7, #24]
 8006fee:	e008      	b.n	8007002 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	781a      	ldrb	r2, [r3, #0]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	b292      	uxth	r2, r2
 8006ffa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	3301      	adds	r3, #1
 8007000:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007008:	b29b      	uxth	r3, r3
 800700a:	3b01      	subs	r3, #1
 800700c:	b29a      	uxth	r2, r3
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800701a:	b29b      	uxth	r3, r3
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1c8      	bne.n	8006fb2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	2200      	movs	r2, #0
 8007028:	2140      	movs	r1, #64	; 0x40
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f000 fb88 	bl	8007740 <UART_WaitOnFlagUntilTimeout>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d004      	beq.n	8007040 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2220      	movs	r2, #32
 800703a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e005      	b.n	800704c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2220      	movs	r2, #32
 8007044:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007046:	2300      	movs	r3, #0
 8007048:	e000      	b.n	800704c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800704a:	2302      	movs	r3, #2
  }
}
 800704c:	4618      	mov	r0, r3
 800704e:	3720      	adds	r7, #32
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007058:	b08a      	sub	sp, #40	; 0x28
 800705a:	af00      	add	r7, sp, #0
 800705c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800705e:	2300      	movs	r3, #0
 8007060:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	689a      	ldr	r2, [r3, #8]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	431a      	orrs	r2, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	431a      	orrs	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	69db      	ldr	r3, [r3, #28]
 8007078:	4313      	orrs	r3, r2
 800707a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	4bb4      	ldr	r3, [pc, #720]	; (8007354 <UART_SetConfig+0x300>)
 8007084:	4013      	ands	r3, r2
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	6812      	ldr	r2, [r2, #0]
 800708a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800708c:	430b      	orrs	r3, r1
 800708e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	68da      	ldr	r2, [r3, #12]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4aa9      	ldr	r2, [pc, #676]	; (8007358 <UART_SetConfig+0x304>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d004      	beq.n	80070c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070bc:	4313      	orrs	r3, r2
 80070be:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070d0:	430a      	orrs	r2, r1
 80070d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4aa0      	ldr	r2, [pc, #640]	; (800735c <UART_SetConfig+0x308>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d126      	bne.n	800712c <UART_SetConfig+0xd8>
 80070de:	4ba0      	ldr	r3, [pc, #640]	; (8007360 <UART_SetConfig+0x30c>)
 80070e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e4:	f003 0303 	and.w	r3, r3, #3
 80070e8:	2b03      	cmp	r3, #3
 80070ea:	d81b      	bhi.n	8007124 <UART_SetConfig+0xd0>
 80070ec:	a201      	add	r2, pc, #4	; (adr r2, 80070f4 <UART_SetConfig+0xa0>)
 80070ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f2:	bf00      	nop
 80070f4:	08007105 	.word	0x08007105
 80070f8:	08007115 	.word	0x08007115
 80070fc:	0800710d 	.word	0x0800710d
 8007100:	0800711d 	.word	0x0800711d
 8007104:	2301      	movs	r3, #1
 8007106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800710a:	e080      	b.n	800720e <UART_SetConfig+0x1ba>
 800710c:	2302      	movs	r3, #2
 800710e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007112:	e07c      	b.n	800720e <UART_SetConfig+0x1ba>
 8007114:	2304      	movs	r3, #4
 8007116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800711a:	e078      	b.n	800720e <UART_SetConfig+0x1ba>
 800711c:	2308      	movs	r3, #8
 800711e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007122:	e074      	b.n	800720e <UART_SetConfig+0x1ba>
 8007124:	2310      	movs	r3, #16
 8007126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800712a:	e070      	b.n	800720e <UART_SetConfig+0x1ba>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a8c      	ldr	r2, [pc, #560]	; (8007364 <UART_SetConfig+0x310>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d138      	bne.n	80071a8 <UART_SetConfig+0x154>
 8007136:	4b8a      	ldr	r3, [pc, #552]	; (8007360 <UART_SetConfig+0x30c>)
 8007138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800713c:	f003 030c 	and.w	r3, r3, #12
 8007140:	2b0c      	cmp	r3, #12
 8007142:	d82d      	bhi.n	80071a0 <UART_SetConfig+0x14c>
 8007144:	a201      	add	r2, pc, #4	; (adr r2, 800714c <UART_SetConfig+0xf8>)
 8007146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714a:	bf00      	nop
 800714c:	08007181 	.word	0x08007181
 8007150:	080071a1 	.word	0x080071a1
 8007154:	080071a1 	.word	0x080071a1
 8007158:	080071a1 	.word	0x080071a1
 800715c:	08007191 	.word	0x08007191
 8007160:	080071a1 	.word	0x080071a1
 8007164:	080071a1 	.word	0x080071a1
 8007168:	080071a1 	.word	0x080071a1
 800716c:	08007189 	.word	0x08007189
 8007170:	080071a1 	.word	0x080071a1
 8007174:	080071a1 	.word	0x080071a1
 8007178:	080071a1 	.word	0x080071a1
 800717c:	08007199 	.word	0x08007199
 8007180:	2300      	movs	r3, #0
 8007182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007186:	e042      	b.n	800720e <UART_SetConfig+0x1ba>
 8007188:	2302      	movs	r3, #2
 800718a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800718e:	e03e      	b.n	800720e <UART_SetConfig+0x1ba>
 8007190:	2304      	movs	r3, #4
 8007192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007196:	e03a      	b.n	800720e <UART_SetConfig+0x1ba>
 8007198:	2308      	movs	r3, #8
 800719a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800719e:	e036      	b.n	800720e <UART_SetConfig+0x1ba>
 80071a0:	2310      	movs	r3, #16
 80071a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071a6:	e032      	b.n	800720e <UART_SetConfig+0x1ba>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a6a      	ldr	r2, [pc, #424]	; (8007358 <UART_SetConfig+0x304>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d12a      	bne.n	8007208 <UART_SetConfig+0x1b4>
 80071b2:	4b6b      	ldr	r3, [pc, #428]	; (8007360 <UART_SetConfig+0x30c>)
 80071b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80071bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071c0:	d01a      	beq.n	80071f8 <UART_SetConfig+0x1a4>
 80071c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071c6:	d81b      	bhi.n	8007200 <UART_SetConfig+0x1ac>
 80071c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071cc:	d00c      	beq.n	80071e8 <UART_SetConfig+0x194>
 80071ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071d2:	d815      	bhi.n	8007200 <UART_SetConfig+0x1ac>
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d003      	beq.n	80071e0 <UART_SetConfig+0x18c>
 80071d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071dc:	d008      	beq.n	80071f0 <UART_SetConfig+0x19c>
 80071de:	e00f      	b.n	8007200 <UART_SetConfig+0x1ac>
 80071e0:	2300      	movs	r3, #0
 80071e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071e6:	e012      	b.n	800720e <UART_SetConfig+0x1ba>
 80071e8:	2302      	movs	r3, #2
 80071ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ee:	e00e      	b.n	800720e <UART_SetConfig+0x1ba>
 80071f0:	2304      	movs	r3, #4
 80071f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071f6:	e00a      	b.n	800720e <UART_SetConfig+0x1ba>
 80071f8:	2308      	movs	r3, #8
 80071fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071fe:	e006      	b.n	800720e <UART_SetConfig+0x1ba>
 8007200:	2310      	movs	r3, #16
 8007202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007206:	e002      	b.n	800720e <UART_SetConfig+0x1ba>
 8007208:	2310      	movs	r3, #16
 800720a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a51      	ldr	r2, [pc, #324]	; (8007358 <UART_SetConfig+0x304>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d17a      	bne.n	800730e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007218:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800721c:	2b08      	cmp	r3, #8
 800721e:	d824      	bhi.n	800726a <UART_SetConfig+0x216>
 8007220:	a201      	add	r2, pc, #4	; (adr r2, 8007228 <UART_SetConfig+0x1d4>)
 8007222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007226:	bf00      	nop
 8007228:	0800724d 	.word	0x0800724d
 800722c:	0800726b 	.word	0x0800726b
 8007230:	08007255 	.word	0x08007255
 8007234:	0800726b 	.word	0x0800726b
 8007238:	0800725b 	.word	0x0800725b
 800723c:	0800726b 	.word	0x0800726b
 8007240:	0800726b 	.word	0x0800726b
 8007244:	0800726b 	.word	0x0800726b
 8007248:	08007263 	.word	0x08007263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800724c:	f7fe fb08 	bl	8005860 <HAL_RCC_GetPCLK1Freq>
 8007250:	61f8      	str	r0, [r7, #28]
        break;
 8007252:	e010      	b.n	8007276 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007254:	4b44      	ldr	r3, [pc, #272]	; (8007368 <UART_SetConfig+0x314>)
 8007256:	61fb      	str	r3, [r7, #28]
        break;
 8007258:	e00d      	b.n	8007276 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800725a:	f7fe fa69 	bl	8005730 <HAL_RCC_GetSysClockFreq>
 800725e:	61f8      	str	r0, [r7, #28]
        break;
 8007260:	e009      	b.n	8007276 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007266:	61fb      	str	r3, [r7, #28]
        break;
 8007268:	e005      	b.n	8007276 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800726a:	2300      	movs	r3, #0
 800726c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007274:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	2b00      	cmp	r3, #0
 800727a:	f000 8107 	beq.w	800748c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	685a      	ldr	r2, [r3, #4]
 8007282:	4613      	mov	r3, r2
 8007284:	005b      	lsls	r3, r3, #1
 8007286:	4413      	add	r3, r2
 8007288:	69fa      	ldr	r2, [r7, #28]
 800728a:	429a      	cmp	r2, r3
 800728c:	d305      	bcc.n	800729a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007294:	69fa      	ldr	r2, [r7, #28]
 8007296:	429a      	cmp	r2, r3
 8007298:	d903      	bls.n	80072a2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80072a0:	e0f4      	b.n	800748c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	2200      	movs	r2, #0
 80072a6:	461c      	mov	r4, r3
 80072a8:	4615      	mov	r5, r2
 80072aa:	f04f 0200 	mov.w	r2, #0
 80072ae:	f04f 0300 	mov.w	r3, #0
 80072b2:	022b      	lsls	r3, r5, #8
 80072b4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80072b8:	0222      	lsls	r2, r4, #8
 80072ba:	68f9      	ldr	r1, [r7, #12]
 80072bc:	6849      	ldr	r1, [r1, #4]
 80072be:	0849      	lsrs	r1, r1, #1
 80072c0:	2000      	movs	r0, #0
 80072c2:	4688      	mov	r8, r1
 80072c4:	4681      	mov	r9, r0
 80072c6:	eb12 0a08 	adds.w	sl, r2, r8
 80072ca:	eb43 0b09 	adc.w	fp, r3, r9
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	603b      	str	r3, [r7, #0]
 80072d6:	607a      	str	r2, [r7, #4]
 80072d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072dc:	4650      	mov	r0, sl
 80072de:	4659      	mov	r1, fp
 80072e0:	f7f9 fc62 	bl	8000ba8 <__aeabi_uldivmod>
 80072e4:	4602      	mov	r2, r0
 80072e6:	460b      	mov	r3, r1
 80072e8:	4613      	mov	r3, r2
 80072ea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072f2:	d308      	bcc.n	8007306 <UART_SetConfig+0x2b2>
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072fa:	d204      	bcs.n	8007306 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	69ba      	ldr	r2, [r7, #24]
 8007302:	60da      	str	r2, [r3, #12]
 8007304:	e0c2      	b.n	800748c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800730c:	e0be      	b.n	800748c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007316:	d16a      	bne.n	80073ee <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8007318:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800731c:	2b08      	cmp	r3, #8
 800731e:	d834      	bhi.n	800738a <UART_SetConfig+0x336>
 8007320:	a201      	add	r2, pc, #4	; (adr r2, 8007328 <UART_SetConfig+0x2d4>)
 8007322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007326:	bf00      	nop
 8007328:	0800734d 	.word	0x0800734d
 800732c:	0800736d 	.word	0x0800736d
 8007330:	08007375 	.word	0x08007375
 8007334:	0800738b 	.word	0x0800738b
 8007338:	0800737b 	.word	0x0800737b
 800733c:	0800738b 	.word	0x0800738b
 8007340:	0800738b 	.word	0x0800738b
 8007344:	0800738b 	.word	0x0800738b
 8007348:	08007383 	.word	0x08007383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800734c:	f7fe fa88 	bl	8005860 <HAL_RCC_GetPCLK1Freq>
 8007350:	61f8      	str	r0, [r7, #28]
        break;
 8007352:	e020      	b.n	8007396 <UART_SetConfig+0x342>
 8007354:	efff69f3 	.word	0xefff69f3
 8007358:	40008000 	.word	0x40008000
 800735c:	40013800 	.word	0x40013800
 8007360:	40021000 	.word	0x40021000
 8007364:	40004400 	.word	0x40004400
 8007368:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800736c:	f7fe fa8e 	bl	800588c <HAL_RCC_GetPCLK2Freq>
 8007370:	61f8      	str	r0, [r7, #28]
        break;
 8007372:	e010      	b.n	8007396 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007374:	4b4c      	ldr	r3, [pc, #304]	; (80074a8 <UART_SetConfig+0x454>)
 8007376:	61fb      	str	r3, [r7, #28]
        break;
 8007378:	e00d      	b.n	8007396 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800737a:	f7fe f9d9 	bl	8005730 <HAL_RCC_GetSysClockFreq>
 800737e:	61f8      	str	r0, [r7, #28]
        break;
 8007380:	e009      	b.n	8007396 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007386:	61fb      	str	r3, [r7, #28]
        break;
 8007388:	e005      	b.n	8007396 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800738a:	2300      	movs	r3, #0
 800738c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007394:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d077      	beq.n	800748c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	005a      	lsls	r2, r3, #1
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	085b      	lsrs	r3, r3, #1
 80073a6:	441a      	add	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80073b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	2b0f      	cmp	r3, #15
 80073b6:	d916      	bls.n	80073e6 <UART_SetConfig+0x392>
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073be:	d212      	bcs.n	80073e6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	f023 030f 	bic.w	r3, r3, #15
 80073c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	085b      	lsrs	r3, r3, #1
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	f003 0307 	and.w	r3, r3, #7
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	8afb      	ldrh	r3, [r7, #22]
 80073d8:	4313      	orrs	r3, r2
 80073da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	8afa      	ldrh	r2, [r7, #22]
 80073e2:	60da      	str	r2, [r3, #12]
 80073e4:	e052      	b.n	800748c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80073ec:	e04e      	b.n	800748c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073f2:	2b08      	cmp	r3, #8
 80073f4:	d827      	bhi.n	8007446 <UART_SetConfig+0x3f2>
 80073f6:	a201      	add	r2, pc, #4	; (adr r2, 80073fc <UART_SetConfig+0x3a8>)
 80073f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fc:	08007421 	.word	0x08007421
 8007400:	08007429 	.word	0x08007429
 8007404:	08007431 	.word	0x08007431
 8007408:	08007447 	.word	0x08007447
 800740c:	08007437 	.word	0x08007437
 8007410:	08007447 	.word	0x08007447
 8007414:	08007447 	.word	0x08007447
 8007418:	08007447 	.word	0x08007447
 800741c:	0800743f 	.word	0x0800743f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007420:	f7fe fa1e 	bl	8005860 <HAL_RCC_GetPCLK1Freq>
 8007424:	61f8      	str	r0, [r7, #28]
        break;
 8007426:	e014      	b.n	8007452 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007428:	f7fe fa30 	bl	800588c <HAL_RCC_GetPCLK2Freq>
 800742c:	61f8      	str	r0, [r7, #28]
        break;
 800742e:	e010      	b.n	8007452 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007430:	4b1d      	ldr	r3, [pc, #116]	; (80074a8 <UART_SetConfig+0x454>)
 8007432:	61fb      	str	r3, [r7, #28]
        break;
 8007434:	e00d      	b.n	8007452 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007436:	f7fe f97b 	bl	8005730 <HAL_RCC_GetSysClockFreq>
 800743a:	61f8      	str	r0, [r7, #28]
        break;
 800743c:	e009      	b.n	8007452 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800743e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007442:	61fb      	str	r3, [r7, #28]
        break;
 8007444:	e005      	b.n	8007452 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007450:	bf00      	nop
    }

    if (pclk != 0U)
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d019      	beq.n	800748c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	085a      	lsrs	r2, r3, #1
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	441a      	add	r2, r3
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	fbb2 f3f3 	udiv	r3, r2, r3
 800746a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	2b0f      	cmp	r3, #15
 8007470:	d909      	bls.n	8007486 <UART_SetConfig+0x432>
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007478:	d205      	bcs.n	8007486 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	b29a      	uxth	r2, r3
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	60da      	str	r2, [r3, #12]
 8007484:	e002      	b.n	800748c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007498:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800749c:	4618      	mov	r0, r3
 800749e:	3728      	adds	r7, #40	; 0x28
 80074a0:	46bd      	mov	sp, r7
 80074a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074a6:	bf00      	nop
 80074a8:	00f42400 	.word	0x00f42400

080074ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b8:	f003 0308 	and.w	r3, r3, #8
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00a      	beq.n	80074d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	430a      	orrs	r2, r1
 80074d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00a      	beq.n	80074f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	430a      	orrs	r2, r1
 80074f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fc:	f003 0302 	and.w	r3, r3, #2
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00a      	beq.n	800751a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	430a      	orrs	r2, r1
 8007518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751e:	f003 0304 	and.w	r3, r3, #4
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00a      	beq.n	800753c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	430a      	orrs	r2, r1
 800753a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007540:	f003 0310 	and.w	r3, r3, #16
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00a      	beq.n	800755e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	430a      	orrs	r2, r1
 800755c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007562:	f003 0320 	and.w	r3, r3, #32
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00a      	beq.n	8007580 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	430a      	orrs	r2, r1
 800757e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007588:	2b00      	cmp	r3, #0
 800758a:	d01a      	beq.n	80075c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	430a      	orrs	r2, r1
 80075a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075aa:	d10a      	bne.n	80075c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	430a      	orrs	r2, r1
 80075c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00a      	beq.n	80075e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	430a      	orrs	r2, r1
 80075e2:	605a      	str	r2, [r3, #4]
  }
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b098      	sub	sp, #96	; 0x60
 80075f4:	af02      	add	r7, sp, #8
 80075f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007600:	f7fa feb0 	bl	8002364 <HAL_GetTick>
 8007604:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 0308 	and.w	r3, r3, #8
 8007610:	2b08      	cmp	r3, #8
 8007612:	d12e      	bne.n	8007672 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007614:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800761c:	2200      	movs	r2, #0
 800761e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f88c 	bl	8007740 <UART_WaitOnFlagUntilTimeout>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d021      	beq.n	8007672 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007636:	e853 3f00 	ldrex	r3, [r3]
 800763a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800763c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800763e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007642:	653b      	str	r3, [r7, #80]	; 0x50
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	461a      	mov	r2, r3
 800764a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800764c:	647b      	str	r3, [r7, #68]	; 0x44
 800764e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007650:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007652:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007654:	e841 2300 	strex	r3, r2, [r1]
 8007658:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800765a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e6      	bne.n	800762e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2220      	movs	r2, #32
 8007664:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e062      	b.n	8007738 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0304 	and.w	r3, r3, #4
 800767c:	2b04      	cmp	r3, #4
 800767e:	d149      	bne.n	8007714 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007680:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007688:	2200      	movs	r2, #0
 800768a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f856 	bl	8007740 <UART_WaitOnFlagUntilTimeout>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d03c      	beq.n	8007714 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a2:	e853 3f00 	ldrex	r3, [r3]
 80076a6:	623b      	str	r3, [r7, #32]
   return(result);
 80076a8:	6a3b      	ldr	r3, [r7, #32]
 80076aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	461a      	mov	r2, r3
 80076b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076b8:	633b      	str	r3, [r7, #48]	; 0x30
 80076ba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076c0:	e841 2300 	strex	r3, r2, [r1]
 80076c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1e6      	bne.n	800769a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	3308      	adds	r3, #8
 80076d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	e853 3f00 	ldrex	r3, [r3]
 80076da:	60fb      	str	r3, [r7, #12]
   return(result);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f023 0301 	bic.w	r3, r3, #1
 80076e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	3308      	adds	r3, #8
 80076ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076ec:	61fa      	str	r2, [r7, #28]
 80076ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f0:	69b9      	ldr	r1, [r7, #24]
 80076f2:	69fa      	ldr	r2, [r7, #28]
 80076f4:	e841 2300 	strex	r3, r2, [r1]
 80076f8:	617b      	str	r3, [r7, #20]
   return(result);
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1e5      	bne.n	80076cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2220      	movs	r2, #32
 8007704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007710:	2303      	movs	r3, #3
 8007712:	e011      	b.n	8007738 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2220      	movs	r2, #32
 8007718:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2220      	movs	r2, #32
 800771e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3758      	adds	r7, #88	; 0x58
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	603b      	str	r3, [r7, #0]
 800774c:	4613      	mov	r3, r2
 800774e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007750:	e049      	b.n	80077e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007758:	d045      	beq.n	80077e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800775a:	f7fa fe03 	bl	8002364 <HAL_GetTick>
 800775e:	4602      	mov	r2, r0
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	69ba      	ldr	r2, [r7, #24]
 8007766:	429a      	cmp	r2, r3
 8007768:	d302      	bcc.n	8007770 <UART_WaitOnFlagUntilTimeout+0x30>
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d101      	bne.n	8007774 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e048      	b.n	8007806 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 0304 	and.w	r3, r3, #4
 800777e:	2b00      	cmp	r3, #0
 8007780:	d031      	beq.n	80077e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	69db      	ldr	r3, [r3, #28]
 8007788:	f003 0308 	and.w	r3, r3, #8
 800778c:	2b08      	cmp	r3, #8
 800778e:	d110      	bne.n	80077b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2208      	movs	r2, #8
 8007796:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f000 f838 	bl	800780e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2208      	movs	r2, #8
 80077a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e029      	b.n	8007806 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	69db      	ldr	r3, [r3, #28]
 80077b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077c0:	d111      	bne.n	80077e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 f81e 	bl	800780e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2220      	movs	r2, #32
 80077d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80077e2:	2303      	movs	r3, #3
 80077e4:	e00f      	b.n	8007806 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	69da      	ldr	r2, [r3, #28]
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	4013      	ands	r3, r2
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	bf0c      	ite	eq
 80077f6:	2301      	moveq	r3, #1
 80077f8:	2300      	movne	r3, #0
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	461a      	mov	r2, r3
 80077fe:	79fb      	ldrb	r3, [r7, #7]
 8007800:	429a      	cmp	r2, r3
 8007802:	d0a6      	beq.n	8007752 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800780e:	b480      	push	{r7}
 8007810:	b095      	sub	sp, #84	; 0x54
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800781e:	e853 3f00 	ldrex	r3, [r3]
 8007822:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007826:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800782a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	461a      	mov	r2, r3
 8007832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007834:	643b      	str	r3, [r7, #64]	; 0x40
 8007836:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007838:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800783a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800783c:	e841 2300 	strex	r3, r2, [r1]
 8007840:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1e6      	bne.n	8007816 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	3308      	adds	r3, #8
 800784e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007850:	6a3b      	ldr	r3, [r7, #32]
 8007852:	e853 3f00 	ldrex	r3, [r3]
 8007856:	61fb      	str	r3, [r7, #28]
   return(result);
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	f023 0301 	bic.w	r3, r3, #1
 800785e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	3308      	adds	r3, #8
 8007866:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007868:	62fa      	str	r2, [r7, #44]	; 0x2c
 800786a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800786e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007870:	e841 2300 	strex	r3, r2, [r1]
 8007874:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1e5      	bne.n	8007848 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007880:	2b01      	cmp	r3, #1
 8007882:	d118      	bne.n	80078b6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	e853 3f00 	ldrex	r3, [r3]
 8007890:	60bb      	str	r3, [r7, #8]
   return(result);
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	f023 0310 	bic.w	r3, r3, #16
 8007898:	647b      	str	r3, [r7, #68]	; 0x44
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	461a      	mov	r2, r3
 80078a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078a2:	61bb      	str	r3, [r7, #24]
 80078a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a6:	6979      	ldr	r1, [r7, #20]
 80078a8:	69ba      	ldr	r2, [r7, #24]
 80078aa:	e841 2300 	strex	r3, r2, [r1]
 80078ae:	613b      	str	r3, [r7, #16]
   return(result);
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1e6      	bne.n	8007884 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2220      	movs	r2, #32
 80078ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80078ca:	bf00      	nop
 80078cc:	3754      	adds	r7, #84	; 0x54
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <__cvt>:
 80078d6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078da:	ec55 4b10 	vmov	r4, r5, d0
 80078de:	2d00      	cmp	r5, #0
 80078e0:	460e      	mov	r6, r1
 80078e2:	4619      	mov	r1, r3
 80078e4:	462b      	mov	r3, r5
 80078e6:	bfbb      	ittet	lt
 80078e8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80078ec:	461d      	movlt	r5, r3
 80078ee:	2300      	movge	r3, #0
 80078f0:	232d      	movlt	r3, #45	; 0x2d
 80078f2:	700b      	strb	r3, [r1, #0]
 80078f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078f6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80078fa:	4691      	mov	r9, r2
 80078fc:	f023 0820 	bic.w	r8, r3, #32
 8007900:	bfbc      	itt	lt
 8007902:	4622      	movlt	r2, r4
 8007904:	4614      	movlt	r4, r2
 8007906:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800790a:	d005      	beq.n	8007918 <__cvt+0x42>
 800790c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007910:	d100      	bne.n	8007914 <__cvt+0x3e>
 8007912:	3601      	adds	r6, #1
 8007914:	2102      	movs	r1, #2
 8007916:	e000      	b.n	800791a <__cvt+0x44>
 8007918:	2103      	movs	r1, #3
 800791a:	ab03      	add	r3, sp, #12
 800791c:	9301      	str	r3, [sp, #4]
 800791e:	ab02      	add	r3, sp, #8
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	ec45 4b10 	vmov	d0, r4, r5
 8007926:	4653      	mov	r3, sl
 8007928:	4632      	mov	r2, r6
 800792a:	f000 fe69 	bl	8008600 <_dtoa_r>
 800792e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007932:	4607      	mov	r7, r0
 8007934:	d102      	bne.n	800793c <__cvt+0x66>
 8007936:	f019 0f01 	tst.w	r9, #1
 800793a:	d022      	beq.n	8007982 <__cvt+0xac>
 800793c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007940:	eb07 0906 	add.w	r9, r7, r6
 8007944:	d110      	bne.n	8007968 <__cvt+0x92>
 8007946:	783b      	ldrb	r3, [r7, #0]
 8007948:	2b30      	cmp	r3, #48	; 0x30
 800794a:	d10a      	bne.n	8007962 <__cvt+0x8c>
 800794c:	2200      	movs	r2, #0
 800794e:	2300      	movs	r3, #0
 8007950:	4620      	mov	r0, r4
 8007952:	4629      	mov	r1, r5
 8007954:	f7f9 f8b8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007958:	b918      	cbnz	r0, 8007962 <__cvt+0x8c>
 800795a:	f1c6 0601 	rsb	r6, r6, #1
 800795e:	f8ca 6000 	str.w	r6, [sl]
 8007962:	f8da 3000 	ldr.w	r3, [sl]
 8007966:	4499      	add	r9, r3
 8007968:	2200      	movs	r2, #0
 800796a:	2300      	movs	r3, #0
 800796c:	4620      	mov	r0, r4
 800796e:	4629      	mov	r1, r5
 8007970:	f7f9 f8aa 	bl	8000ac8 <__aeabi_dcmpeq>
 8007974:	b108      	cbz	r0, 800797a <__cvt+0xa4>
 8007976:	f8cd 900c 	str.w	r9, [sp, #12]
 800797a:	2230      	movs	r2, #48	; 0x30
 800797c:	9b03      	ldr	r3, [sp, #12]
 800797e:	454b      	cmp	r3, r9
 8007980:	d307      	bcc.n	8007992 <__cvt+0xbc>
 8007982:	9b03      	ldr	r3, [sp, #12]
 8007984:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007986:	1bdb      	subs	r3, r3, r7
 8007988:	4638      	mov	r0, r7
 800798a:	6013      	str	r3, [r2, #0]
 800798c:	b004      	add	sp, #16
 800798e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007992:	1c59      	adds	r1, r3, #1
 8007994:	9103      	str	r1, [sp, #12]
 8007996:	701a      	strb	r2, [r3, #0]
 8007998:	e7f0      	b.n	800797c <__cvt+0xa6>

0800799a <__exponent>:
 800799a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800799c:	4603      	mov	r3, r0
 800799e:	2900      	cmp	r1, #0
 80079a0:	bfb8      	it	lt
 80079a2:	4249      	neglt	r1, r1
 80079a4:	f803 2b02 	strb.w	r2, [r3], #2
 80079a8:	bfb4      	ite	lt
 80079aa:	222d      	movlt	r2, #45	; 0x2d
 80079ac:	222b      	movge	r2, #43	; 0x2b
 80079ae:	2909      	cmp	r1, #9
 80079b0:	7042      	strb	r2, [r0, #1]
 80079b2:	dd2a      	ble.n	8007a0a <__exponent+0x70>
 80079b4:	f10d 0207 	add.w	r2, sp, #7
 80079b8:	4617      	mov	r7, r2
 80079ba:	260a      	movs	r6, #10
 80079bc:	4694      	mov	ip, r2
 80079be:	fb91 f5f6 	sdiv	r5, r1, r6
 80079c2:	fb06 1415 	mls	r4, r6, r5, r1
 80079c6:	3430      	adds	r4, #48	; 0x30
 80079c8:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80079cc:	460c      	mov	r4, r1
 80079ce:	2c63      	cmp	r4, #99	; 0x63
 80079d0:	f102 32ff 	add.w	r2, r2, #4294967295
 80079d4:	4629      	mov	r1, r5
 80079d6:	dcf1      	bgt.n	80079bc <__exponent+0x22>
 80079d8:	3130      	adds	r1, #48	; 0x30
 80079da:	f1ac 0402 	sub.w	r4, ip, #2
 80079de:	f802 1c01 	strb.w	r1, [r2, #-1]
 80079e2:	1c41      	adds	r1, r0, #1
 80079e4:	4622      	mov	r2, r4
 80079e6:	42ba      	cmp	r2, r7
 80079e8:	d30a      	bcc.n	8007a00 <__exponent+0x66>
 80079ea:	f10d 0209 	add.w	r2, sp, #9
 80079ee:	eba2 020c 	sub.w	r2, r2, ip
 80079f2:	42bc      	cmp	r4, r7
 80079f4:	bf88      	it	hi
 80079f6:	2200      	movhi	r2, #0
 80079f8:	4413      	add	r3, r2
 80079fa:	1a18      	subs	r0, r3, r0
 80079fc:	b003      	add	sp, #12
 80079fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a00:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007a04:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007a08:	e7ed      	b.n	80079e6 <__exponent+0x4c>
 8007a0a:	2330      	movs	r3, #48	; 0x30
 8007a0c:	3130      	adds	r1, #48	; 0x30
 8007a0e:	7083      	strb	r3, [r0, #2]
 8007a10:	70c1      	strb	r1, [r0, #3]
 8007a12:	1d03      	adds	r3, r0, #4
 8007a14:	e7f1      	b.n	80079fa <__exponent+0x60>
	...

08007a18 <_printf_float>:
 8007a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1c:	ed2d 8b02 	vpush	{d8}
 8007a20:	b08d      	sub	sp, #52	; 0x34
 8007a22:	460c      	mov	r4, r1
 8007a24:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007a28:	4616      	mov	r6, r2
 8007a2a:	461f      	mov	r7, r3
 8007a2c:	4605      	mov	r5, r0
 8007a2e:	f000 fce7 	bl	8008400 <_localeconv_r>
 8007a32:	f8d0 a000 	ldr.w	sl, [r0]
 8007a36:	4650      	mov	r0, sl
 8007a38:	f7f8 fc1a 	bl	8000270 <strlen>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	930a      	str	r3, [sp, #40]	; 0x28
 8007a40:	6823      	ldr	r3, [r4, #0]
 8007a42:	9305      	str	r3, [sp, #20]
 8007a44:	f8d8 3000 	ldr.w	r3, [r8]
 8007a48:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007a4c:	3307      	adds	r3, #7
 8007a4e:	f023 0307 	bic.w	r3, r3, #7
 8007a52:	f103 0208 	add.w	r2, r3, #8
 8007a56:	f8c8 2000 	str.w	r2, [r8]
 8007a5a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a62:	9307      	str	r3, [sp, #28]
 8007a64:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a68:	ee08 0a10 	vmov	s16, r0
 8007a6c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007a70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a74:	4b9e      	ldr	r3, [pc, #632]	; (8007cf0 <_printf_float+0x2d8>)
 8007a76:	f04f 32ff 	mov.w	r2, #4294967295
 8007a7a:	f7f9 f857 	bl	8000b2c <__aeabi_dcmpun>
 8007a7e:	bb88      	cbnz	r0, 8007ae4 <_printf_float+0xcc>
 8007a80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a84:	4b9a      	ldr	r3, [pc, #616]	; (8007cf0 <_printf_float+0x2d8>)
 8007a86:	f04f 32ff 	mov.w	r2, #4294967295
 8007a8a:	f7f9 f831 	bl	8000af0 <__aeabi_dcmple>
 8007a8e:	bb48      	cbnz	r0, 8007ae4 <_printf_float+0xcc>
 8007a90:	2200      	movs	r2, #0
 8007a92:	2300      	movs	r3, #0
 8007a94:	4640      	mov	r0, r8
 8007a96:	4649      	mov	r1, r9
 8007a98:	f7f9 f820 	bl	8000adc <__aeabi_dcmplt>
 8007a9c:	b110      	cbz	r0, 8007aa4 <_printf_float+0x8c>
 8007a9e:	232d      	movs	r3, #45	; 0x2d
 8007aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007aa4:	4a93      	ldr	r2, [pc, #588]	; (8007cf4 <_printf_float+0x2dc>)
 8007aa6:	4b94      	ldr	r3, [pc, #592]	; (8007cf8 <_printf_float+0x2e0>)
 8007aa8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007aac:	bf94      	ite	ls
 8007aae:	4690      	movls	r8, r2
 8007ab0:	4698      	movhi	r8, r3
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	6123      	str	r3, [r4, #16]
 8007ab6:	9b05      	ldr	r3, [sp, #20]
 8007ab8:	f023 0304 	bic.w	r3, r3, #4
 8007abc:	6023      	str	r3, [r4, #0]
 8007abe:	f04f 0900 	mov.w	r9, #0
 8007ac2:	9700      	str	r7, [sp, #0]
 8007ac4:	4633      	mov	r3, r6
 8007ac6:	aa0b      	add	r2, sp, #44	; 0x2c
 8007ac8:	4621      	mov	r1, r4
 8007aca:	4628      	mov	r0, r5
 8007acc:	f000 f9da 	bl	8007e84 <_printf_common>
 8007ad0:	3001      	adds	r0, #1
 8007ad2:	f040 8090 	bne.w	8007bf6 <_printf_float+0x1de>
 8007ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8007ada:	b00d      	add	sp, #52	; 0x34
 8007adc:	ecbd 8b02 	vpop	{d8}
 8007ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae4:	4642      	mov	r2, r8
 8007ae6:	464b      	mov	r3, r9
 8007ae8:	4640      	mov	r0, r8
 8007aea:	4649      	mov	r1, r9
 8007aec:	f7f9 f81e 	bl	8000b2c <__aeabi_dcmpun>
 8007af0:	b140      	cbz	r0, 8007b04 <_printf_float+0xec>
 8007af2:	464b      	mov	r3, r9
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	bfbc      	itt	lt
 8007af8:	232d      	movlt	r3, #45	; 0x2d
 8007afa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007afe:	4a7f      	ldr	r2, [pc, #508]	; (8007cfc <_printf_float+0x2e4>)
 8007b00:	4b7f      	ldr	r3, [pc, #508]	; (8007d00 <_printf_float+0x2e8>)
 8007b02:	e7d1      	b.n	8007aa8 <_printf_float+0x90>
 8007b04:	6863      	ldr	r3, [r4, #4]
 8007b06:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007b0a:	9206      	str	r2, [sp, #24]
 8007b0c:	1c5a      	adds	r2, r3, #1
 8007b0e:	d13f      	bne.n	8007b90 <_printf_float+0x178>
 8007b10:	2306      	movs	r3, #6
 8007b12:	6063      	str	r3, [r4, #4]
 8007b14:	9b05      	ldr	r3, [sp, #20]
 8007b16:	6861      	ldr	r1, [r4, #4]
 8007b18:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	9303      	str	r3, [sp, #12]
 8007b20:	ab0a      	add	r3, sp, #40	; 0x28
 8007b22:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007b26:	ab09      	add	r3, sp, #36	; 0x24
 8007b28:	ec49 8b10 	vmov	d0, r8, r9
 8007b2c:	9300      	str	r3, [sp, #0]
 8007b2e:	6022      	str	r2, [r4, #0]
 8007b30:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007b34:	4628      	mov	r0, r5
 8007b36:	f7ff fece 	bl	80078d6 <__cvt>
 8007b3a:	9b06      	ldr	r3, [sp, #24]
 8007b3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b3e:	2b47      	cmp	r3, #71	; 0x47
 8007b40:	4680      	mov	r8, r0
 8007b42:	d108      	bne.n	8007b56 <_printf_float+0x13e>
 8007b44:	1cc8      	adds	r0, r1, #3
 8007b46:	db02      	blt.n	8007b4e <_printf_float+0x136>
 8007b48:	6863      	ldr	r3, [r4, #4]
 8007b4a:	4299      	cmp	r1, r3
 8007b4c:	dd41      	ble.n	8007bd2 <_printf_float+0x1ba>
 8007b4e:	f1ab 0302 	sub.w	r3, fp, #2
 8007b52:	fa5f fb83 	uxtb.w	fp, r3
 8007b56:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b5a:	d820      	bhi.n	8007b9e <_printf_float+0x186>
 8007b5c:	3901      	subs	r1, #1
 8007b5e:	465a      	mov	r2, fp
 8007b60:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007b64:	9109      	str	r1, [sp, #36]	; 0x24
 8007b66:	f7ff ff18 	bl	800799a <__exponent>
 8007b6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b6c:	1813      	adds	r3, r2, r0
 8007b6e:	2a01      	cmp	r2, #1
 8007b70:	4681      	mov	r9, r0
 8007b72:	6123      	str	r3, [r4, #16]
 8007b74:	dc02      	bgt.n	8007b7c <_printf_float+0x164>
 8007b76:	6822      	ldr	r2, [r4, #0]
 8007b78:	07d2      	lsls	r2, r2, #31
 8007b7a:	d501      	bpl.n	8007b80 <_printf_float+0x168>
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	6123      	str	r3, [r4, #16]
 8007b80:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d09c      	beq.n	8007ac2 <_printf_float+0xaa>
 8007b88:	232d      	movs	r3, #45	; 0x2d
 8007b8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b8e:	e798      	b.n	8007ac2 <_printf_float+0xaa>
 8007b90:	9a06      	ldr	r2, [sp, #24]
 8007b92:	2a47      	cmp	r2, #71	; 0x47
 8007b94:	d1be      	bne.n	8007b14 <_printf_float+0xfc>
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1bc      	bne.n	8007b14 <_printf_float+0xfc>
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e7b9      	b.n	8007b12 <_printf_float+0xfa>
 8007b9e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007ba2:	d118      	bne.n	8007bd6 <_printf_float+0x1be>
 8007ba4:	2900      	cmp	r1, #0
 8007ba6:	6863      	ldr	r3, [r4, #4]
 8007ba8:	dd0b      	ble.n	8007bc2 <_printf_float+0x1aa>
 8007baa:	6121      	str	r1, [r4, #16]
 8007bac:	b913      	cbnz	r3, 8007bb4 <_printf_float+0x19c>
 8007bae:	6822      	ldr	r2, [r4, #0]
 8007bb0:	07d0      	lsls	r0, r2, #31
 8007bb2:	d502      	bpl.n	8007bba <_printf_float+0x1a2>
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	440b      	add	r3, r1
 8007bb8:	6123      	str	r3, [r4, #16]
 8007bba:	65a1      	str	r1, [r4, #88]	; 0x58
 8007bbc:	f04f 0900 	mov.w	r9, #0
 8007bc0:	e7de      	b.n	8007b80 <_printf_float+0x168>
 8007bc2:	b913      	cbnz	r3, 8007bca <_printf_float+0x1b2>
 8007bc4:	6822      	ldr	r2, [r4, #0]
 8007bc6:	07d2      	lsls	r2, r2, #31
 8007bc8:	d501      	bpl.n	8007bce <_printf_float+0x1b6>
 8007bca:	3302      	adds	r3, #2
 8007bcc:	e7f4      	b.n	8007bb8 <_printf_float+0x1a0>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e7f2      	b.n	8007bb8 <_printf_float+0x1a0>
 8007bd2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd8:	4299      	cmp	r1, r3
 8007bda:	db05      	blt.n	8007be8 <_printf_float+0x1d0>
 8007bdc:	6823      	ldr	r3, [r4, #0]
 8007bde:	6121      	str	r1, [r4, #16]
 8007be0:	07d8      	lsls	r0, r3, #31
 8007be2:	d5ea      	bpl.n	8007bba <_printf_float+0x1a2>
 8007be4:	1c4b      	adds	r3, r1, #1
 8007be6:	e7e7      	b.n	8007bb8 <_printf_float+0x1a0>
 8007be8:	2900      	cmp	r1, #0
 8007bea:	bfd4      	ite	le
 8007bec:	f1c1 0202 	rsble	r2, r1, #2
 8007bf0:	2201      	movgt	r2, #1
 8007bf2:	4413      	add	r3, r2
 8007bf4:	e7e0      	b.n	8007bb8 <_printf_float+0x1a0>
 8007bf6:	6823      	ldr	r3, [r4, #0]
 8007bf8:	055a      	lsls	r2, r3, #21
 8007bfa:	d407      	bmi.n	8007c0c <_printf_float+0x1f4>
 8007bfc:	6923      	ldr	r3, [r4, #16]
 8007bfe:	4642      	mov	r2, r8
 8007c00:	4631      	mov	r1, r6
 8007c02:	4628      	mov	r0, r5
 8007c04:	47b8      	blx	r7
 8007c06:	3001      	adds	r0, #1
 8007c08:	d12c      	bne.n	8007c64 <_printf_float+0x24c>
 8007c0a:	e764      	b.n	8007ad6 <_printf_float+0xbe>
 8007c0c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007c10:	f240 80e0 	bls.w	8007dd4 <_printf_float+0x3bc>
 8007c14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c18:	2200      	movs	r2, #0
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	f7f8 ff54 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c20:	2800      	cmp	r0, #0
 8007c22:	d034      	beq.n	8007c8e <_printf_float+0x276>
 8007c24:	4a37      	ldr	r2, [pc, #220]	; (8007d04 <_printf_float+0x2ec>)
 8007c26:	2301      	movs	r3, #1
 8007c28:	4631      	mov	r1, r6
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	47b8      	blx	r7
 8007c2e:	3001      	adds	r0, #1
 8007c30:	f43f af51 	beq.w	8007ad6 <_printf_float+0xbe>
 8007c34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	db02      	blt.n	8007c42 <_printf_float+0x22a>
 8007c3c:	6823      	ldr	r3, [r4, #0]
 8007c3e:	07d8      	lsls	r0, r3, #31
 8007c40:	d510      	bpl.n	8007c64 <_printf_float+0x24c>
 8007c42:	ee18 3a10 	vmov	r3, s16
 8007c46:	4652      	mov	r2, sl
 8007c48:	4631      	mov	r1, r6
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	47b8      	blx	r7
 8007c4e:	3001      	adds	r0, #1
 8007c50:	f43f af41 	beq.w	8007ad6 <_printf_float+0xbe>
 8007c54:	f04f 0800 	mov.w	r8, #0
 8007c58:	f104 091a 	add.w	r9, r4, #26
 8007c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	4543      	cmp	r3, r8
 8007c62:	dc09      	bgt.n	8007c78 <_printf_float+0x260>
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	079b      	lsls	r3, r3, #30
 8007c68:	f100 8107 	bmi.w	8007e7a <_printf_float+0x462>
 8007c6c:	68e0      	ldr	r0, [r4, #12]
 8007c6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c70:	4298      	cmp	r0, r3
 8007c72:	bfb8      	it	lt
 8007c74:	4618      	movlt	r0, r3
 8007c76:	e730      	b.n	8007ada <_printf_float+0xc2>
 8007c78:	2301      	movs	r3, #1
 8007c7a:	464a      	mov	r2, r9
 8007c7c:	4631      	mov	r1, r6
 8007c7e:	4628      	mov	r0, r5
 8007c80:	47b8      	blx	r7
 8007c82:	3001      	adds	r0, #1
 8007c84:	f43f af27 	beq.w	8007ad6 <_printf_float+0xbe>
 8007c88:	f108 0801 	add.w	r8, r8, #1
 8007c8c:	e7e6      	b.n	8007c5c <_printf_float+0x244>
 8007c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	dc39      	bgt.n	8007d08 <_printf_float+0x2f0>
 8007c94:	4a1b      	ldr	r2, [pc, #108]	; (8007d04 <_printf_float+0x2ec>)
 8007c96:	2301      	movs	r3, #1
 8007c98:	4631      	mov	r1, r6
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	47b8      	blx	r7
 8007c9e:	3001      	adds	r0, #1
 8007ca0:	f43f af19 	beq.w	8007ad6 <_printf_float+0xbe>
 8007ca4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	d102      	bne.n	8007cb2 <_printf_float+0x29a>
 8007cac:	6823      	ldr	r3, [r4, #0]
 8007cae:	07d9      	lsls	r1, r3, #31
 8007cb0:	d5d8      	bpl.n	8007c64 <_printf_float+0x24c>
 8007cb2:	ee18 3a10 	vmov	r3, s16
 8007cb6:	4652      	mov	r2, sl
 8007cb8:	4631      	mov	r1, r6
 8007cba:	4628      	mov	r0, r5
 8007cbc:	47b8      	blx	r7
 8007cbe:	3001      	adds	r0, #1
 8007cc0:	f43f af09 	beq.w	8007ad6 <_printf_float+0xbe>
 8007cc4:	f04f 0900 	mov.w	r9, #0
 8007cc8:	f104 0a1a 	add.w	sl, r4, #26
 8007ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cce:	425b      	negs	r3, r3
 8007cd0:	454b      	cmp	r3, r9
 8007cd2:	dc01      	bgt.n	8007cd8 <_printf_float+0x2c0>
 8007cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cd6:	e792      	b.n	8007bfe <_printf_float+0x1e6>
 8007cd8:	2301      	movs	r3, #1
 8007cda:	4652      	mov	r2, sl
 8007cdc:	4631      	mov	r1, r6
 8007cde:	4628      	mov	r0, r5
 8007ce0:	47b8      	blx	r7
 8007ce2:	3001      	adds	r0, #1
 8007ce4:	f43f aef7 	beq.w	8007ad6 <_printf_float+0xbe>
 8007ce8:	f109 0901 	add.w	r9, r9, #1
 8007cec:	e7ee      	b.n	8007ccc <_printf_float+0x2b4>
 8007cee:	bf00      	nop
 8007cf0:	7fefffff 	.word	0x7fefffff
 8007cf4:	0800a6bc 	.word	0x0800a6bc
 8007cf8:	0800a6c0 	.word	0x0800a6c0
 8007cfc:	0800a6c4 	.word	0x0800a6c4
 8007d00:	0800a6c8 	.word	0x0800a6c8
 8007d04:	0800a6cc 	.word	0x0800a6cc
 8007d08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	bfa8      	it	ge
 8007d10:	461a      	movge	r2, r3
 8007d12:	2a00      	cmp	r2, #0
 8007d14:	4691      	mov	r9, r2
 8007d16:	dc37      	bgt.n	8007d88 <_printf_float+0x370>
 8007d18:	f04f 0b00 	mov.w	fp, #0
 8007d1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d20:	f104 021a 	add.w	r2, r4, #26
 8007d24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d26:	9305      	str	r3, [sp, #20]
 8007d28:	eba3 0309 	sub.w	r3, r3, r9
 8007d2c:	455b      	cmp	r3, fp
 8007d2e:	dc33      	bgt.n	8007d98 <_printf_float+0x380>
 8007d30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d34:	429a      	cmp	r2, r3
 8007d36:	db3b      	blt.n	8007db0 <_printf_float+0x398>
 8007d38:	6823      	ldr	r3, [r4, #0]
 8007d3a:	07da      	lsls	r2, r3, #31
 8007d3c:	d438      	bmi.n	8007db0 <_printf_float+0x398>
 8007d3e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007d42:	eba2 0903 	sub.w	r9, r2, r3
 8007d46:	9b05      	ldr	r3, [sp, #20]
 8007d48:	1ad2      	subs	r2, r2, r3
 8007d4a:	4591      	cmp	r9, r2
 8007d4c:	bfa8      	it	ge
 8007d4e:	4691      	movge	r9, r2
 8007d50:	f1b9 0f00 	cmp.w	r9, #0
 8007d54:	dc35      	bgt.n	8007dc2 <_printf_float+0x3aa>
 8007d56:	f04f 0800 	mov.w	r8, #0
 8007d5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d5e:	f104 0a1a 	add.w	sl, r4, #26
 8007d62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d66:	1a9b      	subs	r3, r3, r2
 8007d68:	eba3 0309 	sub.w	r3, r3, r9
 8007d6c:	4543      	cmp	r3, r8
 8007d6e:	f77f af79 	ble.w	8007c64 <_printf_float+0x24c>
 8007d72:	2301      	movs	r3, #1
 8007d74:	4652      	mov	r2, sl
 8007d76:	4631      	mov	r1, r6
 8007d78:	4628      	mov	r0, r5
 8007d7a:	47b8      	blx	r7
 8007d7c:	3001      	adds	r0, #1
 8007d7e:	f43f aeaa 	beq.w	8007ad6 <_printf_float+0xbe>
 8007d82:	f108 0801 	add.w	r8, r8, #1
 8007d86:	e7ec      	b.n	8007d62 <_printf_float+0x34a>
 8007d88:	4613      	mov	r3, r2
 8007d8a:	4631      	mov	r1, r6
 8007d8c:	4642      	mov	r2, r8
 8007d8e:	4628      	mov	r0, r5
 8007d90:	47b8      	blx	r7
 8007d92:	3001      	adds	r0, #1
 8007d94:	d1c0      	bne.n	8007d18 <_printf_float+0x300>
 8007d96:	e69e      	b.n	8007ad6 <_printf_float+0xbe>
 8007d98:	2301      	movs	r3, #1
 8007d9a:	4631      	mov	r1, r6
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	9205      	str	r2, [sp, #20]
 8007da0:	47b8      	blx	r7
 8007da2:	3001      	adds	r0, #1
 8007da4:	f43f ae97 	beq.w	8007ad6 <_printf_float+0xbe>
 8007da8:	9a05      	ldr	r2, [sp, #20]
 8007daa:	f10b 0b01 	add.w	fp, fp, #1
 8007dae:	e7b9      	b.n	8007d24 <_printf_float+0x30c>
 8007db0:	ee18 3a10 	vmov	r3, s16
 8007db4:	4652      	mov	r2, sl
 8007db6:	4631      	mov	r1, r6
 8007db8:	4628      	mov	r0, r5
 8007dba:	47b8      	blx	r7
 8007dbc:	3001      	adds	r0, #1
 8007dbe:	d1be      	bne.n	8007d3e <_printf_float+0x326>
 8007dc0:	e689      	b.n	8007ad6 <_printf_float+0xbe>
 8007dc2:	9a05      	ldr	r2, [sp, #20]
 8007dc4:	464b      	mov	r3, r9
 8007dc6:	4442      	add	r2, r8
 8007dc8:	4631      	mov	r1, r6
 8007dca:	4628      	mov	r0, r5
 8007dcc:	47b8      	blx	r7
 8007dce:	3001      	adds	r0, #1
 8007dd0:	d1c1      	bne.n	8007d56 <_printf_float+0x33e>
 8007dd2:	e680      	b.n	8007ad6 <_printf_float+0xbe>
 8007dd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dd6:	2a01      	cmp	r2, #1
 8007dd8:	dc01      	bgt.n	8007dde <_printf_float+0x3c6>
 8007dda:	07db      	lsls	r3, r3, #31
 8007ddc:	d53a      	bpl.n	8007e54 <_printf_float+0x43c>
 8007dde:	2301      	movs	r3, #1
 8007de0:	4642      	mov	r2, r8
 8007de2:	4631      	mov	r1, r6
 8007de4:	4628      	mov	r0, r5
 8007de6:	47b8      	blx	r7
 8007de8:	3001      	adds	r0, #1
 8007dea:	f43f ae74 	beq.w	8007ad6 <_printf_float+0xbe>
 8007dee:	ee18 3a10 	vmov	r3, s16
 8007df2:	4652      	mov	r2, sl
 8007df4:	4631      	mov	r1, r6
 8007df6:	4628      	mov	r0, r5
 8007df8:	47b8      	blx	r7
 8007dfa:	3001      	adds	r0, #1
 8007dfc:	f43f ae6b 	beq.w	8007ad6 <_printf_float+0xbe>
 8007e00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e04:	2200      	movs	r2, #0
 8007e06:	2300      	movs	r3, #0
 8007e08:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007e0c:	f7f8 fe5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e10:	b9d8      	cbnz	r0, 8007e4a <_printf_float+0x432>
 8007e12:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007e16:	f108 0201 	add.w	r2, r8, #1
 8007e1a:	4631      	mov	r1, r6
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	47b8      	blx	r7
 8007e20:	3001      	adds	r0, #1
 8007e22:	d10e      	bne.n	8007e42 <_printf_float+0x42a>
 8007e24:	e657      	b.n	8007ad6 <_printf_float+0xbe>
 8007e26:	2301      	movs	r3, #1
 8007e28:	4652      	mov	r2, sl
 8007e2a:	4631      	mov	r1, r6
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	47b8      	blx	r7
 8007e30:	3001      	adds	r0, #1
 8007e32:	f43f ae50 	beq.w	8007ad6 <_printf_float+0xbe>
 8007e36:	f108 0801 	add.w	r8, r8, #1
 8007e3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	4543      	cmp	r3, r8
 8007e40:	dcf1      	bgt.n	8007e26 <_printf_float+0x40e>
 8007e42:	464b      	mov	r3, r9
 8007e44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007e48:	e6da      	b.n	8007c00 <_printf_float+0x1e8>
 8007e4a:	f04f 0800 	mov.w	r8, #0
 8007e4e:	f104 0a1a 	add.w	sl, r4, #26
 8007e52:	e7f2      	b.n	8007e3a <_printf_float+0x422>
 8007e54:	2301      	movs	r3, #1
 8007e56:	4642      	mov	r2, r8
 8007e58:	e7df      	b.n	8007e1a <_printf_float+0x402>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	464a      	mov	r2, r9
 8007e5e:	4631      	mov	r1, r6
 8007e60:	4628      	mov	r0, r5
 8007e62:	47b8      	blx	r7
 8007e64:	3001      	adds	r0, #1
 8007e66:	f43f ae36 	beq.w	8007ad6 <_printf_float+0xbe>
 8007e6a:	f108 0801 	add.w	r8, r8, #1
 8007e6e:	68e3      	ldr	r3, [r4, #12]
 8007e70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e72:	1a5b      	subs	r3, r3, r1
 8007e74:	4543      	cmp	r3, r8
 8007e76:	dcf0      	bgt.n	8007e5a <_printf_float+0x442>
 8007e78:	e6f8      	b.n	8007c6c <_printf_float+0x254>
 8007e7a:	f04f 0800 	mov.w	r8, #0
 8007e7e:	f104 0919 	add.w	r9, r4, #25
 8007e82:	e7f4      	b.n	8007e6e <_printf_float+0x456>

08007e84 <_printf_common>:
 8007e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e88:	4616      	mov	r6, r2
 8007e8a:	4699      	mov	r9, r3
 8007e8c:	688a      	ldr	r2, [r1, #8]
 8007e8e:	690b      	ldr	r3, [r1, #16]
 8007e90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e94:	4293      	cmp	r3, r2
 8007e96:	bfb8      	it	lt
 8007e98:	4613      	movlt	r3, r2
 8007e9a:	6033      	str	r3, [r6, #0]
 8007e9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ea0:	4607      	mov	r7, r0
 8007ea2:	460c      	mov	r4, r1
 8007ea4:	b10a      	cbz	r2, 8007eaa <_printf_common+0x26>
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	6033      	str	r3, [r6, #0]
 8007eaa:	6823      	ldr	r3, [r4, #0]
 8007eac:	0699      	lsls	r1, r3, #26
 8007eae:	bf42      	ittt	mi
 8007eb0:	6833      	ldrmi	r3, [r6, #0]
 8007eb2:	3302      	addmi	r3, #2
 8007eb4:	6033      	strmi	r3, [r6, #0]
 8007eb6:	6825      	ldr	r5, [r4, #0]
 8007eb8:	f015 0506 	ands.w	r5, r5, #6
 8007ebc:	d106      	bne.n	8007ecc <_printf_common+0x48>
 8007ebe:	f104 0a19 	add.w	sl, r4, #25
 8007ec2:	68e3      	ldr	r3, [r4, #12]
 8007ec4:	6832      	ldr	r2, [r6, #0]
 8007ec6:	1a9b      	subs	r3, r3, r2
 8007ec8:	42ab      	cmp	r3, r5
 8007eca:	dc26      	bgt.n	8007f1a <_printf_common+0x96>
 8007ecc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ed0:	1e13      	subs	r3, r2, #0
 8007ed2:	6822      	ldr	r2, [r4, #0]
 8007ed4:	bf18      	it	ne
 8007ed6:	2301      	movne	r3, #1
 8007ed8:	0692      	lsls	r2, r2, #26
 8007eda:	d42b      	bmi.n	8007f34 <_printf_common+0xb0>
 8007edc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ee0:	4649      	mov	r1, r9
 8007ee2:	4638      	mov	r0, r7
 8007ee4:	47c0      	blx	r8
 8007ee6:	3001      	adds	r0, #1
 8007ee8:	d01e      	beq.n	8007f28 <_printf_common+0xa4>
 8007eea:	6823      	ldr	r3, [r4, #0]
 8007eec:	6922      	ldr	r2, [r4, #16]
 8007eee:	f003 0306 	and.w	r3, r3, #6
 8007ef2:	2b04      	cmp	r3, #4
 8007ef4:	bf02      	ittt	eq
 8007ef6:	68e5      	ldreq	r5, [r4, #12]
 8007ef8:	6833      	ldreq	r3, [r6, #0]
 8007efa:	1aed      	subeq	r5, r5, r3
 8007efc:	68a3      	ldr	r3, [r4, #8]
 8007efe:	bf0c      	ite	eq
 8007f00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f04:	2500      	movne	r5, #0
 8007f06:	4293      	cmp	r3, r2
 8007f08:	bfc4      	itt	gt
 8007f0a:	1a9b      	subgt	r3, r3, r2
 8007f0c:	18ed      	addgt	r5, r5, r3
 8007f0e:	2600      	movs	r6, #0
 8007f10:	341a      	adds	r4, #26
 8007f12:	42b5      	cmp	r5, r6
 8007f14:	d11a      	bne.n	8007f4c <_printf_common+0xc8>
 8007f16:	2000      	movs	r0, #0
 8007f18:	e008      	b.n	8007f2c <_printf_common+0xa8>
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	4652      	mov	r2, sl
 8007f1e:	4649      	mov	r1, r9
 8007f20:	4638      	mov	r0, r7
 8007f22:	47c0      	blx	r8
 8007f24:	3001      	adds	r0, #1
 8007f26:	d103      	bne.n	8007f30 <_printf_common+0xac>
 8007f28:	f04f 30ff 	mov.w	r0, #4294967295
 8007f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f30:	3501      	adds	r5, #1
 8007f32:	e7c6      	b.n	8007ec2 <_printf_common+0x3e>
 8007f34:	18e1      	adds	r1, r4, r3
 8007f36:	1c5a      	adds	r2, r3, #1
 8007f38:	2030      	movs	r0, #48	; 0x30
 8007f3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f3e:	4422      	add	r2, r4
 8007f40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f48:	3302      	adds	r3, #2
 8007f4a:	e7c7      	b.n	8007edc <_printf_common+0x58>
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	4622      	mov	r2, r4
 8007f50:	4649      	mov	r1, r9
 8007f52:	4638      	mov	r0, r7
 8007f54:	47c0      	blx	r8
 8007f56:	3001      	adds	r0, #1
 8007f58:	d0e6      	beq.n	8007f28 <_printf_common+0xa4>
 8007f5a:	3601      	adds	r6, #1
 8007f5c:	e7d9      	b.n	8007f12 <_printf_common+0x8e>
	...

08007f60 <_printf_i>:
 8007f60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f64:	7e0f      	ldrb	r7, [r1, #24]
 8007f66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f68:	2f78      	cmp	r7, #120	; 0x78
 8007f6a:	4691      	mov	r9, r2
 8007f6c:	4680      	mov	r8, r0
 8007f6e:	460c      	mov	r4, r1
 8007f70:	469a      	mov	sl, r3
 8007f72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f76:	d807      	bhi.n	8007f88 <_printf_i+0x28>
 8007f78:	2f62      	cmp	r7, #98	; 0x62
 8007f7a:	d80a      	bhi.n	8007f92 <_printf_i+0x32>
 8007f7c:	2f00      	cmp	r7, #0
 8007f7e:	f000 80d4 	beq.w	800812a <_printf_i+0x1ca>
 8007f82:	2f58      	cmp	r7, #88	; 0x58
 8007f84:	f000 80c0 	beq.w	8008108 <_printf_i+0x1a8>
 8007f88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f90:	e03a      	b.n	8008008 <_printf_i+0xa8>
 8007f92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f96:	2b15      	cmp	r3, #21
 8007f98:	d8f6      	bhi.n	8007f88 <_printf_i+0x28>
 8007f9a:	a101      	add	r1, pc, #4	; (adr r1, 8007fa0 <_printf_i+0x40>)
 8007f9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007fa0:	08007ff9 	.word	0x08007ff9
 8007fa4:	0800800d 	.word	0x0800800d
 8007fa8:	08007f89 	.word	0x08007f89
 8007fac:	08007f89 	.word	0x08007f89
 8007fb0:	08007f89 	.word	0x08007f89
 8007fb4:	08007f89 	.word	0x08007f89
 8007fb8:	0800800d 	.word	0x0800800d
 8007fbc:	08007f89 	.word	0x08007f89
 8007fc0:	08007f89 	.word	0x08007f89
 8007fc4:	08007f89 	.word	0x08007f89
 8007fc8:	08007f89 	.word	0x08007f89
 8007fcc:	08008111 	.word	0x08008111
 8007fd0:	08008039 	.word	0x08008039
 8007fd4:	080080cb 	.word	0x080080cb
 8007fd8:	08007f89 	.word	0x08007f89
 8007fdc:	08007f89 	.word	0x08007f89
 8007fe0:	08008133 	.word	0x08008133
 8007fe4:	08007f89 	.word	0x08007f89
 8007fe8:	08008039 	.word	0x08008039
 8007fec:	08007f89 	.word	0x08007f89
 8007ff0:	08007f89 	.word	0x08007f89
 8007ff4:	080080d3 	.word	0x080080d3
 8007ff8:	682b      	ldr	r3, [r5, #0]
 8007ffa:	1d1a      	adds	r2, r3, #4
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	602a      	str	r2, [r5, #0]
 8008000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008004:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008008:	2301      	movs	r3, #1
 800800a:	e09f      	b.n	800814c <_printf_i+0x1ec>
 800800c:	6820      	ldr	r0, [r4, #0]
 800800e:	682b      	ldr	r3, [r5, #0]
 8008010:	0607      	lsls	r7, r0, #24
 8008012:	f103 0104 	add.w	r1, r3, #4
 8008016:	6029      	str	r1, [r5, #0]
 8008018:	d501      	bpl.n	800801e <_printf_i+0xbe>
 800801a:	681e      	ldr	r6, [r3, #0]
 800801c:	e003      	b.n	8008026 <_printf_i+0xc6>
 800801e:	0646      	lsls	r6, r0, #25
 8008020:	d5fb      	bpl.n	800801a <_printf_i+0xba>
 8008022:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008026:	2e00      	cmp	r6, #0
 8008028:	da03      	bge.n	8008032 <_printf_i+0xd2>
 800802a:	232d      	movs	r3, #45	; 0x2d
 800802c:	4276      	negs	r6, r6
 800802e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008032:	485a      	ldr	r0, [pc, #360]	; (800819c <_printf_i+0x23c>)
 8008034:	230a      	movs	r3, #10
 8008036:	e012      	b.n	800805e <_printf_i+0xfe>
 8008038:	682b      	ldr	r3, [r5, #0]
 800803a:	6820      	ldr	r0, [r4, #0]
 800803c:	1d19      	adds	r1, r3, #4
 800803e:	6029      	str	r1, [r5, #0]
 8008040:	0605      	lsls	r5, r0, #24
 8008042:	d501      	bpl.n	8008048 <_printf_i+0xe8>
 8008044:	681e      	ldr	r6, [r3, #0]
 8008046:	e002      	b.n	800804e <_printf_i+0xee>
 8008048:	0641      	lsls	r1, r0, #25
 800804a:	d5fb      	bpl.n	8008044 <_printf_i+0xe4>
 800804c:	881e      	ldrh	r6, [r3, #0]
 800804e:	4853      	ldr	r0, [pc, #332]	; (800819c <_printf_i+0x23c>)
 8008050:	2f6f      	cmp	r7, #111	; 0x6f
 8008052:	bf0c      	ite	eq
 8008054:	2308      	moveq	r3, #8
 8008056:	230a      	movne	r3, #10
 8008058:	2100      	movs	r1, #0
 800805a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800805e:	6865      	ldr	r5, [r4, #4]
 8008060:	60a5      	str	r5, [r4, #8]
 8008062:	2d00      	cmp	r5, #0
 8008064:	bfa2      	ittt	ge
 8008066:	6821      	ldrge	r1, [r4, #0]
 8008068:	f021 0104 	bicge.w	r1, r1, #4
 800806c:	6021      	strge	r1, [r4, #0]
 800806e:	b90e      	cbnz	r6, 8008074 <_printf_i+0x114>
 8008070:	2d00      	cmp	r5, #0
 8008072:	d04b      	beq.n	800810c <_printf_i+0x1ac>
 8008074:	4615      	mov	r5, r2
 8008076:	fbb6 f1f3 	udiv	r1, r6, r3
 800807a:	fb03 6711 	mls	r7, r3, r1, r6
 800807e:	5dc7      	ldrb	r7, [r0, r7]
 8008080:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008084:	4637      	mov	r7, r6
 8008086:	42bb      	cmp	r3, r7
 8008088:	460e      	mov	r6, r1
 800808a:	d9f4      	bls.n	8008076 <_printf_i+0x116>
 800808c:	2b08      	cmp	r3, #8
 800808e:	d10b      	bne.n	80080a8 <_printf_i+0x148>
 8008090:	6823      	ldr	r3, [r4, #0]
 8008092:	07de      	lsls	r6, r3, #31
 8008094:	d508      	bpl.n	80080a8 <_printf_i+0x148>
 8008096:	6923      	ldr	r3, [r4, #16]
 8008098:	6861      	ldr	r1, [r4, #4]
 800809a:	4299      	cmp	r1, r3
 800809c:	bfde      	ittt	le
 800809e:	2330      	movle	r3, #48	; 0x30
 80080a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80080a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80080a8:	1b52      	subs	r2, r2, r5
 80080aa:	6122      	str	r2, [r4, #16]
 80080ac:	f8cd a000 	str.w	sl, [sp]
 80080b0:	464b      	mov	r3, r9
 80080b2:	aa03      	add	r2, sp, #12
 80080b4:	4621      	mov	r1, r4
 80080b6:	4640      	mov	r0, r8
 80080b8:	f7ff fee4 	bl	8007e84 <_printf_common>
 80080bc:	3001      	adds	r0, #1
 80080be:	d14a      	bne.n	8008156 <_printf_i+0x1f6>
 80080c0:	f04f 30ff 	mov.w	r0, #4294967295
 80080c4:	b004      	add	sp, #16
 80080c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ca:	6823      	ldr	r3, [r4, #0]
 80080cc:	f043 0320 	orr.w	r3, r3, #32
 80080d0:	6023      	str	r3, [r4, #0]
 80080d2:	4833      	ldr	r0, [pc, #204]	; (80081a0 <_printf_i+0x240>)
 80080d4:	2778      	movs	r7, #120	; 0x78
 80080d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80080da:	6823      	ldr	r3, [r4, #0]
 80080dc:	6829      	ldr	r1, [r5, #0]
 80080de:	061f      	lsls	r7, r3, #24
 80080e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80080e4:	d402      	bmi.n	80080ec <_printf_i+0x18c>
 80080e6:	065f      	lsls	r7, r3, #25
 80080e8:	bf48      	it	mi
 80080ea:	b2b6      	uxthmi	r6, r6
 80080ec:	07df      	lsls	r7, r3, #31
 80080ee:	bf48      	it	mi
 80080f0:	f043 0320 	orrmi.w	r3, r3, #32
 80080f4:	6029      	str	r1, [r5, #0]
 80080f6:	bf48      	it	mi
 80080f8:	6023      	strmi	r3, [r4, #0]
 80080fa:	b91e      	cbnz	r6, 8008104 <_printf_i+0x1a4>
 80080fc:	6823      	ldr	r3, [r4, #0]
 80080fe:	f023 0320 	bic.w	r3, r3, #32
 8008102:	6023      	str	r3, [r4, #0]
 8008104:	2310      	movs	r3, #16
 8008106:	e7a7      	b.n	8008058 <_printf_i+0xf8>
 8008108:	4824      	ldr	r0, [pc, #144]	; (800819c <_printf_i+0x23c>)
 800810a:	e7e4      	b.n	80080d6 <_printf_i+0x176>
 800810c:	4615      	mov	r5, r2
 800810e:	e7bd      	b.n	800808c <_printf_i+0x12c>
 8008110:	682b      	ldr	r3, [r5, #0]
 8008112:	6826      	ldr	r6, [r4, #0]
 8008114:	6961      	ldr	r1, [r4, #20]
 8008116:	1d18      	adds	r0, r3, #4
 8008118:	6028      	str	r0, [r5, #0]
 800811a:	0635      	lsls	r5, r6, #24
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	d501      	bpl.n	8008124 <_printf_i+0x1c4>
 8008120:	6019      	str	r1, [r3, #0]
 8008122:	e002      	b.n	800812a <_printf_i+0x1ca>
 8008124:	0670      	lsls	r0, r6, #25
 8008126:	d5fb      	bpl.n	8008120 <_printf_i+0x1c0>
 8008128:	8019      	strh	r1, [r3, #0]
 800812a:	2300      	movs	r3, #0
 800812c:	6123      	str	r3, [r4, #16]
 800812e:	4615      	mov	r5, r2
 8008130:	e7bc      	b.n	80080ac <_printf_i+0x14c>
 8008132:	682b      	ldr	r3, [r5, #0]
 8008134:	1d1a      	adds	r2, r3, #4
 8008136:	602a      	str	r2, [r5, #0]
 8008138:	681d      	ldr	r5, [r3, #0]
 800813a:	6862      	ldr	r2, [r4, #4]
 800813c:	2100      	movs	r1, #0
 800813e:	4628      	mov	r0, r5
 8008140:	f7f8 f846 	bl	80001d0 <memchr>
 8008144:	b108      	cbz	r0, 800814a <_printf_i+0x1ea>
 8008146:	1b40      	subs	r0, r0, r5
 8008148:	6060      	str	r0, [r4, #4]
 800814a:	6863      	ldr	r3, [r4, #4]
 800814c:	6123      	str	r3, [r4, #16]
 800814e:	2300      	movs	r3, #0
 8008150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008154:	e7aa      	b.n	80080ac <_printf_i+0x14c>
 8008156:	6923      	ldr	r3, [r4, #16]
 8008158:	462a      	mov	r2, r5
 800815a:	4649      	mov	r1, r9
 800815c:	4640      	mov	r0, r8
 800815e:	47d0      	blx	sl
 8008160:	3001      	adds	r0, #1
 8008162:	d0ad      	beq.n	80080c0 <_printf_i+0x160>
 8008164:	6823      	ldr	r3, [r4, #0]
 8008166:	079b      	lsls	r3, r3, #30
 8008168:	d413      	bmi.n	8008192 <_printf_i+0x232>
 800816a:	68e0      	ldr	r0, [r4, #12]
 800816c:	9b03      	ldr	r3, [sp, #12]
 800816e:	4298      	cmp	r0, r3
 8008170:	bfb8      	it	lt
 8008172:	4618      	movlt	r0, r3
 8008174:	e7a6      	b.n	80080c4 <_printf_i+0x164>
 8008176:	2301      	movs	r3, #1
 8008178:	4632      	mov	r2, r6
 800817a:	4649      	mov	r1, r9
 800817c:	4640      	mov	r0, r8
 800817e:	47d0      	blx	sl
 8008180:	3001      	adds	r0, #1
 8008182:	d09d      	beq.n	80080c0 <_printf_i+0x160>
 8008184:	3501      	adds	r5, #1
 8008186:	68e3      	ldr	r3, [r4, #12]
 8008188:	9903      	ldr	r1, [sp, #12]
 800818a:	1a5b      	subs	r3, r3, r1
 800818c:	42ab      	cmp	r3, r5
 800818e:	dcf2      	bgt.n	8008176 <_printf_i+0x216>
 8008190:	e7eb      	b.n	800816a <_printf_i+0x20a>
 8008192:	2500      	movs	r5, #0
 8008194:	f104 0619 	add.w	r6, r4, #25
 8008198:	e7f5      	b.n	8008186 <_printf_i+0x226>
 800819a:	bf00      	nop
 800819c:	0800a6ce 	.word	0x0800a6ce
 80081a0:	0800a6df 	.word	0x0800a6df

080081a4 <std>:
 80081a4:	2300      	movs	r3, #0
 80081a6:	b510      	push	{r4, lr}
 80081a8:	4604      	mov	r4, r0
 80081aa:	e9c0 3300 	strd	r3, r3, [r0]
 80081ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081b2:	6083      	str	r3, [r0, #8]
 80081b4:	8181      	strh	r1, [r0, #12]
 80081b6:	6643      	str	r3, [r0, #100]	; 0x64
 80081b8:	81c2      	strh	r2, [r0, #14]
 80081ba:	6183      	str	r3, [r0, #24]
 80081bc:	4619      	mov	r1, r3
 80081be:	2208      	movs	r2, #8
 80081c0:	305c      	adds	r0, #92	; 0x5c
 80081c2:	f000 f914 	bl	80083ee <memset>
 80081c6:	4b0d      	ldr	r3, [pc, #52]	; (80081fc <std+0x58>)
 80081c8:	6263      	str	r3, [r4, #36]	; 0x24
 80081ca:	4b0d      	ldr	r3, [pc, #52]	; (8008200 <std+0x5c>)
 80081cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80081ce:	4b0d      	ldr	r3, [pc, #52]	; (8008204 <std+0x60>)
 80081d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081d2:	4b0d      	ldr	r3, [pc, #52]	; (8008208 <std+0x64>)
 80081d4:	6323      	str	r3, [r4, #48]	; 0x30
 80081d6:	4b0d      	ldr	r3, [pc, #52]	; (800820c <std+0x68>)
 80081d8:	6224      	str	r4, [r4, #32]
 80081da:	429c      	cmp	r4, r3
 80081dc:	d006      	beq.n	80081ec <std+0x48>
 80081de:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80081e2:	4294      	cmp	r4, r2
 80081e4:	d002      	beq.n	80081ec <std+0x48>
 80081e6:	33d0      	adds	r3, #208	; 0xd0
 80081e8:	429c      	cmp	r4, r3
 80081ea:	d105      	bne.n	80081f8 <std+0x54>
 80081ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80081f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081f4:	f000 b978 	b.w	80084e8 <__retarget_lock_init_recursive>
 80081f8:	bd10      	pop	{r4, pc}
 80081fa:	bf00      	nop
 80081fc:	08008369 	.word	0x08008369
 8008200:	0800838b 	.word	0x0800838b
 8008204:	080083c3 	.word	0x080083c3
 8008208:	080083e7 	.word	0x080083e7
 800820c:	200003e4 	.word	0x200003e4

08008210 <stdio_exit_handler>:
 8008210:	4a02      	ldr	r2, [pc, #8]	; (800821c <stdio_exit_handler+0xc>)
 8008212:	4903      	ldr	r1, [pc, #12]	; (8008220 <stdio_exit_handler+0x10>)
 8008214:	4803      	ldr	r0, [pc, #12]	; (8008224 <stdio_exit_handler+0x14>)
 8008216:	f000 b869 	b.w	80082ec <_fwalk_sglue>
 800821a:	bf00      	nop
 800821c:	2000000c 	.word	0x2000000c
 8008220:	08009e99 	.word	0x08009e99
 8008224:	20000018 	.word	0x20000018

08008228 <cleanup_stdio>:
 8008228:	6841      	ldr	r1, [r0, #4]
 800822a:	4b0c      	ldr	r3, [pc, #48]	; (800825c <cleanup_stdio+0x34>)
 800822c:	4299      	cmp	r1, r3
 800822e:	b510      	push	{r4, lr}
 8008230:	4604      	mov	r4, r0
 8008232:	d001      	beq.n	8008238 <cleanup_stdio+0x10>
 8008234:	f001 fe30 	bl	8009e98 <_fflush_r>
 8008238:	68a1      	ldr	r1, [r4, #8]
 800823a:	4b09      	ldr	r3, [pc, #36]	; (8008260 <cleanup_stdio+0x38>)
 800823c:	4299      	cmp	r1, r3
 800823e:	d002      	beq.n	8008246 <cleanup_stdio+0x1e>
 8008240:	4620      	mov	r0, r4
 8008242:	f001 fe29 	bl	8009e98 <_fflush_r>
 8008246:	68e1      	ldr	r1, [r4, #12]
 8008248:	4b06      	ldr	r3, [pc, #24]	; (8008264 <cleanup_stdio+0x3c>)
 800824a:	4299      	cmp	r1, r3
 800824c:	d004      	beq.n	8008258 <cleanup_stdio+0x30>
 800824e:	4620      	mov	r0, r4
 8008250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008254:	f001 be20 	b.w	8009e98 <_fflush_r>
 8008258:	bd10      	pop	{r4, pc}
 800825a:	bf00      	nop
 800825c:	200003e4 	.word	0x200003e4
 8008260:	2000044c 	.word	0x2000044c
 8008264:	200004b4 	.word	0x200004b4

08008268 <global_stdio_init.part.0>:
 8008268:	b510      	push	{r4, lr}
 800826a:	4b0b      	ldr	r3, [pc, #44]	; (8008298 <global_stdio_init.part.0+0x30>)
 800826c:	4c0b      	ldr	r4, [pc, #44]	; (800829c <global_stdio_init.part.0+0x34>)
 800826e:	4a0c      	ldr	r2, [pc, #48]	; (80082a0 <global_stdio_init.part.0+0x38>)
 8008270:	601a      	str	r2, [r3, #0]
 8008272:	4620      	mov	r0, r4
 8008274:	2200      	movs	r2, #0
 8008276:	2104      	movs	r1, #4
 8008278:	f7ff ff94 	bl	80081a4 <std>
 800827c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008280:	2201      	movs	r2, #1
 8008282:	2109      	movs	r1, #9
 8008284:	f7ff ff8e 	bl	80081a4 <std>
 8008288:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800828c:	2202      	movs	r2, #2
 800828e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008292:	2112      	movs	r1, #18
 8008294:	f7ff bf86 	b.w	80081a4 <std>
 8008298:	2000051c 	.word	0x2000051c
 800829c:	200003e4 	.word	0x200003e4
 80082a0:	08008211 	.word	0x08008211

080082a4 <__sfp_lock_acquire>:
 80082a4:	4801      	ldr	r0, [pc, #4]	; (80082ac <__sfp_lock_acquire+0x8>)
 80082a6:	f000 b920 	b.w	80084ea <__retarget_lock_acquire_recursive>
 80082aa:	bf00      	nop
 80082ac:	20000525 	.word	0x20000525

080082b0 <__sfp_lock_release>:
 80082b0:	4801      	ldr	r0, [pc, #4]	; (80082b8 <__sfp_lock_release+0x8>)
 80082b2:	f000 b91b 	b.w	80084ec <__retarget_lock_release_recursive>
 80082b6:	bf00      	nop
 80082b8:	20000525 	.word	0x20000525

080082bc <__sinit>:
 80082bc:	b510      	push	{r4, lr}
 80082be:	4604      	mov	r4, r0
 80082c0:	f7ff fff0 	bl	80082a4 <__sfp_lock_acquire>
 80082c4:	6a23      	ldr	r3, [r4, #32]
 80082c6:	b11b      	cbz	r3, 80082d0 <__sinit+0x14>
 80082c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082cc:	f7ff bff0 	b.w	80082b0 <__sfp_lock_release>
 80082d0:	4b04      	ldr	r3, [pc, #16]	; (80082e4 <__sinit+0x28>)
 80082d2:	6223      	str	r3, [r4, #32]
 80082d4:	4b04      	ldr	r3, [pc, #16]	; (80082e8 <__sinit+0x2c>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1f5      	bne.n	80082c8 <__sinit+0xc>
 80082dc:	f7ff ffc4 	bl	8008268 <global_stdio_init.part.0>
 80082e0:	e7f2      	b.n	80082c8 <__sinit+0xc>
 80082e2:	bf00      	nop
 80082e4:	08008229 	.word	0x08008229
 80082e8:	2000051c 	.word	0x2000051c

080082ec <_fwalk_sglue>:
 80082ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082f0:	4607      	mov	r7, r0
 80082f2:	4688      	mov	r8, r1
 80082f4:	4614      	mov	r4, r2
 80082f6:	2600      	movs	r6, #0
 80082f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082fc:	f1b9 0901 	subs.w	r9, r9, #1
 8008300:	d505      	bpl.n	800830e <_fwalk_sglue+0x22>
 8008302:	6824      	ldr	r4, [r4, #0]
 8008304:	2c00      	cmp	r4, #0
 8008306:	d1f7      	bne.n	80082f8 <_fwalk_sglue+0xc>
 8008308:	4630      	mov	r0, r6
 800830a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800830e:	89ab      	ldrh	r3, [r5, #12]
 8008310:	2b01      	cmp	r3, #1
 8008312:	d907      	bls.n	8008324 <_fwalk_sglue+0x38>
 8008314:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008318:	3301      	adds	r3, #1
 800831a:	d003      	beq.n	8008324 <_fwalk_sglue+0x38>
 800831c:	4629      	mov	r1, r5
 800831e:	4638      	mov	r0, r7
 8008320:	47c0      	blx	r8
 8008322:	4306      	orrs	r6, r0
 8008324:	3568      	adds	r5, #104	; 0x68
 8008326:	e7e9      	b.n	80082fc <_fwalk_sglue+0x10>

08008328 <siprintf>:
 8008328:	b40e      	push	{r1, r2, r3}
 800832a:	b500      	push	{lr}
 800832c:	b09c      	sub	sp, #112	; 0x70
 800832e:	ab1d      	add	r3, sp, #116	; 0x74
 8008330:	9002      	str	r0, [sp, #8]
 8008332:	9006      	str	r0, [sp, #24]
 8008334:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008338:	4809      	ldr	r0, [pc, #36]	; (8008360 <siprintf+0x38>)
 800833a:	9107      	str	r1, [sp, #28]
 800833c:	9104      	str	r1, [sp, #16]
 800833e:	4909      	ldr	r1, [pc, #36]	; (8008364 <siprintf+0x3c>)
 8008340:	f853 2b04 	ldr.w	r2, [r3], #4
 8008344:	9105      	str	r1, [sp, #20]
 8008346:	6800      	ldr	r0, [r0, #0]
 8008348:	9301      	str	r3, [sp, #4]
 800834a:	a902      	add	r1, sp, #8
 800834c:	f001 fc20 	bl	8009b90 <_svfiprintf_r>
 8008350:	9b02      	ldr	r3, [sp, #8]
 8008352:	2200      	movs	r2, #0
 8008354:	701a      	strb	r2, [r3, #0]
 8008356:	b01c      	add	sp, #112	; 0x70
 8008358:	f85d eb04 	ldr.w	lr, [sp], #4
 800835c:	b003      	add	sp, #12
 800835e:	4770      	bx	lr
 8008360:	20000064 	.word	0x20000064
 8008364:	ffff0208 	.word	0xffff0208

08008368 <__sread>:
 8008368:	b510      	push	{r4, lr}
 800836a:	460c      	mov	r4, r1
 800836c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008370:	f000 f86c 	bl	800844c <_read_r>
 8008374:	2800      	cmp	r0, #0
 8008376:	bfab      	itete	ge
 8008378:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800837a:	89a3      	ldrhlt	r3, [r4, #12]
 800837c:	181b      	addge	r3, r3, r0
 800837e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008382:	bfac      	ite	ge
 8008384:	6563      	strge	r3, [r4, #84]	; 0x54
 8008386:	81a3      	strhlt	r3, [r4, #12]
 8008388:	bd10      	pop	{r4, pc}

0800838a <__swrite>:
 800838a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800838e:	461f      	mov	r7, r3
 8008390:	898b      	ldrh	r3, [r1, #12]
 8008392:	05db      	lsls	r3, r3, #23
 8008394:	4605      	mov	r5, r0
 8008396:	460c      	mov	r4, r1
 8008398:	4616      	mov	r6, r2
 800839a:	d505      	bpl.n	80083a8 <__swrite+0x1e>
 800839c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083a0:	2302      	movs	r3, #2
 80083a2:	2200      	movs	r2, #0
 80083a4:	f000 f840 	bl	8008428 <_lseek_r>
 80083a8:	89a3      	ldrh	r3, [r4, #12]
 80083aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083b2:	81a3      	strh	r3, [r4, #12]
 80083b4:	4632      	mov	r2, r6
 80083b6:	463b      	mov	r3, r7
 80083b8:	4628      	mov	r0, r5
 80083ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083be:	f000 b857 	b.w	8008470 <_write_r>

080083c2 <__sseek>:
 80083c2:	b510      	push	{r4, lr}
 80083c4:	460c      	mov	r4, r1
 80083c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083ca:	f000 f82d 	bl	8008428 <_lseek_r>
 80083ce:	1c43      	adds	r3, r0, #1
 80083d0:	89a3      	ldrh	r3, [r4, #12]
 80083d2:	bf15      	itete	ne
 80083d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80083d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083de:	81a3      	strheq	r3, [r4, #12]
 80083e0:	bf18      	it	ne
 80083e2:	81a3      	strhne	r3, [r4, #12]
 80083e4:	bd10      	pop	{r4, pc}

080083e6 <__sclose>:
 80083e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083ea:	f000 b80d 	b.w	8008408 <_close_r>

080083ee <memset>:
 80083ee:	4402      	add	r2, r0
 80083f0:	4603      	mov	r3, r0
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d100      	bne.n	80083f8 <memset+0xa>
 80083f6:	4770      	bx	lr
 80083f8:	f803 1b01 	strb.w	r1, [r3], #1
 80083fc:	e7f9      	b.n	80083f2 <memset+0x4>
	...

08008400 <_localeconv_r>:
 8008400:	4800      	ldr	r0, [pc, #0]	; (8008404 <_localeconv_r+0x4>)
 8008402:	4770      	bx	lr
 8008404:	20000158 	.word	0x20000158

08008408 <_close_r>:
 8008408:	b538      	push	{r3, r4, r5, lr}
 800840a:	4d06      	ldr	r5, [pc, #24]	; (8008424 <_close_r+0x1c>)
 800840c:	2300      	movs	r3, #0
 800840e:	4604      	mov	r4, r0
 8008410:	4608      	mov	r0, r1
 8008412:	602b      	str	r3, [r5, #0]
 8008414:	f7f9 fe97 	bl	8002146 <_close>
 8008418:	1c43      	adds	r3, r0, #1
 800841a:	d102      	bne.n	8008422 <_close_r+0x1a>
 800841c:	682b      	ldr	r3, [r5, #0]
 800841e:	b103      	cbz	r3, 8008422 <_close_r+0x1a>
 8008420:	6023      	str	r3, [r4, #0]
 8008422:	bd38      	pop	{r3, r4, r5, pc}
 8008424:	20000520 	.word	0x20000520

08008428 <_lseek_r>:
 8008428:	b538      	push	{r3, r4, r5, lr}
 800842a:	4d07      	ldr	r5, [pc, #28]	; (8008448 <_lseek_r+0x20>)
 800842c:	4604      	mov	r4, r0
 800842e:	4608      	mov	r0, r1
 8008430:	4611      	mov	r1, r2
 8008432:	2200      	movs	r2, #0
 8008434:	602a      	str	r2, [r5, #0]
 8008436:	461a      	mov	r2, r3
 8008438:	f7f9 feac 	bl	8002194 <_lseek>
 800843c:	1c43      	adds	r3, r0, #1
 800843e:	d102      	bne.n	8008446 <_lseek_r+0x1e>
 8008440:	682b      	ldr	r3, [r5, #0]
 8008442:	b103      	cbz	r3, 8008446 <_lseek_r+0x1e>
 8008444:	6023      	str	r3, [r4, #0]
 8008446:	bd38      	pop	{r3, r4, r5, pc}
 8008448:	20000520 	.word	0x20000520

0800844c <_read_r>:
 800844c:	b538      	push	{r3, r4, r5, lr}
 800844e:	4d07      	ldr	r5, [pc, #28]	; (800846c <_read_r+0x20>)
 8008450:	4604      	mov	r4, r0
 8008452:	4608      	mov	r0, r1
 8008454:	4611      	mov	r1, r2
 8008456:	2200      	movs	r2, #0
 8008458:	602a      	str	r2, [r5, #0]
 800845a:	461a      	mov	r2, r3
 800845c:	f7f9 fe3a 	bl	80020d4 <_read>
 8008460:	1c43      	adds	r3, r0, #1
 8008462:	d102      	bne.n	800846a <_read_r+0x1e>
 8008464:	682b      	ldr	r3, [r5, #0]
 8008466:	b103      	cbz	r3, 800846a <_read_r+0x1e>
 8008468:	6023      	str	r3, [r4, #0]
 800846a:	bd38      	pop	{r3, r4, r5, pc}
 800846c:	20000520 	.word	0x20000520

08008470 <_write_r>:
 8008470:	b538      	push	{r3, r4, r5, lr}
 8008472:	4d07      	ldr	r5, [pc, #28]	; (8008490 <_write_r+0x20>)
 8008474:	4604      	mov	r4, r0
 8008476:	4608      	mov	r0, r1
 8008478:	4611      	mov	r1, r2
 800847a:	2200      	movs	r2, #0
 800847c:	602a      	str	r2, [r5, #0]
 800847e:	461a      	mov	r2, r3
 8008480:	f7f9 fe45 	bl	800210e <_write>
 8008484:	1c43      	adds	r3, r0, #1
 8008486:	d102      	bne.n	800848e <_write_r+0x1e>
 8008488:	682b      	ldr	r3, [r5, #0]
 800848a:	b103      	cbz	r3, 800848e <_write_r+0x1e>
 800848c:	6023      	str	r3, [r4, #0]
 800848e:	bd38      	pop	{r3, r4, r5, pc}
 8008490:	20000520 	.word	0x20000520

08008494 <__errno>:
 8008494:	4b01      	ldr	r3, [pc, #4]	; (800849c <__errno+0x8>)
 8008496:	6818      	ldr	r0, [r3, #0]
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	20000064 	.word	0x20000064

080084a0 <__libc_init_array>:
 80084a0:	b570      	push	{r4, r5, r6, lr}
 80084a2:	4d0d      	ldr	r5, [pc, #52]	; (80084d8 <__libc_init_array+0x38>)
 80084a4:	4c0d      	ldr	r4, [pc, #52]	; (80084dc <__libc_init_array+0x3c>)
 80084a6:	1b64      	subs	r4, r4, r5
 80084a8:	10a4      	asrs	r4, r4, #2
 80084aa:	2600      	movs	r6, #0
 80084ac:	42a6      	cmp	r6, r4
 80084ae:	d109      	bne.n	80084c4 <__libc_init_array+0x24>
 80084b0:	4d0b      	ldr	r5, [pc, #44]	; (80084e0 <__libc_init_array+0x40>)
 80084b2:	4c0c      	ldr	r4, [pc, #48]	; (80084e4 <__libc_init_array+0x44>)
 80084b4:	f002 f894 	bl	800a5e0 <_init>
 80084b8:	1b64      	subs	r4, r4, r5
 80084ba:	10a4      	asrs	r4, r4, #2
 80084bc:	2600      	movs	r6, #0
 80084be:	42a6      	cmp	r6, r4
 80084c0:	d105      	bne.n	80084ce <__libc_init_array+0x2e>
 80084c2:	bd70      	pop	{r4, r5, r6, pc}
 80084c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80084c8:	4798      	blx	r3
 80084ca:	3601      	adds	r6, #1
 80084cc:	e7ee      	b.n	80084ac <__libc_init_array+0xc>
 80084ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80084d2:	4798      	blx	r3
 80084d4:	3601      	adds	r6, #1
 80084d6:	e7f2      	b.n	80084be <__libc_init_array+0x1e>
 80084d8:	0800aa34 	.word	0x0800aa34
 80084dc:	0800aa34 	.word	0x0800aa34
 80084e0:	0800aa34 	.word	0x0800aa34
 80084e4:	0800aa38 	.word	0x0800aa38

080084e8 <__retarget_lock_init_recursive>:
 80084e8:	4770      	bx	lr

080084ea <__retarget_lock_acquire_recursive>:
 80084ea:	4770      	bx	lr

080084ec <__retarget_lock_release_recursive>:
 80084ec:	4770      	bx	lr

080084ee <quorem>:
 80084ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f2:	6903      	ldr	r3, [r0, #16]
 80084f4:	690c      	ldr	r4, [r1, #16]
 80084f6:	42a3      	cmp	r3, r4
 80084f8:	4607      	mov	r7, r0
 80084fa:	db7e      	blt.n	80085fa <quorem+0x10c>
 80084fc:	3c01      	subs	r4, #1
 80084fe:	f101 0814 	add.w	r8, r1, #20
 8008502:	f100 0514 	add.w	r5, r0, #20
 8008506:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800850a:	9301      	str	r3, [sp, #4]
 800850c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008510:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008514:	3301      	adds	r3, #1
 8008516:	429a      	cmp	r2, r3
 8008518:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800851c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008520:	fbb2 f6f3 	udiv	r6, r2, r3
 8008524:	d331      	bcc.n	800858a <quorem+0x9c>
 8008526:	f04f 0e00 	mov.w	lr, #0
 800852a:	4640      	mov	r0, r8
 800852c:	46ac      	mov	ip, r5
 800852e:	46f2      	mov	sl, lr
 8008530:	f850 2b04 	ldr.w	r2, [r0], #4
 8008534:	b293      	uxth	r3, r2
 8008536:	fb06 e303 	mla	r3, r6, r3, lr
 800853a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800853e:	0c1a      	lsrs	r2, r3, #16
 8008540:	b29b      	uxth	r3, r3
 8008542:	ebaa 0303 	sub.w	r3, sl, r3
 8008546:	f8dc a000 	ldr.w	sl, [ip]
 800854a:	fa13 f38a 	uxtah	r3, r3, sl
 800854e:	fb06 220e 	mla	r2, r6, lr, r2
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	9b00      	ldr	r3, [sp, #0]
 8008556:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800855a:	b292      	uxth	r2, r2
 800855c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008560:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008564:	f8bd 3000 	ldrh.w	r3, [sp]
 8008568:	4581      	cmp	r9, r0
 800856a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800856e:	f84c 3b04 	str.w	r3, [ip], #4
 8008572:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008576:	d2db      	bcs.n	8008530 <quorem+0x42>
 8008578:	f855 300b 	ldr.w	r3, [r5, fp]
 800857c:	b92b      	cbnz	r3, 800858a <quorem+0x9c>
 800857e:	9b01      	ldr	r3, [sp, #4]
 8008580:	3b04      	subs	r3, #4
 8008582:	429d      	cmp	r5, r3
 8008584:	461a      	mov	r2, r3
 8008586:	d32c      	bcc.n	80085e2 <quorem+0xf4>
 8008588:	613c      	str	r4, [r7, #16]
 800858a:	4638      	mov	r0, r7
 800858c:	f001 f9a6 	bl	80098dc <__mcmp>
 8008590:	2800      	cmp	r0, #0
 8008592:	db22      	blt.n	80085da <quorem+0xec>
 8008594:	3601      	adds	r6, #1
 8008596:	4629      	mov	r1, r5
 8008598:	2000      	movs	r0, #0
 800859a:	f858 2b04 	ldr.w	r2, [r8], #4
 800859e:	f8d1 c000 	ldr.w	ip, [r1]
 80085a2:	b293      	uxth	r3, r2
 80085a4:	1ac3      	subs	r3, r0, r3
 80085a6:	0c12      	lsrs	r2, r2, #16
 80085a8:	fa13 f38c 	uxtah	r3, r3, ip
 80085ac:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80085b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085ba:	45c1      	cmp	r9, r8
 80085bc:	f841 3b04 	str.w	r3, [r1], #4
 80085c0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80085c4:	d2e9      	bcs.n	800859a <quorem+0xac>
 80085c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085ce:	b922      	cbnz	r2, 80085da <quorem+0xec>
 80085d0:	3b04      	subs	r3, #4
 80085d2:	429d      	cmp	r5, r3
 80085d4:	461a      	mov	r2, r3
 80085d6:	d30a      	bcc.n	80085ee <quorem+0x100>
 80085d8:	613c      	str	r4, [r7, #16]
 80085da:	4630      	mov	r0, r6
 80085dc:	b003      	add	sp, #12
 80085de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085e2:	6812      	ldr	r2, [r2, #0]
 80085e4:	3b04      	subs	r3, #4
 80085e6:	2a00      	cmp	r2, #0
 80085e8:	d1ce      	bne.n	8008588 <quorem+0x9a>
 80085ea:	3c01      	subs	r4, #1
 80085ec:	e7c9      	b.n	8008582 <quorem+0x94>
 80085ee:	6812      	ldr	r2, [r2, #0]
 80085f0:	3b04      	subs	r3, #4
 80085f2:	2a00      	cmp	r2, #0
 80085f4:	d1f0      	bne.n	80085d8 <quorem+0xea>
 80085f6:	3c01      	subs	r4, #1
 80085f8:	e7eb      	b.n	80085d2 <quorem+0xe4>
 80085fa:	2000      	movs	r0, #0
 80085fc:	e7ee      	b.n	80085dc <quorem+0xee>
	...

08008600 <_dtoa_r>:
 8008600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008604:	ed2d 8b04 	vpush	{d8-d9}
 8008608:	69c5      	ldr	r5, [r0, #28]
 800860a:	b093      	sub	sp, #76	; 0x4c
 800860c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008610:	ec57 6b10 	vmov	r6, r7, d0
 8008614:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008618:	9107      	str	r1, [sp, #28]
 800861a:	4604      	mov	r4, r0
 800861c:	920a      	str	r2, [sp, #40]	; 0x28
 800861e:	930d      	str	r3, [sp, #52]	; 0x34
 8008620:	b975      	cbnz	r5, 8008640 <_dtoa_r+0x40>
 8008622:	2010      	movs	r0, #16
 8008624:	f000 fe2a 	bl	800927c <malloc>
 8008628:	4602      	mov	r2, r0
 800862a:	61e0      	str	r0, [r4, #28]
 800862c:	b920      	cbnz	r0, 8008638 <_dtoa_r+0x38>
 800862e:	4bae      	ldr	r3, [pc, #696]	; (80088e8 <_dtoa_r+0x2e8>)
 8008630:	21ef      	movs	r1, #239	; 0xef
 8008632:	48ae      	ldr	r0, [pc, #696]	; (80088ec <_dtoa_r+0x2ec>)
 8008634:	f001 fc90 	bl	8009f58 <__assert_func>
 8008638:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800863c:	6005      	str	r5, [r0, #0]
 800863e:	60c5      	str	r5, [r0, #12]
 8008640:	69e3      	ldr	r3, [r4, #28]
 8008642:	6819      	ldr	r1, [r3, #0]
 8008644:	b151      	cbz	r1, 800865c <_dtoa_r+0x5c>
 8008646:	685a      	ldr	r2, [r3, #4]
 8008648:	604a      	str	r2, [r1, #4]
 800864a:	2301      	movs	r3, #1
 800864c:	4093      	lsls	r3, r2
 800864e:	608b      	str	r3, [r1, #8]
 8008650:	4620      	mov	r0, r4
 8008652:	f000 ff07 	bl	8009464 <_Bfree>
 8008656:	69e3      	ldr	r3, [r4, #28]
 8008658:	2200      	movs	r2, #0
 800865a:	601a      	str	r2, [r3, #0]
 800865c:	1e3b      	subs	r3, r7, #0
 800865e:	bfbb      	ittet	lt
 8008660:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008664:	9303      	strlt	r3, [sp, #12]
 8008666:	2300      	movge	r3, #0
 8008668:	2201      	movlt	r2, #1
 800866a:	bfac      	ite	ge
 800866c:	f8c8 3000 	strge.w	r3, [r8]
 8008670:	f8c8 2000 	strlt.w	r2, [r8]
 8008674:	4b9e      	ldr	r3, [pc, #632]	; (80088f0 <_dtoa_r+0x2f0>)
 8008676:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800867a:	ea33 0308 	bics.w	r3, r3, r8
 800867e:	d11b      	bne.n	80086b8 <_dtoa_r+0xb8>
 8008680:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008682:	f242 730f 	movw	r3, #9999	; 0x270f
 8008686:	6013      	str	r3, [r2, #0]
 8008688:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800868c:	4333      	orrs	r3, r6
 800868e:	f000 8593 	beq.w	80091b8 <_dtoa_r+0xbb8>
 8008692:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008694:	b963      	cbnz	r3, 80086b0 <_dtoa_r+0xb0>
 8008696:	4b97      	ldr	r3, [pc, #604]	; (80088f4 <_dtoa_r+0x2f4>)
 8008698:	e027      	b.n	80086ea <_dtoa_r+0xea>
 800869a:	4b97      	ldr	r3, [pc, #604]	; (80088f8 <_dtoa_r+0x2f8>)
 800869c:	9300      	str	r3, [sp, #0]
 800869e:	3308      	adds	r3, #8
 80086a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80086a2:	6013      	str	r3, [r2, #0]
 80086a4:	9800      	ldr	r0, [sp, #0]
 80086a6:	b013      	add	sp, #76	; 0x4c
 80086a8:	ecbd 8b04 	vpop	{d8-d9}
 80086ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b0:	4b90      	ldr	r3, [pc, #576]	; (80088f4 <_dtoa_r+0x2f4>)
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	3303      	adds	r3, #3
 80086b6:	e7f3      	b.n	80086a0 <_dtoa_r+0xa0>
 80086b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80086bc:	2200      	movs	r2, #0
 80086be:	ec51 0b17 	vmov	r0, r1, d7
 80086c2:	eeb0 8a47 	vmov.f32	s16, s14
 80086c6:	eef0 8a67 	vmov.f32	s17, s15
 80086ca:	2300      	movs	r3, #0
 80086cc:	f7f8 f9fc 	bl	8000ac8 <__aeabi_dcmpeq>
 80086d0:	4681      	mov	r9, r0
 80086d2:	b160      	cbz	r0, 80086ee <_dtoa_r+0xee>
 80086d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086d6:	2301      	movs	r3, #1
 80086d8:	6013      	str	r3, [r2, #0]
 80086da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f000 8568 	beq.w	80091b2 <_dtoa_r+0xbb2>
 80086e2:	4b86      	ldr	r3, [pc, #536]	; (80088fc <_dtoa_r+0x2fc>)
 80086e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80086e6:	6013      	str	r3, [r2, #0]
 80086e8:	3b01      	subs	r3, #1
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	e7da      	b.n	80086a4 <_dtoa_r+0xa4>
 80086ee:	aa10      	add	r2, sp, #64	; 0x40
 80086f0:	a911      	add	r1, sp, #68	; 0x44
 80086f2:	4620      	mov	r0, r4
 80086f4:	eeb0 0a48 	vmov.f32	s0, s16
 80086f8:	eef0 0a68 	vmov.f32	s1, s17
 80086fc:	f001 f994 	bl	8009a28 <__d2b>
 8008700:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008704:	4682      	mov	sl, r0
 8008706:	2d00      	cmp	r5, #0
 8008708:	d07f      	beq.n	800880a <_dtoa_r+0x20a>
 800870a:	ee18 3a90 	vmov	r3, s17
 800870e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008712:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008716:	ec51 0b18 	vmov	r0, r1, d8
 800871a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800871e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008722:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008726:	4619      	mov	r1, r3
 8008728:	2200      	movs	r2, #0
 800872a:	4b75      	ldr	r3, [pc, #468]	; (8008900 <_dtoa_r+0x300>)
 800872c:	f7f7 fdac 	bl	8000288 <__aeabi_dsub>
 8008730:	a367      	add	r3, pc, #412	; (adr r3, 80088d0 <_dtoa_r+0x2d0>)
 8008732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008736:	f7f7 ff5f 	bl	80005f8 <__aeabi_dmul>
 800873a:	a367      	add	r3, pc, #412	; (adr r3, 80088d8 <_dtoa_r+0x2d8>)
 800873c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008740:	f7f7 fda4 	bl	800028c <__adddf3>
 8008744:	4606      	mov	r6, r0
 8008746:	4628      	mov	r0, r5
 8008748:	460f      	mov	r7, r1
 800874a:	f7f7 feeb 	bl	8000524 <__aeabi_i2d>
 800874e:	a364      	add	r3, pc, #400	; (adr r3, 80088e0 <_dtoa_r+0x2e0>)
 8008750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008754:	f7f7 ff50 	bl	80005f8 <__aeabi_dmul>
 8008758:	4602      	mov	r2, r0
 800875a:	460b      	mov	r3, r1
 800875c:	4630      	mov	r0, r6
 800875e:	4639      	mov	r1, r7
 8008760:	f7f7 fd94 	bl	800028c <__adddf3>
 8008764:	4606      	mov	r6, r0
 8008766:	460f      	mov	r7, r1
 8008768:	f7f8 f9f6 	bl	8000b58 <__aeabi_d2iz>
 800876c:	2200      	movs	r2, #0
 800876e:	4683      	mov	fp, r0
 8008770:	2300      	movs	r3, #0
 8008772:	4630      	mov	r0, r6
 8008774:	4639      	mov	r1, r7
 8008776:	f7f8 f9b1 	bl	8000adc <__aeabi_dcmplt>
 800877a:	b148      	cbz	r0, 8008790 <_dtoa_r+0x190>
 800877c:	4658      	mov	r0, fp
 800877e:	f7f7 fed1 	bl	8000524 <__aeabi_i2d>
 8008782:	4632      	mov	r2, r6
 8008784:	463b      	mov	r3, r7
 8008786:	f7f8 f99f 	bl	8000ac8 <__aeabi_dcmpeq>
 800878a:	b908      	cbnz	r0, 8008790 <_dtoa_r+0x190>
 800878c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008790:	f1bb 0f16 	cmp.w	fp, #22
 8008794:	d857      	bhi.n	8008846 <_dtoa_r+0x246>
 8008796:	4b5b      	ldr	r3, [pc, #364]	; (8008904 <_dtoa_r+0x304>)
 8008798:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800879c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a0:	ec51 0b18 	vmov	r0, r1, d8
 80087a4:	f7f8 f99a 	bl	8000adc <__aeabi_dcmplt>
 80087a8:	2800      	cmp	r0, #0
 80087aa:	d04e      	beq.n	800884a <_dtoa_r+0x24a>
 80087ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80087b0:	2300      	movs	r3, #0
 80087b2:	930c      	str	r3, [sp, #48]	; 0x30
 80087b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087b6:	1b5b      	subs	r3, r3, r5
 80087b8:	1e5a      	subs	r2, r3, #1
 80087ba:	bf45      	ittet	mi
 80087bc:	f1c3 0301 	rsbmi	r3, r3, #1
 80087c0:	9305      	strmi	r3, [sp, #20]
 80087c2:	2300      	movpl	r3, #0
 80087c4:	2300      	movmi	r3, #0
 80087c6:	9206      	str	r2, [sp, #24]
 80087c8:	bf54      	ite	pl
 80087ca:	9305      	strpl	r3, [sp, #20]
 80087cc:	9306      	strmi	r3, [sp, #24]
 80087ce:	f1bb 0f00 	cmp.w	fp, #0
 80087d2:	db3c      	blt.n	800884e <_dtoa_r+0x24e>
 80087d4:	9b06      	ldr	r3, [sp, #24]
 80087d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80087da:	445b      	add	r3, fp
 80087dc:	9306      	str	r3, [sp, #24]
 80087de:	2300      	movs	r3, #0
 80087e0:	9308      	str	r3, [sp, #32]
 80087e2:	9b07      	ldr	r3, [sp, #28]
 80087e4:	2b09      	cmp	r3, #9
 80087e6:	d868      	bhi.n	80088ba <_dtoa_r+0x2ba>
 80087e8:	2b05      	cmp	r3, #5
 80087ea:	bfc4      	itt	gt
 80087ec:	3b04      	subgt	r3, #4
 80087ee:	9307      	strgt	r3, [sp, #28]
 80087f0:	9b07      	ldr	r3, [sp, #28]
 80087f2:	f1a3 0302 	sub.w	r3, r3, #2
 80087f6:	bfcc      	ite	gt
 80087f8:	2500      	movgt	r5, #0
 80087fa:	2501      	movle	r5, #1
 80087fc:	2b03      	cmp	r3, #3
 80087fe:	f200 8085 	bhi.w	800890c <_dtoa_r+0x30c>
 8008802:	e8df f003 	tbb	[pc, r3]
 8008806:	3b2e      	.short	0x3b2e
 8008808:	5839      	.short	0x5839
 800880a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800880e:	441d      	add	r5, r3
 8008810:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008814:	2b20      	cmp	r3, #32
 8008816:	bfc1      	itttt	gt
 8008818:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800881c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008820:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008824:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008828:	bfd6      	itet	le
 800882a:	f1c3 0320 	rsble	r3, r3, #32
 800882e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008832:	fa06 f003 	lslle.w	r0, r6, r3
 8008836:	f7f7 fe65 	bl	8000504 <__aeabi_ui2d>
 800883a:	2201      	movs	r2, #1
 800883c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008840:	3d01      	subs	r5, #1
 8008842:	920e      	str	r2, [sp, #56]	; 0x38
 8008844:	e76f      	b.n	8008726 <_dtoa_r+0x126>
 8008846:	2301      	movs	r3, #1
 8008848:	e7b3      	b.n	80087b2 <_dtoa_r+0x1b2>
 800884a:	900c      	str	r0, [sp, #48]	; 0x30
 800884c:	e7b2      	b.n	80087b4 <_dtoa_r+0x1b4>
 800884e:	9b05      	ldr	r3, [sp, #20]
 8008850:	eba3 030b 	sub.w	r3, r3, fp
 8008854:	9305      	str	r3, [sp, #20]
 8008856:	f1cb 0300 	rsb	r3, fp, #0
 800885a:	9308      	str	r3, [sp, #32]
 800885c:	2300      	movs	r3, #0
 800885e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008860:	e7bf      	b.n	80087e2 <_dtoa_r+0x1e2>
 8008862:	2300      	movs	r3, #0
 8008864:	9309      	str	r3, [sp, #36]	; 0x24
 8008866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008868:	2b00      	cmp	r3, #0
 800886a:	dc52      	bgt.n	8008912 <_dtoa_r+0x312>
 800886c:	2301      	movs	r3, #1
 800886e:	9301      	str	r3, [sp, #4]
 8008870:	9304      	str	r3, [sp, #16]
 8008872:	461a      	mov	r2, r3
 8008874:	920a      	str	r2, [sp, #40]	; 0x28
 8008876:	e00b      	b.n	8008890 <_dtoa_r+0x290>
 8008878:	2301      	movs	r3, #1
 800887a:	e7f3      	b.n	8008864 <_dtoa_r+0x264>
 800887c:	2300      	movs	r3, #0
 800887e:	9309      	str	r3, [sp, #36]	; 0x24
 8008880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008882:	445b      	add	r3, fp
 8008884:	9301      	str	r3, [sp, #4]
 8008886:	3301      	adds	r3, #1
 8008888:	2b01      	cmp	r3, #1
 800888a:	9304      	str	r3, [sp, #16]
 800888c:	bfb8      	it	lt
 800888e:	2301      	movlt	r3, #1
 8008890:	69e0      	ldr	r0, [r4, #28]
 8008892:	2100      	movs	r1, #0
 8008894:	2204      	movs	r2, #4
 8008896:	f102 0614 	add.w	r6, r2, #20
 800889a:	429e      	cmp	r6, r3
 800889c:	d93d      	bls.n	800891a <_dtoa_r+0x31a>
 800889e:	6041      	str	r1, [r0, #4]
 80088a0:	4620      	mov	r0, r4
 80088a2:	f000 fd9f 	bl	80093e4 <_Balloc>
 80088a6:	9000      	str	r0, [sp, #0]
 80088a8:	2800      	cmp	r0, #0
 80088aa:	d139      	bne.n	8008920 <_dtoa_r+0x320>
 80088ac:	4b16      	ldr	r3, [pc, #88]	; (8008908 <_dtoa_r+0x308>)
 80088ae:	4602      	mov	r2, r0
 80088b0:	f240 11af 	movw	r1, #431	; 0x1af
 80088b4:	e6bd      	b.n	8008632 <_dtoa_r+0x32>
 80088b6:	2301      	movs	r3, #1
 80088b8:	e7e1      	b.n	800887e <_dtoa_r+0x27e>
 80088ba:	2501      	movs	r5, #1
 80088bc:	2300      	movs	r3, #0
 80088be:	9307      	str	r3, [sp, #28]
 80088c0:	9509      	str	r5, [sp, #36]	; 0x24
 80088c2:	f04f 33ff 	mov.w	r3, #4294967295
 80088c6:	9301      	str	r3, [sp, #4]
 80088c8:	9304      	str	r3, [sp, #16]
 80088ca:	2200      	movs	r2, #0
 80088cc:	2312      	movs	r3, #18
 80088ce:	e7d1      	b.n	8008874 <_dtoa_r+0x274>
 80088d0:	636f4361 	.word	0x636f4361
 80088d4:	3fd287a7 	.word	0x3fd287a7
 80088d8:	8b60c8b3 	.word	0x8b60c8b3
 80088dc:	3fc68a28 	.word	0x3fc68a28
 80088e0:	509f79fb 	.word	0x509f79fb
 80088e4:	3fd34413 	.word	0x3fd34413
 80088e8:	0800a6fd 	.word	0x0800a6fd
 80088ec:	0800a714 	.word	0x0800a714
 80088f0:	7ff00000 	.word	0x7ff00000
 80088f4:	0800a6f9 	.word	0x0800a6f9
 80088f8:	0800a6f0 	.word	0x0800a6f0
 80088fc:	0800a6cd 	.word	0x0800a6cd
 8008900:	3ff80000 	.word	0x3ff80000
 8008904:	0800a800 	.word	0x0800a800
 8008908:	0800a76c 	.word	0x0800a76c
 800890c:	2301      	movs	r3, #1
 800890e:	9309      	str	r3, [sp, #36]	; 0x24
 8008910:	e7d7      	b.n	80088c2 <_dtoa_r+0x2c2>
 8008912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008914:	9301      	str	r3, [sp, #4]
 8008916:	9304      	str	r3, [sp, #16]
 8008918:	e7ba      	b.n	8008890 <_dtoa_r+0x290>
 800891a:	3101      	adds	r1, #1
 800891c:	0052      	lsls	r2, r2, #1
 800891e:	e7ba      	b.n	8008896 <_dtoa_r+0x296>
 8008920:	69e3      	ldr	r3, [r4, #28]
 8008922:	9a00      	ldr	r2, [sp, #0]
 8008924:	601a      	str	r2, [r3, #0]
 8008926:	9b04      	ldr	r3, [sp, #16]
 8008928:	2b0e      	cmp	r3, #14
 800892a:	f200 80a8 	bhi.w	8008a7e <_dtoa_r+0x47e>
 800892e:	2d00      	cmp	r5, #0
 8008930:	f000 80a5 	beq.w	8008a7e <_dtoa_r+0x47e>
 8008934:	f1bb 0f00 	cmp.w	fp, #0
 8008938:	dd38      	ble.n	80089ac <_dtoa_r+0x3ac>
 800893a:	4bc0      	ldr	r3, [pc, #768]	; (8008c3c <_dtoa_r+0x63c>)
 800893c:	f00b 020f 	and.w	r2, fp, #15
 8008940:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008944:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008948:	e9d3 6700 	ldrd	r6, r7, [r3]
 800894c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008950:	d019      	beq.n	8008986 <_dtoa_r+0x386>
 8008952:	4bbb      	ldr	r3, [pc, #748]	; (8008c40 <_dtoa_r+0x640>)
 8008954:	ec51 0b18 	vmov	r0, r1, d8
 8008958:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800895c:	f7f7 ff76 	bl	800084c <__aeabi_ddiv>
 8008960:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008964:	f008 080f 	and.w	r8, r8, #15
 8008968:	2503      	movs	r5, #3
 800896a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008c40 <_dtoa_r+0x640>
 800896e:	f1b8 0f00 	cmp.w	r8, #0
 8008972:	d10a      	bne.n	800898a <_dtoa_r+0x38a>
 8008974:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008978:	4632      	mov	r2, r6
 800897a:	463b      	mov	r3, r7
 800897c:	f7f7 ff66 	bl	800084c <__aeabi_ddiv>
 8008980:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008984:	e02b      	b.n	80089de <_dtoa_r+0x3de>
 8008986:	2502      	movs	r5, #2
 8008988:	e7ef      	b.n	800896a <_dtoa_r+0x36a>
 800898a:	f018 0f01 	tst.w	r8, #1
 800898e:	d008      	beq.n	80089a2 <_dtoa_r+0x3a2>
 8008990:	4630      	mov	r0, r6
 8008992:	4639      	mov	r1, r7
 8008994:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008998:	f7f7 fe2e 	bl	80005f8 <__aeabi_dmul>
 800899c:	3501      	adds	r5, #1
 800899e:	4606      	mov	r6, r0
 80089a0:	460f      	mov	r7, r1
 80089a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80089a6:	f109 0908 	add.w	r9, r9, #8
 80089aa:	e7e0      	b.n	800896e <_dtoa_r+0x36e>
 80089ac:	f000 809f 	beq.w	8008aee <_dtoa_r+0x4ee>
 80089b0:	f1cb 0600 	rsb	r6, fp, #0
 80089b4:	4ba1      	ldr	r3, [pc, #644]	; (8008c3c <_dtoa_r+0x63c>)
 80089b6:	4fa2      	ldr	r7, [pc, #648]	; (8008c40 <_dtoa_r+0x640>)
 80089b8:	f006 020f 	and.w	r2, r6, #15
 80089bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c4:	ec51 0b18 	vmov	r0, r1, d8
 80089c8:	f7f7 fe16 	bl	80005f8 <__aeabi_dmul>
 80089cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089d0:	1136      	asrs	r6, r6, #4
 80089d2:	2300      	movs	r3, #0
 80089d4:	2502      	movs	r5, #2
 80089d6:	2e00      	cmp	r6, #0
 80089d8:	d17e      	bne.n	8008ad8 <_dtoa_r+0x4d8>
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1d0      	bne.n	8008980 <_dtoa_r+0x380>
 80089de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	f000 8084 	beq.w	8008af2 <_dtoa_r+0x4f2>
 80089ea:	4b96      	ldr	r3, [pc, #600]	; (8008c44 <_dtoa_r+0x644>)
 80089ec:	2200      	movs	r2, #0
 80089ee:	4640      	mov	r0, r8
 80089f0:	4649      	mov	r1, r9
 80089f2:	f7f8 f873 	bl	8000adc <__aeabi_dcmplt>
 80089f6:	2800      	cmp	r0, #0
 80089f8:	d07b      	beq.n	8008af2 <_dtoa_r+0x4f2>
 80089fa:	9b04      	ldr	r3, [sp, #16]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d078      	beq.n	8008af2 <_dtoa_r+0x4f2>
 8008a00:	9b01      	ldr	r3, [sp, #4]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	dd39      	ble.n	8008a7a <_dtoa_r+0x47a>
 8008a06:	4b90      	ldr	r3, [pc, #576]	; (8008c48 <_dtoa_r+0x648>)
 8008a08:	2200      	movs	r2, #0
 8008a0a:	4640      	mov	r0, r8
 8008a0c:	4649      	mov	r1, r9
 8008a0e:	f7f7 fdf3 	bl	80005f8 <__aeabi_dmul>
 8008a12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a16:	9e01      	ldr	r6, [sp, #4]
 8008a18:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008a1c:	3501      	adds	r5, #1
 8008a1e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008a22:	4628      	mov	r0, r5
 8008a24:	f7f7 fd7e 	bl	8000524 <__aeabi_i2d>
 8008a28:	4642      	mov	r2, r8
 8008a2a:	464b      	mov	r3, r9
 8008a2c:	f7f7 fde4 	bl	80005f8 <__aeabi_dmul>
 8008a30:	4b86      	ldr	r3, [pc, #536]	; (8008c4c <_dtoa_r+0x64c>)
 8008a32:	2200      	movs	r2, #0
 8008a34:	f7f7 fc2a 	bl	800028c <__adddf3>
 8008a38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008a3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a40:	9303      	str	r3, [sp, #12]
 8008a42:	2e00      	cmp	r6, #0
 8008a44:	d158      	bne.n	8008af8 <_dtoa_r+0x4f8>
 8008a46:	4b82      	ldr	r3, [pc, #520]	; (8008c50 <_dtoa_r+0x650>)
 8008a48:	2200      	movs	r2, #0
 8008a4a:	4640      	mov	r0, r8
 8008a4c:	4649      	mov	r1, r9
 8008a4e:	f7f7 fc1b 	bl	8000288 <__aeabi_dsub>
 8008a52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a56:	4680      	mov	r8, r0
 8008a58:	4689      	mov	r9, r1
 8008a5a:	f7f8 f85d 	bl	8000b18 <__aeabi_dcmpgt>
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	f040 8296 	bne.w	8008f90 <_dtoa_r+0x990>
 8008a64:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008a68:	4640      	mov	r0, r8
 8008a6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a6e:	4649      	mov	r1, r9
 8008a70:	f7f8 f834 	bl	8000adc <__aeabi_dcmplt>
 8008a74:	2800      	cmp	r0, #0
 8008a76:	f040 8289 	bne.w	8008f8c <_dtoa_r+0x98c>
 8008a7a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008a7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f2c0 814e 	blt.w	8008d22 <_dtoa_r+0x722>
 8008a86:	f1bb 0f0e 	cmp.w	fp, #14
 8008a8a:	f300 814a 	bgt.w	8008d22 <_dtoa_r+0x722>
 8008a8e:	4b6b      	ldr	r3, [pc, #428]	; (8008c3c <_dtoa_r+0x63c>)
 8008a90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008a94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f280 80dc 	bge.w	8008c58 <_dtoa_r+0x658>
 8008aa0:	9b04      	ldr	r3, [sp, #16]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f300 80d8 	bgt.w	8008c58 <_dtoa_r+0x658>
 8008aa8:	f040 826f 	bne.w	8008f8a <_dtoa_r+0x98a>
 8008aac:	4b68      	ldr	r3, [pc, #416]	; (8008c50 <_dtoa_r+0x650>)
 8008aae:	2200      	movs	r2, #0
 8008ab0:	4640      	mov	r0, r8
 8008ab2:	4649      	mov	r1, r9
 8008ab4:	f7f7 fda0 	bl	80005f8 <__aeabi_dmul>
 8008ab8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008abc:	f7f8 f822 	bl	8000b04 <__aeabi_dcmpge>
 8008ac0:	9e04      	ldr	r6, [sp, #16]
 8008ac2:	4637      	mov	r7, r6
 8008ac4:	2800      	cmp	r0, #0
 8008ac6:	f040 8245 	bne.w	8008f54 <_dtoa_r+0x954>
 8008aca:	9d00      	ldr	r5, [sp, #0]
 8008acc:	2331      	movs	r3, #49	; 0x31
 8008ace:	f805 3b01 	strb.w	r3, [r5], #1
 8008ad2:	f10b 0b01 	add.w	fp, fp, #1
 8008ad6:	e241      	b.n	8008f5c <_dtoa_r+0x95c>
 8008ad8:	07f2      	lsls	r2, r6, #31
 8008ada:	d505      	bpl.n	8008ae8 <_dtoa_r+0x4e8>
 8008adc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ae0:	f7f7 fd8a 	bl	80005f8 <__aeabi_dmul>
 8008ae4:	3501      	adds	r5, #1
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	1076      	asrs	r6, r6, #1
 8008aea:	3708      	adds	r7, #8
 8008aec:	e773      	b.n	80089d6 <_dtoa_r+0x3d6>
 8008aee:	2502      	movs	r5, #2
 8008af0:	e775      	b.n	80089de <_dtoa_r+0x3de>
 8008af2:	9e04      	ldr	r6, [sp, #16]
 8008af4:	465f      	mov	r7, fp
 8008af6:	e792      	b.n	8008a1e <_dtoa_r+0x41e>
 8008af8:	9900      	ldr	r1, [sp, #0]
 8008afa:	4b50      	ldr	r3, [pc, #320]	; (8008c3c <_dtoa_r+0x63c>)
 8008afc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b00:	4431      	add	r1, r6
 8008b02:	9102      	str	r1, [sp, #8]
 8008b04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b06:	eeb0 9a47 	vmov.f32	s18, s14
 8008b0a:	eef0 9a67 	vmov.f32	s19, s15
 8008b0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008b12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008b16:	2900      	cmp	r1, #0
 8008b18:	d044      	beq.n	8008ba4 <_dtoa_r+0x5a4>
 8008b1a:	494e      	ldr	r1, [pc, #312]	; (8008c54 <_dtoa_r+0x654>)
 8008b1c:	2000      	movs	r0, #0
 8008b1e:	f7f7 fe95 	bl	800084c <__aeabi_ddiv>
 8008b22:	ec53 2b19 	vmov	r2, r3, d9
 8008b26:	f7f7 fbaf 	bl	8000288 <__aeabi_dsub>
 8008b2a:	9d00      	ldr	r5, [sp, #0]
 8008b2c:	ec41 0b19 	vmov	d9, r0, r1
 8008b30:	4649      	mov	r1, r9
 8008b32:	4640      	mov	r0, r8
 8008b34:	f7f8 f810 	bl	8000b58 <__aeabi_d2iz>
 8008b38:	4606      	mov	r6, r0
 8008b3a:	f7f7 fcf3 	bl	8000524 <__aeabi_i2d>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	460b      	mov	r3, r1
 8008b42:	4640      	mov	r0, r8
 8008b44:	4649      	mov	r1, r9
 8008b46:	f7f7 fb9f 	bl	8000288 <__aeabi_dsub>
 8008b4a:	3630      	adds	r6, #48	; 0x30
 8008b4c:	f805 6b01 	strb.w	r6, [r5], #1
 8008b50:	ec53 2b19 	vmov	r2, r3, d9
 8008b54:	4680      	mov	r8, r0
 8008b56:	4689      	mov	r9, r1
 8008b58:	f7f7 ffc0 	bl	8000adc <__aeabi_dcmplt>
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	d164      	bne.n	8008c2a <_dtoa_r+0x62a>
 8008b60:	4642      	mov	r2, r8
 8008b62:	464b      	mov	r3, r9
 8008b64:	4937      	ldr	r1, [pc, #220]	; (8008c44 <_dtoa_r+0x644>)
 8008b66:	2000      	movs	r0, #0
 8008b68:	f7f7 fb8e 	bl	8000288 <__aeabi_dsub>
 8008b6c:	ec53 2b19 	vmov	r2, r3, d9
 8008b70:	f7f7 ffb4 	bl	8000adc <__aeabi_dcmplt>
 8008b74:	2800      	cmp	r0, #0
 8008b76:	f040 80b6 	bne.w	8008ce6 <_dtoa_r+0x6e6>
 8008b7a:	9b02      	ldr	r3, [sp, #8]
 8008b7c:	429d      	cmp	r5, r3
 8008b7e:	f43f af7c 	beq.w	8008a7a <_dtoa_r+0x47a>
 8008b82:	4b31      	ldr	r3, [pc, #196]	; (8008c48 <_dtoa_r+0x648>)
 8008b84:	ec51 0b19 	vmov	r0, r1, d9
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f7f7 fd35 	bl	80005f8 <__aeabi_dmul>
 8008b8e:	4b2e      	ldr	r3, [pc, #184]	; (8008c48 <_dtoa_r+0x648>)
 8008b90:	ec41 0b19 	vmov	d9, r0, r1
 8008b94:	2200      	movs	r2, #0
 8008b96:	4640      	mov	r0, r8
 8008b98:	4649      	mov	r1, r9
 8008b9a:	f7f7 fd2d 	bl	80005f8 <__aeabi_dmul>
 8008b9e:	4680      	mov	r8, r0
 8008ba0:	4689      	mov	r9, r1
 8008ba2:	e7c5      	b.n	8008b30 <_dtoa_r+0x530>
 8008ba4:	ec51 0b17 	vmov	r0, r1, d7
 8008ba8:	f7f7 fd26 	bl	80005f8 <__aeabi_dmul>
 8008bac:	9b02      	ldr	r3, [sp, #8]
 8008bae:	9d00      	ldr	r5, [sp, #0]
 8008bb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bb2:	ec41 0b19 	vmov	d9, r0, r1
 8008bb6:	4649      	mov	r1, r9
 8008bb8:	4640      	mov	r0, r8
 8008bba:	f7f7 ffcd 	bl	8000b58 <__aeabi_d2iz>
 8008bbe:	4606      	mov	r6, r0
 8008bc0:	f7f7 fcb0 	bl	8000524 <__aeabi_i2d>
 8008bc4:	3630      	adds	r6, #48	; 0x30
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	460b      	mov	r3, r1
 8008bca:	4640      	mov	r0, r8
 8008bcc:	4649      	mov	r1, r9
 8008bce:	f7f7 fb5b 	bl	8000288 <__aeabi_dsub>
 8008bd2:	f805 6b01 	strb.w	r6, [r5], #1
 8008bd6:	9b02      	ldr	r3, [sp, #8]
 8008bd8:	429d      	cmp	r5, r3
 8008bda:	4680      	mov	r8, r0
 8008bdc:	4689      	mov	r9, r1
 8008bde:	f04f 0200 	mov.w	r2, #0
 8008be2:	d124      	bne.n	8008c2e <_dtoa_r+0x62e>
 8008be4:	4b1b      	ldr	r3, [pc, #108]	; (8008c54 <_dtoa_r+0x654>)
 8008be6:	ec51 0b19 	vmov	r0, r1, d9
 8008bea:	f7f7 fb4f 	bl	800028c <__adddf3>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	4640      	mov	r0, r8
 8008bf4:	4649      	mov	r1, r9
 8008bf6:	f7f7 ff8f 	bl	8000b18 <__aeabi_dcmpgt>
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	d173      	bne.n	8008ce6 <_dtoa_r+0x6e6>
 8008bfe:	ec53 2b19 	vmov	r2, r3, d9
 8008c02:	4914      	ldr	r1, [pc, #80]	; (8008c54 <_dtoa_r+0x654>)
 8008c04:	2000      	movs	r0, #0
 8008c06:	f7f7 fb3f 	bl	8000288 <__aeabi_dsub>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	4640      	mov	r0, r8
 8008c10:	4649      	mov	r1, r9
 8008c12:	f7f7 ff63 	bl	8000adc <__aeabi_dcmplt>
 8008c16:	2800      	cmp	r0, #0
 8008c18:	f43f af2f 	beq.w	8008a7a <_dtoa_r+0x47a>
 8008c1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008c1e:	1e6b      	subs	r3, r5, #1
 8008c20:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008c26:	2b30      	cmp	r3, #48	; 0x30
 8008c28:	d0f8      	beq.n	8008c1c <_dtoa_r+0x61c>
 8008c2a:	46bb      	mov	fp, r7
 8008c2c:	e04a      	b.n	8008cc4 <_dtoa_r+0x6c4>
 8008c2e:	4b06      	ldr	r3, [pc, #24]	; (8008c48 <_dtoa_r+0x648>)
 8008c30:	f7f7 fce2 	bl	80005f8 <__aeabi_dmul>
 8008c34:	4680      	mov	r8, r0
 8008c36:	4689      	mov	r9, r1
 8008c38:	e7bd      	b.n	8008bb6 <_dtoa_r+0x5b6>
 8008c3a:	bf00      	nop
 8008c3c:	0800a800 	.word	0x0800a800
 8008c40:	0800a7d8 	.word	0x0800a7d8
 8008c44:	3ff00000 	.word	0x3ff00000
 8008c48:	40240000 	.word	0x40240000
 8008c4c:	401c0000 	.word	0x401c0000
 8008c50:	40140000 	.word	0x40140000
 8008c54:	3fe00000 	.word	0x3fe00000
 8008c58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008c5c:	9d00      	ldr	r5, [sp, #0]
 8008c5e:	4642      	mov	r2, r8
 8008c60:	464b      	mov	r3, r9
 8008c62:	4630      	mov	r0, r6
 8008c64:	4639      	mov	r1, r7
 8008c66:	f7f7 fdf1 	bl	800084c <__aeabi_ddiv>
 8008c6a:	f7f7 ff75 	bl	8000b58 <__aeabi_d2iz>
 8008c6e:	9001      	str	r0, [sp, #4]
 8008c70:	f7f7 fc58 	bl	8000524 <__aeabi_i2d>
 8008c74:	4642      	mov	r2, r8
 8008c76:	464b      	mov	r3, r9
 8008c78:	f7f7 fcbe 	bl	80005f8 <__aeabi_dmul>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	460b      	mov	r3, r1
 8008c80:	4630      	mov	r0, r6
 8008c82:	4639      	mov	r1, r7
 8008c84:	f7f7 fb00 	bl	8000288 <__aeabi_dsub>
 8008c88:	9e01      	ldr	r6, [sp, #4]
 8008c8a:	9f04      	ldr	r7, [sp, #16]
 8008c8c:	3630      	adds	r6, #48	; 0x30
 8008c8e:	f805 6b01 	strb.w	r6, [r5], #1
 8008c92:	9e00      	ldr	r6, [sp, #0]
 8008c94:	1bae      	subs	r6, r5, r6
 8008c96:	42b7      	cmp	r7, r6
 8008c98:	4602      	mov	r2, r0
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	d134      	bne.n	8008d08 <_dtoa_r+0x708>
 8008c9e:	f7f7 faf5 	bl	800028c <__adddf3>
 8008ca2:	4642      	mov	r2, r8
 8008ca4:	464b      	mov	r3, r9
 8008ca6:	4606      	mov	r6, r0
 8008ca8:	460f      	mov	r7, r1
 8008caa:	f7f7 ff35 	bl	8000b18 <__aeabi_dcmpgt>
 8008cae:	b9c8      	cbnz	r0, 8008ce4 <_dtoa_r+0x6e4>
 8008cb0:	4642      	mov	r2, r8
 8008cb2:	464b      	mov	r3, r9
 8008cb4:	4630      	mov	r0, r6
 8008cb6:	4639      	mov	r1, r7
 8008cb8:	f7f7 ff06 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cbc:	b110      	cbz	r0, 8008cc4 <_dtoa_r+0x6c4>
 8008cbe:	9b01      	ldr	r3, [sp, #4]
 8008cc0:	07db      	lsls	r3, r3, #31
 8008cc2:	d40f      	bmi.n	8008ce4 <_dtoa_r+0x6e4>
 8008cc4:	4651      	mov	r1, sl
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f000 fbcc 	bl	8009464 <_Bfree>
 8008ccc:	2300      	movs	r3, #0
 8008cce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008cd0:	702b      	strb	r3, [r5, #0]
 8008cd2:	f10b 0301 	add.w	r3, fp, #1
 8008cd6:	6013      	str	r3, [r2, #0]
 8008cd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f43f ace2 	beq.w	80086a4 <_dtoa_r+0xa4>
 8008ce0:	601d      	str	r5, [r3, #0]
 8008ce2:	e4df      	b.n	80086a4 <_dtoa_r+0xa4>
 8008ce4:	465f      	mov	r7, fp
 8008ce6:	462b      	mov	r3, r5
 8008ce8:	461d      	mov	r5, r3
 8008cea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cee:	2a39      	cmp	r2, #57	; 0x39
 8008cf0:	d106      	bne.n	8008d00 <_dtoa_r+0x700>
 8008cf2:	9a00      	ldr	r2, [sp, #0]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d1f7      	bne.n	8008ce8 <_dtoa_r+0x6e8>
 8008cf8:	9900      	ldr	r1, [sp, #0]
 8008cfa:	2230      	movs	r2, #48	; 0x30
 8008cfc:	3701      	adds	r7, #1
 8008cfe:	700a      	strb	r2, [r1, #0]
 8008d00:	781a      	ldrb	r2, [r3, #0]
 8008d02:	3201      	adds	r2, #1
 8008d04:	701a      	strb	r2, [r3, #0]
 8008d06:	e790      	b.n	8008c2a <_dtoa_r+0x62a>
 8008d08:	4ba3      	ldr	r3, [pc, #652]	; (8008f98 <_dtoa_r+0x998>)
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f7f7 fc74 	bl	80005f8 <__aeabi_dmul>
 8008d10:	2200      	movs	r2, #0
 8008d12:	2300      	movs	r3, #0
 8008d14:	4606      	mov	r6, r0
 8008d16:	460f      	mov	r7, r1
 8008d18:	f7f7 fed6 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	d09e      	beq.n	8008c5e <_dtoa_r+0x65e>
 8008d20:	e7d0      	b.n	8008cc4 <_dtoa_r+0x6c4>
 8008d22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d24:	2a00      	cmp	r2, #0
 8008d26:	f000 80ca 	beq.w	8008ebe <_dtoa_r+0x8be>
 8008d2a:	9a07      	ldr	r2, [sp, #28]
 8008d2c:	2a01      	cmp	r2, #1
 8008d2e:	f300 80ad 	bgt.w	8008e8c <_dtoa_r+0x88c>
 8008d32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d34:	2a00      	cmp	r2, #0
 8008d36:	f000 80a5 	beq.w	8008e84 <_dtoa_r+0x884>
 8008d3a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008d3e:	9e08      	ldr	r6, [sp, #32]
 8008d40:	9d05      	ldr	r5, [sp, #20]
 8008d42:	9a05      	ldr	r2, [sp, #20]
 8008d44:	441a      	add	r2, r3
 8008d46:	9205      	str	r2, [sp, #20]
 8008d48:	9a06      	ldr	r2, [sp, #24]
 8008d4a:	2101      	movs	r1, #1
 8008d4c:	441a      	add	r2, r3
 8008d4e:	4620      	mov	r0, r4
 8008d50:	9206      	str	r2, [sp, #24]
 8008d52:	f000 fc3d 	bl	80095d0 <__i2b>
 8008d56:	4607      	mov	r7, r0
 8008d58:	b165      	cbz	r5, 8008d74 <_dtoa_r+0x774>
 8008d5a:	9b06      	ldr	r3, [sp, #24]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	dd09      	ble.n	8008d74 <_dtoa_r+0x774>
 8008d60:	42ab      	cmp	r3, r5
 8008d62:	9a05      	ldr	r2, [sp, #20]
 8008d64:	bfa8      	it	ge
 8008d66:	462b      	movge	r3, r5
 8008d68:	1ad2      	subs	r2, r2, r3
 8008d6a:	9205      	str	r2, [sp, #20]
 8008d6c:	9a06      	ldr	r2, [sp, #24]
 8008d6e:	1aed      	subs	r5, r5, r3
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	9306      	str	r3, [sp, #24]
 8008d74:	9b08      	ldr	r3, [sp, #32]
 8008d76:	b1f3      	cbz	r3, 8008db6 <_dtoa_r+0x7b6>
 8008d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	f000 80a3 	beq.w	8008ec6 <_dtoa_r+0x8c6>
 8008d80:	2e00      	cmp	r6, #0
 8008d82:	dd10      	ble.n	8008da6 <_dtoa_r+0x7a6>
 8008d84:	4639      	mov	r1, r7
 8008d86:	4632      	mov	r2, r6
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f000 fce1 	bl	8009750 <__pow5mult>
 8008d8e:	4652      	mov	r2, sl
 8008d90:	4601      	mov	r1, r0
 8008d92:	4607      	mov	r7, r0
 8008d94:	4620      	mov	r0, r4
 8008d96:	f000 fc31 	bl	80095fc <__multiply>
 8008d9a:	4651      	mov	r1, sl
 8008d9c:	4680      	mov	r8, r0
 8008d9e:	4620      	mov	r0, r4
 8008da0:	f000 fb60 	bl	8009464 <_Bfree>
 8008da4:	46c2      	mov	sl, r8
 8008da6:	9b08      	ldr	r3, [sp, #32]
 8008da8:	1b9a      	subs	r2, r3, r6
 8008daa:	d004      	beq.n	8008db6 <_dtoa_r+0x7b6>
 8008dac:	4651      	mov	r1, sl
 8008dae:	4620      	mov	r0, r4
 8008db0:	f000 fcce 	bl	8009750 <__pow5mult>
 8008db4:	4682      	mov	sl, r0
 8008db6:	2101      	movs	r1, #1
 8008db8:	4620      	mov	r0, r4
 8008dba:	f000 fc09 	bl	80095d0 <__i2b>
 8008dbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	4606      	mov	r6, r0
 8008dc4:	f340 8081 	ble.w	8008eca <_dtoa_r+0x8ca>
 8008dc8:	461a      	mov	r2, r3
 8008dca:	4601      	mov	r1, r0
 8008dcc:	4620      	mov	r0, r4
 8008dce:	f000 fcbf 	bl	8009750 <__pow5mult>
 8008dd2:	9b07      	ldr	r3, [sp, #28]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	4606      	mov	r6, r0
 8008dd8:	dd7a      	ble.n	8008ed0 <_dtoa_r+0x8d0>
 8008dda:	f04f 0800 	mov.w	r8, #0
 8008dde:	6933      	ldr	r3, [r6, #16]
 8008de0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008de4:	6918      	ldr	r0, [r3, #16]
 8008de6:	f000 fba5 	bl	8009534 <__hi0bits>
 8008dea:	f1c0 0020 	rsb	r0, r0, #32
 8008dee:	9b06      	ldr	r3, [sp, #24]
 8008df0:	4418      	add	r0, r3
 8008df2:	f010 001f 	ands.w	r0, r0, #31
 8008df6:	f000 8094 	beq.w	8008f22 <_dtoa_r+0x922>
 8008dfa:	f1c0 0320 	rsb	r3, r0, #32
 8008dfe:	2b04      	cmp	r3, #4
 8008e00:	f340 8085 	ble.w	8008f0e <_dtoa_r+0x90e>
 8008e04:	9b05      	ldr	r3, [sp, #20]
 8008e06:	f1c0 001c 	rsb	r0, r0, #28
 8008e0a:	4403      	add	r3, r0
 8008e0c:	9305      	str	r3, [sp, #20]
 8008e0e:	9b06      	ldr	r3, [sp, #24]
 8008e10:	4403      	add	r3, r0
 8008e12:	4405      	add	r5, r0
 8008e14:	9306      	str	r3, [sp, #24]
 8008e16:	9b05      	ldr	r3, [sp, #20]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	dd05      	ble.n	8008e28 <_dtoa_r+0x828>
 8008e1c:	4651      	mov	r1, sl
 8008e1e:	461a      	mov	r2, r3
 8008e20:	4620      	mov	r0, r4
 8008e22:	f000 fcef 	bl	8009804 <__lshift>
 8008e26:	4682      	mov	sl, r0
 8008e28:	9b06      	ldr	r3, [sp, #24]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	dd05      	ble.n	8008e3a <_dtoa_r+0x83a>
 8008e2e:	4631      	mov	r1, r6
 8008e30:	461a      	mov	r2, r3
 8008e32:	4620      	mov	r0, r4
 8008e34:	f000 fce6 	bl	8009804 <__lshift>
 8008e38:	4606      	mov	r6, r0
 8008e3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d072      	beq.n	8008f26 <_dtoa_r+0x926>
 8008e40:	4631      	mov	r1, r6
 8008e42:	4650      	mov	r0, sl
 8008e44:	f000 fd4a 	bl	80098dc <__mcmp>
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	da6c      	bge.n	8008f26 <_dtoa_r+0x926>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	4651      	mov	r1, sl
 8008e50:	220a      	movs	r2, #10
 8008e52:	4620      	mov	r0, r4
 8008e54:	f000 fb28 	bl	80094a8 <__multadd>
 8008e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e5e:	4682      	mov	sl, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f000 81b0 	beq.w	80091c6 <_dtoa_r+0xbc6>
 8008e66:	2300      	movs	r3, #0
 8008e68:	4639      	mov	r1, r7
 8008e6a:	220a      	movs	r2, #10
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	f000 fb1b 	bl	80094a8 <__multadd>
 8008e72:	9b01      	ldr	r3, [sp, #4]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	4607      	mov	r7, r0
 8008e78:	f300 8096 	bgt.w	8008fa8 <_dtoa_r+0x9a8>
 8008e7c:	9b07      	ldr	r3, [sp, #28]
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	dc59      	bgt.n	8008f36 <_dtoa_r+0x936>
 8008e82:	e091      	b.n	8008fa8 <_dtoa_r+0x9a8>
 8008e84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008e8a:	e758      	b.n	8008d3e <_dtoa_r+0x73e>
 8008e8c:	9b04      	ldr	r3, [sp, #16]
 8008e8e:	1e5e      	subs	r6, r3, #1
 8008e90:	9b08      	ldr	r3, [sp, #32]
 8008e92:	42b3      	cmp	r3, r6
 8008e94:	bfbf      	itttt	lt
 8008e96:	9b08      	ldrlt	r3, [sp, #32]
 8008e98:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008e9a:	9608      	strlt	r6, [sp, #32]
 8008e9c:	1af3      	sublt	r3, r6, r3
 8008e9e:	bfb4      	ite	lt
 8008ea0:	18d2      	addlt	r2, r2, r3
 8008ea2:	1b9e      	subge	r6, r3, r6
 8008ea4:	9b04      	ldr	r3, [sp, #16]
 8008ea6:	bfbc      	itt	lt
 8008ea8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008eaa:	2600      	movlt	r6, #0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	bfb7      	itett	lt
 8008eb0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008eb4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008eb8:	1a9d      	sublt	r5, r3, r2
 8008eba:	2300      	movlt	r3, #0
 8008ebc:	e741      	b.n	8008d42 <_dtoa_r+0x742>
 8008ebe:	9e08      	ldr	r6, [sp, #32]
 8008ec0:	9d05      	ldr	r5, [sp, #20]
 8008ec2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008ec4:	e748      	b.n	8008d58 <_dtoa_r+0x758>
 8008ec6:	9a08      	ldr	r2, [sp, #32]
 8008ec8:	e770      	b.n	8008dac <_dtoa_r+0x7ac>
 8008eca:	9b07      	ldr	r3, [sp, #28]
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	dc19      	bgt.n	8008f04 <_dtoa_r+0x904>
 8008ed0:	9b02      	ldr	r3, [sp, #8]
 8008ed2:	b9bb      	cbnz	r3, 8008f04 <_dtoa_r+0x904>
 8008ed4:	9b03      	ldr	r3, [sp, #12]
 8008ed6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008eda:	b99b      	cbnz	r3, 8008f04 <_dtoa_r+0x904>
 8008edc:	9b03      	ldr	r3, [sp, #12]
 8008ede:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ee2:	0d1b      	lsrs	r3, r3, #20
 8008ee4:	051b      	lsls	r3, r3, #20
 8008ee6:	b183      	cbz	r3, 8008f0a <_dtoa_r+0x90a>
 8008ee8:	9b05      	ldr	r3, [sp, #20]
 8008eea:	3301      	adds	r3, #1
 8008eec:	9305      	str	r3, [sp, #20]
 8008eee:	9b06      	ldr	r3, [sp, #24]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	9306      	str	r3, [sp, #24]
 8008ef4:	f04f 0801 	mov.w	r8, #1
 8008ef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f47f af6f 	bne.w	8008dde <_dtoa_r+0x7de>
 8008f00:	2001      	movs	r0, #1
 8008f02:	e774      	b.n	8008dee <_dtoa_r+0x7ee>
 8008f04:	f04f 0800 	mov.w	r8, #0
 8008f08:	e7f6      	b.n	8008ef8 <_dtoa_r+0x8f8>
 8008f0a:	4698      	mov	r8, r3
 8008f0c:	e7f4      	b.n	8008ef8 <_dtoa_r+0x8f8>
 8008f0e:	d082      	beq.n	8008e16 <_dtoa_r+0x816>
 8008f10:	9a05      	ldr	r2, [sp, #20]
 8008f12:	331c      	adds	r3, #28
 8008f14:	441a      	add	r2, r3
 8008f16:	9205      	str	r2, [sp, #20]
 8008f18:	9a06      	ldr	r2, [sp, #24]
 8008f1a:	441a      	add	r2, r3
 8008f1c:	441d      	add	r5, r3
 8008f1e:	9206      	str	r2, [sp, #24]
 8008f20:	e779      	b.n	8008e16 <_dtoa_r+0x816>
 8008f22:	4603      	mov	r3, r0
 8008f24:	e7f4      	b.n	8008f10 <_dtoa_r+0x910>
 8008f26:	9b04      	ldr	r3, [sp, #16]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	dc37      	bgt.n	8008f9c <_dtoa_r+0x99c>
 8008f2c:	9b07      	ldr	r3, [sp, #28]
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	dd34      	ble.n	8008f9c <_dtoa_r+0x99c>
 8008f32:	9b04      	ldr	r3, [sp, #16]
 8008f34:	9301      	str	r3, [sp, #4]
 8008f36:	9b01      	ldr	r3, [sp, #4]
 8008f38:	b963      	cbnz	r3, 8008f54 <_dtoa_r+0x954>
 8008f3a:	4631      	mov	r1, r6
 8008f3c:	2205      	movs	r2, #5
 8008f3e:	4620      	mov	r0, r4
 8008f40:	f000 fab2 	bl	80094a8 <__multadd>
 8008f44:	4601      	mov	r1, r0
 8008f46:	4606      	mov	r6, r0
 8008f48:	4650      	mov	r0, sl
 8008f4a:	f000 fcc7 	bl	80098dc <__mcmp>
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	f73f adbb 	bgt.w	8008aca <_dtoa_r+0x4ca>
 8008f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f56:	9d00      	ldr	r5, [sp, #0]
 8008f58:	ea6f 0b03 	mvn.w	fp, r3
 8008f5c:	f04f 0800 	mov.w	r8, #0
 8008f60:	4631      	mov	r1, r6
 8008f62:	4620      	mov	r0, r4
 8008f64:	f000 fa7e 	bl	8009464 <_Bfree>
 8008f68:	2f00      	cmp	r7, #0
 8008f6a:	f43f aeab 	beq.w	8008cc4 <_dtoa_r+0x6c4>
 8008f6e:	f1b8 0f00 	cmp.w	r8, #0
 8008f72:	d005      	beq.n	8008f80 <_dtoa_r+0x980>
 8008f74:	45b8      	cmp	r8, r7
 8008f76:	d003      	beq.n	8008f80 <_dtoa_r+0x980>
 8008f78:	4641      	mov	r1, r8
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	f000 fa72 	bl	8009464 <_Bfree>
 8008f80:	4639      	mov	r1, r7
 8008f82:	4620      	mov	r0, r4
 8008f84:	f000 fa6e 	bl	8009464 <_Bfree>
 8008f88:	e69c      	b.n	8008cc4 <_dtoa_r+0x6c4>
 8008f8a:	2600      	movs	r6, #0
 8008f8c:	4637      	mov	r7, r6
 8008f8e:	e7e1      	b.n	8008f54 <_dtoa_r+0x954>
 8008f90:	46bb      	mov	fp, r7
 8008f92:	4637      	mov	r7, r6
 8008f94:	e599      	b.n	8008aca <_dtoa_r+0x4ca>
 8008f96:	bf00      	nop
 8008f98:	40240000 	.word	0x40240000
 8008f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f000 80c8 	beq.w	8009134 <_dtoa_r+0xb34>
 8008fa4:	9b04      	ldr	r3, [sp, #16]
 8008fa6:	9301      	str	r3, [sp, #4]
 8008fa8:	2d00      	cmp	r5, #0
 8008faa:	dd05      	ble.n	8008fb8 <_dtoa_r+0x9b8>
 8008fac:	4639      	mov	r1, r7
 8008fae:	462a      	mov	r2, r5
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	f000 fc27 	bl	8009804 <__lshift>
 8008fb6:	4607      	mov	r7, r0
 8008fb8:	f1b8 0f00 	cmp.w	r8, #0
 8008fbc:	d05b      	beq.n	8009076 <_dtoa_r+0xa76>
 8008fbe:	6879      	ldr	r1, [r7, #4]
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	f000 fa0f 	bl	80093e4 <_Balloc>
 8008fc6:	4605      	mov	r5, r0
 8008fc8:	b928      	cbnz	r0, 8008fd6 <_dtoa_r+0x9d6>
 8008fca:	4b83      	ldr	r3, [pc, #524]	; (80091d8 <_dtoa_r+0xbd8>)
 8008fcc:	4602      	mov	r2, r0
 8008fce:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008fd2:	f7ff bb2e 	b.w	8008632 <_dtoa_r+0x32>
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	3202      	adds	r2, #2
 8008fda:	0092      	lsls	r2, r2, #2
 8008fdc:	f107 010c 	add.w	r1, r7, #12
 8008fe0:	300c      	adds	r0, #12
 8008fe2:	f000 ffab 	bl	8009f3c <memcpy>
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	4629      	mov	r1, r5
 8008fea:	4620      	mov	r0, r4
 8008fec:	f000 fc0a 	bl	8009804 <__lshift>
 8008ff0:	9b00      	ldr	r3, [sp, #0]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	9304      	str	r3, [sp, #16]
 8008ff6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ffa:	4413      	add	r3, r2
 8008ffc:	9308      	str	r3, [sp, #32]
 8008ffe:	9b02      	ldr	r3, [sp, #8]
 8009000:	f003 0301 	and.w	r3, r3, #1
 8009004:	46b8      	mov	r8, r7
 8009006:	9306      	str	r3, [sp, #24]
 8009008:	4607      	mov	r7, r0
 800900a:	9b04      	ldr	r3, [sp, #16]
 800900c:	4631      	mov	r1, r6
 800900e:	3b01      	subs	r3, #1
 8009010:	4650      	mov	r0, sl
 8009012:	9301      	str	r3, [sp, #4]
 8009014:	f7ff fa6b 	bl	80084ee <quorem>
 8009018:	4641      	mov	r1, r8
 800901a:	9002      	str	r0, [sp, #8]
 800901c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009020:	4650      	mov	r0, sl
 8009022:	f000 fc5b 	bl	80098dc <__mcmp>
 8009026:	463a      	mov	r2, r7
 8009028:	9005      	str	r0, [sp, #20]
 800902a:	4631      	mov	r1, r6
 800902c:	4620      	mov	r0, r4
 800902e:	f000 fc71 	bl	8009914 <__mdiff>
 8009032:	68c2      	ldr	r2, [r0, #12]
 8009034:	4605      	mov	r5, r0
 8009036:	bb02      	cbnz	r2, 800907a <_dtoa_r+0xa7a>
 8009038:	4601      	mov	r1, r0
 800903a:	4650      	mov	r0, sl
 800903c:	f000 fc4e 	bl	80098dc <__mcmp>
 8009040:	4602      	mov	r2, r0
 8009042:	4629      	mov	r1, r5
 8009044:	4620      	mov	r0, r4
 8009046:	9209      	str	r2, [sp, #36]	; 0x24
 8009048:	f000 fa0c 	bl	8009464 <_Bfree>
 800904c:	9b07      	ldr	r3, [sp, #28]
 800904e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009050:	9d04      	ldr	r5, [sp, #16]
 8009052:	ea43 0102 	orr.w	r1, r3, r2
 8009056:	9b06      	ldr	r3, [sp, #24]
 8009058:	4319      	orrs	r1, r3
 800905a:	d110      	bne.n	800907e <_dtoa_r+0xa7e>
 800905c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009060:	d029      	beq.n	80090b6 <_dtoa_r+0xab6>
 8009062:	9b05      	ldr	r3, [sp, #20]
 8009064:	2b00      	cmp	r3, #0
 8009066:	dd02      	ble.n	800906e <_dtoa_r+0xa6e>
 8009068:	9b02      	ldr	r3, [sp, #8]
 800906a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800906e:	9b01      	ldr	r3, [sp, #4]
 8009070:	f883 9000 	strb.w	r9, [r3]
 8009074:	e774      	b.n	8008f60 <_dtoa_r+0x960>
 8009076:	4638      	mov	r0, r7
 8009078:	e7ba      	b.n	8008ff0 <_dtoa_r+0x9f0>
 800907a:	2201      	movs	r2, #1
 800907c:	e7e1      	b.n	8009042 <_dtoa_r+0xa42>
 800907e:	9b05      	ldr	r3, [sp, #20]
 8009080:	2b00      	cmp	r3, #0
 8009082:	db04      	blt.n	800908e <_dtoa_r+0xa8e>
 8009084:	9907      	ldr	r1, [sp, #28]
 8009086:	430b      	orrs	r3, r1
 8009088:	9906      	ldr	r1, [sp, #24]
 800908a:	430b      	orrs	r3, r1
 800908c:	d120      	bne.n	80090d0 <_dtoa_r+0xad0>
 800908e:	2a00      	cmp	r2, #0
 8009090:	dded      	ble.n	800906e <_dtoa_r+0xa6e>
 8009092:	4651      	mov	r1, sl
 8009094:	2201      	movs	r2, #1
 8009096:	4620      	mov	r0, r4
 8009098:	f000 fbb4 	bl	8009804 <__lshift>
 800909c:	4631      	mov	r1, r6
 800909e:	4682      	mov	sl, r0
 80090a0:	f000 fc1c 	bl	80098dc <__mcmp>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	dc03      	bgt.n	80090b0 <_dtoa_r+0xab0>
 80090a8:	d1e1      	bne.n	800906e <_dtoa_r+0xa6e>
 80090aa:	f019 0f01 	tst.w	r9, #1
 80090ae:	d0de      	beq.n	800906e <_dtoa_r+0xa6e>
 80090b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80090b4:	d1d8      	bne.n	8009068 <_dtoa_r+0xa68>
 80090b6:	9a01      	ldr	r2, [sp, #4]
 80090b8:	2339      	movs	r3, #57	; 0x39
 80090ba:	7013      	strb	r3, [r2, #0]
 80090bc:	462b      	mov	r3, r5
 80090be:	461d      	mov	r5, r3
 80090c0:	3b01      	subs	r3, #1
 80090c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80090c6:	2a39      	cmp	r2, #57	; 0x39
 80090c8:	d06c      	beq.n	80091a4 <_dtoa_r+0xba4>
 80090ca:	3201      	adds	r2, #1
 80090cc:	701a      	strb	r2, [r3, #0]
 80090ce:	e747      	b.n	8008f60 <_dtoa_r+0x960>
 80090d0:	2a00      	cmp	r2, #0
 80090d2:	dd07      	ble.n	80090e4 <_dtoa_r+0xae4>
 80090d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80090d8:	d0ed      	beq.n	80090b6 <_dtoa_r+0xab6>
 80090da:	9a01      	ldr	r2, [sp, #4]
 80090dc:	f109 0301 	add.w	r3, r9, #1
 80090e0:	7013      	strb	r3, [r2, #0]
 80090e2:	e73d      	b.n	8008f60 <_dtoa_r+0x960>
 80090e4:	9b04      	ldr	r3, [sp, #16]
 80090e6:	9a08      	ldr	r2, [sp, #32]
 80090e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d043      	beq.n	8009178 <_dtoa_r+0xb78>
 80090f0:	4651      	mov	r1, sl
 80090f2:	2300      	movs	r3, #0
 80090f4:	220a      	movs	r2, #10
 80090f6:	4620      	mov	r0, r4
 80090f8:	f000 f9d6 	bl	80094a8 <__multadd>
 80090fc:	45b8      	cmp	r8, r7
 80090fe:	4682      	mov	sl, r0
 8009100:	f04f 0300 	mov.w	r3, #0
 8009104:	f04f 020a 	mov.w	r2, #10
 8009108:	4641      	mov	r1, r8
 800910a:	4620      	mov	r0, r4
 800910c:	d107      	bne.n	800911e <_dtoa_r+0xb1e>
 800910e:	f000 f9cb 	bl	80094a8 <__multadd>
 8009112:	4680      	mov	r8, r0
 8009114:	4607      	mov	r7, r0
 8009116:	9b04      	ldr	r3, [sp, #16]
 8009118:	3301      	adds	r3, #1
 800911a:	9304      	str	r3, [sp, #16]
 800911c:	e775      	b.n	800900a <_dtoa_r+0xa0a>
 800911e:	f000 f9c3 	bl	80094a8 <__multadd>
 8009122:	4639      	mov	r1, r7
 8009124:	4680      	mov	r8, r0
 8009126:	2300      	movs	r3, #0
 8009128:	220a      	movs	r2, #10
 800912a:	4620      	mov	r0, r4
 800912c:	f000 f9bc 	bl	80094a8 <__multadd>
 8009130:	4607      	mov	r7, r0
 8009132:	e7f0      	b.n	8009116 <_dtoa_r+0xb16>
 8009134:	9b04      	ldr	r3, [sp, #16]
 8009136:	9301      	str	r3, [sp, #4]
 8009138:	9d00      	ldr	r5, [sp, #0]
 800913a:	4631      	mov	r1, r6
 800913c:	4650      	mov	r0, sl
 800913e:	f7ff f9d6 	bl	80084ee <quorem>
 8009142:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009146:	9b00      	ldr	r3, [sp, #0]
 8009148:	f805 9b01 	strb.w	r9, [r5], #1
 800914c:	1aea      	subs	r2, r5, r3
 800914e:	9b01      	ldr	r3, [sp, #4]
 8009150:	4293      	cmp	r3, r2
 8009152:	dd07      	ble.n	8009164 <_dtoa_r+0xb64>
 8009154:	4651      	mov	r1, sl
 8009156:	2300      	movs	r3, #0
 8009158:	220a      	movs	r2, #10
 800915a:	4620      	mov	r0, r4
 800915c:	f000 f9a4 	bl	80094a8 <__multadd>
 8009160:	4682      	mov	sl, r0
 8009162:	e7ea      	b.n	800913a <_dtoa_r+0xb3a>
 8009164:	9b01      	ldr	r3, [sp, #4]
 8009166:	2b00      	cmp	r3, #0
 8009168:	bfc8      	it	gt
 800916a:	461d      	movgt	r5, r3
 800916c:	9b00      	ldr	r3, [sp, #0]
 800916e:	bfd8      	it	le
 8009170:	2501      	movle	r5, #1
 8009172:	441d      	add	r5, r3
 8009174:	f04f 0800 	mov.w	r8, #0
 8009178:	4651      	mov	r1, sl
 800917a:	2201      	movs	r2, #1
 800917c:	4620      	mov	r0, r4
 800917e:	f000 fb41 	bl	8009804 <__lshift>
 8009182:	4631      	mov	r1, r6
 8009184:	4682      	mov	sl, r0
 8009186:	f000 fba9 	bl	80098dc <__mcmp>
 800918a:	2800      	cmp	r0, #0
 800918c:	dc96      	bgt.n	80090bc <_dtoa_r+0xabc>
 800918e:	d102      	bne.n	8009196 <_dtoa_r+0xb96>
 8009190:	f019 0f01 	tst.w	r9, #1
 8009194:	d192      	bne.n	80090bc <_dtoa_r+0xabc>
 8009196:	462b      	mov	r3, r5
 8009198:	461d      	mov	r5, r3
 800919a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800919e:	2a30      	cmp	r2, #48	; 0x30
 80091a0:	d0fa      	beq.n	8009198 <_dtoa_r+0xb98>
 80091a2:	e6dd      	b.n	8008f60 <_dtoa_r+0x960>
 80091a4:	9a00      	ldr	r2, [sp, #0]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d189      	bne.n	80090be <_dtoa_r+0xabe>
 80091aa:	f10b 0b01 	add.w	fp, fp, #1
 80091ae:	2331      	movs	r3, #49	; 0x31
 80091b0:	e796      	b.n	80090e0 <_dtoa_r+0xae0>
 80091b2:	4b0a      	ldr	r3, [pc, #40]	; (80091dc <_dtoa_r+0xbdc>)
 80091b4:	f7ff ba99 	b.w	80086ea <_dtoa_r+0xea>
 80091b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f47f aa6d 	bne.w	800869a <_dtoa_r+0x9a>
 80091c0:	4b07      	ldr	r3, [pc, #28]	; (80091e0 <_dtoa_r+0xbe0>)
 80091c2:	f7ff ba92 	b.w	80086ea <_dtoa_r+0xea>
 80091c6:	9b01      	ldr	r3, [sp, #4]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	dcb5      	bgt.n	8009138 <_dtoa_r+0xb38>
 80091cc:	9b07      	ldr	r3, [sp, #28]
 80091ce:	2b02      	cmp	r3, #2
 80091d0:	f73f aeb1 	bgt.w	8008f36 <_dtoa_r+0x936>
 80091d4:	e7b0      	b.n	8009138 <_dtoa_r+0xb38>
 80091d6:	bf00      	nop
 80091d8:	0800a76c 	.word	0x0800a76c
 80091dc:	0800a6cc 	.word	0x0800a6cc
 80091e0:	0800a6f0 	.word	0x0800a6f0

080091e4 <_free_r>:
 80091e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091e6:	2900      	cmp	r1, #0
 80091e8:	d044      	beq.n	8009274 <_free_r+0x90>
 80091ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091ee:	9001      	str	r0, [sp, #4]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f1a1 0404 	sub.w	r4, r1, #4
 80091f6:	bfb8      	it	lt
 80091f8:	18e4      	addlt	r4, r4, r3
 80091fa:	f000 f8e7 	bl	80093cc <__malloc_lock>
 80091fe:	4a1e      	ldr	r2, [pc, #120]	; (8009278 <_free_r+0x94>)
 8009200:	9801      	ldr	r0, [sp, #4]
 8009202:	6813      	ldr	r3, [r2, #0]
 8009204:	b933      	cbnz	r3, 8009214 <_free_r+0x30>
 8009206:	6063      	str	r3, [r4, #4]
 8009208:	6014      	str	r4, [r2, #0]
 800920a:	b003      	add	sp, #12
 800920c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009210:	f000 b8e2 	b.w	80093d8 <__malloc_unlock>
 8009214:	42a3      	cmp	r3, r4
 8009216:	d908      	bls.n	800922a <_free_r+0x46>
 8009218:	6825      	ldr	r5, [r4, #0]
 800921a:	1961      	adds	r1, r4, r5
 800921c:	428b      	cmp	r3, r1
 800921e:	bf01      	itttt	eq
 8009220:	6819      	ldreq	r1, [r3, #0]
 8009222:	685b      	ldreq	r3, [r3, #4]
 8009224:	1949      	addeq	r1, r1, r5
 8009226:	6021      	streq	r1, [r4, #0]
 8009228:	e7ed      	b.n	8009206 <_free_r+0x22>
 800922a:	461a      	mov	r2, r3
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	b10b      	cbz	r3, 8009234 <_free_r+0x50>
 8009230:	42a3      	cmp	r3, r4
 8009232:	d9fa      	bls.n	800922a <_free_r+0x46>
 8009234:	6811      	ldr	r1, [r2, #0]
 8009236:	1855      	adds	r5, r2, r1
 8009238:	42a5      	cmp	r5, r4
 800923a:	d10b      	bne.n	8009254 <_free_r+0x70>
 800923c:	6824      	ldr	r4, [r4, #0]
 800923e:	4421      	add	r1, r4
 8009240:	1854      	adds	r4, r2, r1
 8009242:	42a3      	cmp	r3, r4
 8009244:	6011      	str	r1, [r2, #0]
 8009246:	d1e0      	bne.n	800920a <_free_r+0x26>
 8009248:	681c      	ldr	r4, [r3, #0]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	6053      	str	r3, [r2, #4]
 800924e:	440c      	add	r4, r1
 8009250:	6014      	str	r4, [r2, #0]
 8009252:	e7da      	b.n	800920a <_free_r+0x26>
 8009254:	d902      	bls.n	800925c <_free_r+0x78>
 8009256:	230c      	movs	r3, #12
 8009258:	6003      	str	r3, [r0, #0]
 800925a:	e7d6      	b.n	800920a <_free_r+0x26>
 800925c:	6825      	ldr	r5, [r4, #0]
 800925e:	1961      	adds	r1, r4, r5
 8009260:	428b      	cmp	r3, r1
 8009262:	bf04      	itt	eq
 8009264:	6819      	ldreq	r1, [r3, #0]
 8009266:	685b      	ldreq	r3, [r3, #4]
 8009268:	6063      	str	r3, [r4, #4]
 800926a:	bf04      	itt	eq
 800926c:	1949      	addeq	r1, r1, r5
 800926e:	6021      	streq	r1, [r4, #0]
 8009270:	6054      	str	r4, [r2, #4]
 8009272:	e7ca      	b.n	800920a <_free_r+0x26>
 8009274:	b003      	add	sp, #12
 8009276:	bd30      	pop	{r4, r5, pc}
 8009278:	20000528 	.word	0x20000528

0800927c <malloc>:
 800927c:	4b02      	ldr	r3, [pc, #8]	; (8009288 <malloc+0xc>)
 800927e:	4601      	mov	r1, r0
 8009280:	6818      	ldr	r0, [r3, #0]
 8009282:	f000 b823 	b.w	80092cc <_malloc_r>
 8009286:	bf00      	nop
 8009288:	20000064 	.word	0x20000064

0800928c <sbrk_aligned>:
 800928c:	b570      	push	{r4, r5, r6, lr}
 800928e:	4e0e      	ldr	r6, [pc, #56]	; (80092c8 <sbrk_aligned+0x3c>)
 8009290:	460c      	mov	r4, r1
 8009292:	6831      	ldr	r1, [r6, #0]
 8009294:	4605      	mov	r5, r0
 8009296:	b911      	cbnz	r1, 800929e <sbrk_aligned+0x12>
 8009298:	f000 fe40 	bl	8009f1c <_sbrk_r>
 800929c:	6030      	str	r0, [r6, #0]
 800929e:	4621      	mov	r1, r4
 80092a0:	4628      	mov	r0, r5
 80092a2:	f000 fe3b 	bl	8009f1c <_sbrk_r>
 80092a6:	1c43      	adds	r3, r0, #1
 80092a8:	d00a      	beq.n	80092c0 <sbrk_aligned+0x34>
 80092aa:	1cc4      	adds	r4, r0, #3
 80092ac:	f024 0403 	bic.w	r4, r4, #3
 80092b0:	42a0      	cmp	r0, r4
 80092b2:	d007      	beq.n	80092c4 <sbrk_aligned+0x38>
 80092b4:	1a21      	subs	r1, r4, r0
 80092b6:	4628      	mov	r0, r5
 80092b8:	f000 fe30 	bl	8009f1c <_sbrk_r>
 80092bc:	3001      	adds	r0, #1
 80092be:	d101      	bne.n	80092c4 <sbrk_aligned+0x38>
 80092c0:	f04f 34ff 	mov.w	r4, #4294967295
 80092c4:	4620      	mov	r0, r4
 80092c6:	bd70      	pop	{r4, r5, r6, pc}
 80092c8:	2000052c 	.word	0x2000052c

080092cc <_malloc_r>:
 80092cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092d0:	1ccd      	adds	r5, r1, #3
 80092d2:	f025 0503 	bic.w	r5, r5, #3
 80092d6:	3508      	adds	r5, #8
 80092d8:	2d0c      	cmp	r5, #12
 80092da:	bf38      	it	cc
 80092dc:	250c      	movcc	r5, #12
 80092de:	2d00      	cmp	r5, #0
 80092e0:	4607      	mov	r7, r0
 80092e2:	db01      	blt.n	80092e8 <_malloc_r+0x1c>
 80092e4:	42a9      	cmp	r1, r5
 80092e6:	d905      	bls.n	80092f4 <_malloc_r+0x28>
 80092e8:	230c      	movs	r3, #12
 80092ea:	603b      	str	r3, [r7, #0]
 80092ec:	2600      	movs	r6, #0
 80092ee:	4630      	mov	r0, r6
 80092f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80093c8 <_malloc_r+0xfc>
 80092f8:	f000 f868 	bl	80093cc <__malloc_lock>
 80092fc:	f8d8 3000 	ldr.w	r3, [r8]
 8009300:	461c      	mov	r4, r3
 8009302:	bb5c      	cbnz	r4, 800935c <_malloc_r+0x90>
 8009304:	4629      	mov	r1, r5
 8009306:	4638      	mov	r0, r7
 8009308:	f7ff ffc0 	bl	800928c <sbrk_aligned>
 800930c:	1c43      	adds	r3, r0, #1
 800930e:	4604      	mov	r4, r0
 8009310:	d155      	bne.n	80093be <_malloc_r+0xf2>
 8009312:	f8d8 4000 	ldr.w	r4, [r8]
 8009316:	4626      	mov	r6, r4
 8009318:	2e00      	cmp	r6, #0
 800931a:	d145      	bne.n	80093a8 <_malloc_r+0xdc>
 800931c:	2c00      	cmp	r4, #0
 800931e:	d048      	beq.n	80093b2 <_malloc_r+0xe6>
 8009320:	6823      	ldr	r3, [r4, #0]
 8009322:	4631      	mov	r1, r6
 8009324:	4638      	mov	r0, r7
 8009326:	eb04 0903 	add.w	r9, r4, r3
 800932a:	f000 fdf7 	bl	8009f1c <_sbrk_r>
 800932e:	4581      	cmp	r9, r0
 8009330:	d13f      	bne.n	80093b2 <_malloc_r+0xe6>
 8009332:	6821      	ldr	r1, [r4, #0]
 8009334:	1a6d      	subs	r5, r5, r1
 8009336:	4629      	mov	r1, r5
 8009338:	4638      	mov	r0, r7
 800933a:	f7ff ffa7 	bl	800928c <sbrk_aligned>
 800933e:	3001      	adds	r0, #1
 8009340:	d037      	beq.n	80093b2 <_malloc_r+0xe6>
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	442b      	add	r3, r5
 8009346:	6023      	str	r3, [r4, #0]
 8009348:	f8d8 3000 	ldr.w	r3, [r8]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d038      	beq.n	80093c2 <_malloc_r+0xf6>
 8009350:	685a      	ldr	r2, [r3, #4]
 8009352:	42a2      	cmp	r2, r4
 8009354:	d12b      	bne.n	80093ae <_malloc_r+0xe2>
 8009356:	2200      	movs	r2, #0
 8009358:	605a      	str	r2, [r3, #4]
 800935a:	e00f      	b.n	800937c <_malloc_r+0xb0>
 800935c:	6822      	ldr	r2, [r4, #0]
 800935e:	1b52      	subs	r2, r2, r5
 8009360:	d41f      	bmi.n	80093a2 <_malloc_r+0xd6>
 8009362:	2a0b      	cmp	r2, #11
 8009364:	d917      	bls.n	8009396 <_malloc_r+0xca>
 8009366:	1961      	adds	r1, r4, r5
 8009368:	42a3      	cmp	r3, r4
 800936a:	6025      	str	r5, [r4, #0]
 800936c:	bf18      	it	ne
 800936e:	6059      	strne	r1, [r3, #4]
 8009370:	6863      	ldr	r3, [r4, #4]
 8009372:	bf08      	it	eq
 8009374:	f8c8 1000 	streq.w	r1, [r8]
 8009378:	5162      	str	r2, [r4, r5]
 800937a:	604b      	str	r3, [r1, #4]
 800937c:	4638      	mov	r0, r7
 800937e:	f104 060b 	add.w	r6, r4, #11
 8009382:	f000 f829 	bl	80093d8 <__malloc_unlock>
 8009386:	f026 0607 	bic.w	r6, r6, #7
 800938a:	1d23      	adds	r3, r4, #4
 800938c:	1af2      	subs	r2, r6, r3
 800938e:	d0ae      	beq.n	80092ee <_malloc_r+0x22>
 8009390:	1b9b      	subs	r3, r3, r6
 8009392:	50a3      	str	r3, [r4, r2]
 8009394:	e7ab      	b.n	80092ee <_malloc_r+0x22>
 8009396:	42a3      	cmp	r3, r4
 8009398:	6862      	ldr	r2, [r4, #4]
 800939a:	d1dd      	bne.n	8009358 <_malloc_r+0x8c>
 800939c:	f8c8 2000 	str.w	r2, [r8]
 80093a0:	e7ec      	b.n	800937c <_malloc_r+0xb0>
 80093a2:	4623      	mov	r3, r4
 80093a4:	6864      	ldr	r4, [r4, #4]
 80093a6:	e7ac      	b.n	8009302 <_malloc_r+0x36>
 80093a8:	4634      	mov	r4, r6
 80093aa:	6876      	ldr	r6, [r6, #4]
 80093ac:	e7b4      	b.n	8009318 <_malloc_r+0x4c>
 80093ae:	4613      	mov	r3, r2
 80093b0:	e7cc      	b.n	800934c <_malloc_r+0x80>
 80093b2:	230c      	movs	r3, #12
 80093b4:	603b      	str	r3, [r7, #0]
 80093b6:	4638      	mov	r0, r7
 80093b8:	f000 f80e 	bl	80093d8 <__malloc_unlock>
 80093bc:	e797      	b.n	80092ee <_malloc_r+0x22>
 80093be:	6025      	str	r5, [r4, #0]
 80093c0:	e7dc      	b.n	800937c <_malloc_r+0xb0>
 80093c2:	605b      	str	r3, [r3, #4]
 80093c4:	deff      	udf	#255	; 0xff
 80093c6:	bf00      	nop
 80093c8:	20000528 	.word	0x20000528

080093cc <__malloc_lock>:
 80093cc:	4801      	ldr	r0, [pc, #4]	; (80093d4 <__malloc_lock+0x8>)
 80093ce:	f7ff b88c 	b.w	80084ea <__retarget_lock_acquire_recursive>
 80093d2:	bf00      	nop
 80093d4:	20000524 	.word	0x20000524

080093d8 <__malloc_unlock>:
 80093d8:	4801      	ldr	r0, [pc, #4]	; (80093e0 <__malloc_unlock+0x8>)
 80093da:	f7ff b887 	b.w	80084ec <__retarget_lock_release_recursive>
 80093de:	bf00      	nop
 80093e0:	20000524 	.word	0x20000524

080093e4 <_Balloc>:
 80093e4:	b570      	push	{r4, r5, r6, lr}
 80093e6:	69c6      	ldr	r6, [r0, #28]
 80093e8:	4604      	mov	r4, r0
 80093ea:	460d      	mov	r5, r1
 80093ec:	b976      	cbnz	r6, 800940c <_Balloc+0x28>
 80093ee:	2010      	movs	r0, #16
 80093f0:	f7ff ff44 	bl	800927c <malloc>
 80093f4:	4602      	mov	r2, r0
 80093f6:	61e0      	str	r0, [r4, #28]
 80093f8:	b920      	cbnz	r0, 8009404 <_Balloc+0x20>
 80093fa:	4b18      	ldr	r3, [pc, #96]	; (800945c <_Balloc+0x78>)
 80093fc:	4818      	ldr	r0, [pc, #96]	; (8009460 <_Balloc+0x7c>)
 80093fe:	216b      	movs	r1, #107	; 0x6b
 8009400:	f000 fdaa 	bl	8009f58 <__assert_func>
 8009404:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009408:	6006      	str	r6, [r0, #0]
 800940a:	60c6      	str	r6, [r0, #12]
 800940c:	69e6      	ldr	r6, [r4, #28]
 800940e:	68f3      	ldr	r3, [r6, #12]
 8009410:	b183      	cbz	r3, 8009434 <_Balloc+0x50>
 8009412:	69e3      	ldr	r3, [r4, #28]
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800941a:	b9b8      	cbnz	r0, 800944c <_Balloc+0x68>
 800941c:	2101      	movs	r1, #1
 800941e:	fa01 f605 	lsl.w	r6, r1, r5
 8009422:	1d72      	adds	r2, r6, #5
 8009424:	0092      	lsls	r2, r2, #2
 8009426:	4620      	mov	r0, r4
 8009428:	f000 fdb4 	bl	8009f94 <_calloc_r>
 800942c:	b160      	cbz	r0, 8009448 <_Balloc+0x64>
 800942e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009432:	e00e      	b.n	8009452 <_Balloc+0x6e>
 8009434:	2221      	movs	r2, #33	; 0x21
 8009436:	2104      	movs	r1, #4
 8009438:	4620      	mov	r0, r4
 800943a:	f000 fdab 	bl	8009f94 <_calloc_r>
 800943e:	69e3      	ldr	r3, [r4, #28]
 8009440:	60f0      	str	r0, [r6, #12]
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1e4      	bne.n	8009412 <_Balloc+0x2e>
 8009448:	2000      	movs	r0, #0
 800944a:	bd70      	pop	{r4, r5, r6, pc}
 800944c:	6802      	ldr	r2, [r0, #0]
 800944e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009452:	2300      	movs	r3, #0
 8009454:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009458:	e7f7      	b.n	800944a <_Balloc+0x66>
 800945a:	bf00      	nop
 800945c:	0800a6fd 	.word	0x0800a6fd
 8009460:	0800a77d 	.word	0x0800a77d

08009464 <_Bfree>:
 8009464:	b570      	push	{r4, r5, r6, lr}
 8009466:	69c6      	ldr	r6, [r0, #28]
 8009468:	4605      	mov	r5, r0
 800946a:	460c      	mov	r4, r1
 800946c:	b976      	cbnz	r6, 800948c <_Bfree+0x28>
 800946e:	2010      	movs	r0, #16
 8009470:	f7ff ff04 	bl	800927c <malloc>
 8009474:	4602      	mov	r2, r0
 8009476:	61e8      	str	r0, [r5, #28]
 8009478:	b920      	cbnz	r0, 8009484 <_Bfree+0x20>
 800947a:	4b09      	ldr	r3, [pc, #36]	; (80094a0 <_Bfree+0x3c>)
 800947c:	4809      	ldr	r0, [pc, #36]	; (80094a4 <_Bfree+0x40>)
 800947e:	218f      	movs	r1, #143	; 0x8f
 8009480:	f000 fd6a 	bl	8009f58 <__assert_func>
 8009484:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009488:	6006      	str	r6, [r0, #0]
 800948a:	60c6      	str	r6, [r0, #12]
 800948c:	b13c      	cbz	r4, 800949e <_Bfree+0x3a>
 800948e:	69eb      	ldr	r3, [r5, #28]
 8009490:	6862      	ldr	r2, [r4, #4]
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009498:	6021      	str	r1, [r4, #0]
 800949a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800949e:	bd70      	pop	{r4, r5, r6, pc}
 80094a0:	0800a6fd 	.word	0x0800a6fd
 80094a4:	0800a77d 	.word	0x0800a77d

080094a8 <__multadd>:
 80094a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ac:	690d      	ldr	r5, [r1, #16]
 80094ae:	4607      	mov	r7, r0
 80094b0:	460c      	mov	r4, r1
 80094b2:	461e      	mov	r6, r3
 80094b4:	f101 0c14 	add.w	ip, r1, #20
 80094b8:	2000      	movs	r0, #0
 80094ba:	f8dc 3000 	ldr.w	r3, [ip]
 80094be:	b299      	uxth	r1, r3
 80094c0:	fb02 6101 	mla	r1, r2, r1, r6
 80094c4:	0c1e      	lsrs	r6, r3, #16
 80094c6:	0c0b      	lsrs	r3, r1, #16
 80094c8:	fb02 3306 	mla	r3, r2, r6, r3
 80094cc:	b289      	uxth	r1, r1
 80094ce:	3001      	adds	r0, #1
 80094d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80094d4:	4285      	cmp	r5, r0
 80094d6:	f84c 1b04 	str.w	r1, [ip], #4
 80094da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80094de:	dcec      	bgt.n	80094ba <__multadd+0x12>
 80094e0:	b30e      	cbz	r6, 8009526 <__multadd+0x7e>
 80094e2:	68a3      	ldr	r3, [r4, #8]
 80094e4:	42ab      	cmp	r3, r5
 80094e6:	dc19      	bgt.n	800951c <__multadd+0x74>
 80094e8:	6861      	ldr	r1, [r4, #4]
 80094ea:	4638      	mov	r0, r7
 80094ec:	3101      	adds	r1, #1
 80094ee:	f7ff ff79 	bl	80093e4 <_Balloc>
 80094f2:	4680      	mov	r8, r0
 80094f4:	b928      	cbnz	r0, 8009502 <__multadd+0x5a>
 80094f6:	4602      	mov	r2, r0
 80094f8:	4b0c      	ldr	r3, [pc, #48]	; (800952c <__multadd+0x84>)
 80094fa:	480d      	ldr	r0, [pc, #52]	; (8009530 <__multadd+0x88>)
 80094fc:	21ba      	movs	r1, #186	; 0xba
 80094fe:	f000 fd2b 	bl	8009f58 <__assert_func>
 8009502:	6922      	ldr	r2, [r4, #16]
 8009504:	3202      	adds	r2, #2
 8009506:	f104 010c 	add.w	r1, r4, #12
 800950a:	0092      	lsls	r2, r2, #2
 800950c:	300c      	adds	r0, #12
 800950e:	f000 fd15 	bl	8009f3c <memcpy>
 8009512:	4621      	mov	r1, r4
 8009514:	4638      	mov	r0, r7
 8009516:	f7ff ffa5 	bl	8009464 <_Bfree>
 800951a:	4644      	mov	r4, r8
 800951c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009520:	3501      	adds	r5, #1
 8009522:	615e      	str	r6, [r3, #20]
 8009524:	6125      	str	r5, [r4, #16]
 8009526:	4620      	mov	r0, r4
 8009528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800952c:	0800a76c 	.word	0x0800a76c
 8009530:	0800a77d 	.word	0x0800a77d

08009534 <__hi0bits>:
 8009534:	0c03      	lsrs	r3, r0, #16
 8009536:	041b      	lsls	r3, r3, #16
 8009538:	b9d3      	cbnz	r3, 8009570 <__hi0bits+0x3c>
 800953a:	0400      	lsls	r0, r0, #16
 800953c:	2310      	movs	r3, #16
 800953e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009542:	bf04      	itt	eq
 8009544:	0200      	lsleq	r0, r0, #8
 8009546:	3308      	addeq	r3, #8
 8009548:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800954c:	bf04      	itt	eq
 800954e:	0100      	lsleq	r0, r0, #4
 8009550:	3304      	addeq	r3, #4
 8009552:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009556:	bf04      	itt	eq
 8009558:	0080      	lsleq	r0, r0, #2
 800955a:	3302      	addeq	r3, #2
 800955c:	2800      	cmp	r0, #0
 800955e:	db05      	blt.n	800956c <__hi0bits+0x38>
 8009560:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009564:	f103 0301 	add.w	r3, r3, #1
 8009568:	bf08      	it	eq
 800956a:	2320      	moveq	r3, #32
 800956c:	4618      	mov	r0, r3
 800956e:	4770      	bx	lr
 8009570:	2300      	movs	r3, #0
 8009572:	e7e4      	b.n	800953e <__hi0bits+0xa>

08009574 <__lo0bits>:
 8009574:	6803      	ldr	r3, [r0, #0]
 8009576:	f013 0207 	ands.w	r2, r3, #7
 800957a:	d00c      	beq.n	8009596 <__lo0bits+0x22>
 800957c:	07d9      	lsls	r1, r3, #31
 800957e:	d422      	bmi.n	80095c6 <__lo0bits+0x52>
 8009580:	079a      	lsls	r2, r3, #30
 8009582:	bf49      	itett	mi
 8009584:	085b      	lsrmi	r3, r3, #1
 8009586:	089b      	lsrpl	r3, r3, #2
 8009588:	6003      	strmi	r3, [r0, #0]
 800958a:	2201      	movmi	r2, #1
 800958c:	bf5c      	itt	pl
 800958e:	6003      	strpl	r3, [r0, #0]
 8009590:	2202      	movpl	r2, #2
 8009592:	4610      	mov	r0, r2
 8009594:	4770      	bx	lr
 8009596:	b299      	uxth	r1, r3
 8009598:	b909      	cbnz	r1, 800959e <__lo0bits+0x2a>
 800959a:	0c1b      	lsrs	r3, r3, #16
 800959c:	2210      	movs	r2, #16
 800959e:	b2d9      	uxtb	r1, r3
 80095a0:	b909      	cbnz	r1, 80095a6 <__lo0bits+0x32>
 80095a2:	3208      	adds	r2, #8
 80095a4:	0a1b      	lsrs	r3, r3, #8
 80095a6:	0719      	lsls	r1, r3, #28
 80095a8:	bf04      	itt	eq
 80095aa:	091b      	lsreq	r3, r3, #4
 80095ac:	3204      	addeq	r2, #4
 80095ae:	0799      	lsls	r1, r3, #30
 80095b0:	bf04      	itt	eq
 80095b2:	089b      	lsreq	r3, r3, #2
 80095b4:	3202      	addeq	r2, #2
 80095b6:	07d9      	lsls	r1, r3, #31
 80095b8:	d403      	bmi.n	80095c2 <__lo0bits+0x4e>
 80095ba:	085b      	lsrs	r3, r3, #1
 80095bc:	f102 0201 	add.w	r2, r2, #1
 80095c0:	d003      	beq.n	80095ca <__lo0bits+0x56>
 80095c2:	6003      	str	r3, [r0, #0]
 80095c4:	e7e5      	b.n	8009592 <__lo0bits+0x1e>
 80095c6:	2200      	movs	r2, #0
 80095c8:	e7e3      	b.n	8009592 <__lo0bits+0x1e>
 80095ca:	2220      	movs	r2, #32
 80095cc:	e7e1      	b.n	8009592 <__lo0bits+0x1e>
	...

080095d0 <__i2b>:
 80095d0:	b510      	push	{r4, lr}
 80095d2:	460c      	mov	r4, r1
 80095d4:	2101      	movs	r1, #1
 80095d6:	f7ff ff05 	bl	80093e4 <_Balloc>
 80095da:	4602      	mov	r2, r0
 80095dc:	b928      	cbnz	r0, 80095ea <__i2b+0x1a>
 80095de:	4b05      	ldr	r3, [pc, #20]	; (80095f4 <__i2b+0x24>)
 80095e0:	4805      	ldr	r0, [pc, #20]	; (80095f8 <__i2b+0x28>)
 80095e2:	f240 1145 	movw	r1, #325	; 0x145
 80095e6:	f000 fcb7 	bl	8009f58 <__assert_func>
 80095ea:	2301      	movs	r3, #1
 80095ec:	6144      	str	r4, [r0, #20]
 80095ee:	6103      	str	r3, [r0, #16]
 80095f0:	bd10      	pop	{r4, pc}
 80095f2:	bf00      	nop
 80095f4:	0800a76c 	.word	0x0800a76c
 80095f8:	0800a77d 	.word	0x0800a77d

080095fc <__multiply>:
 80095fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009600:	4691      	mov	r9, r2
 8009602:	690a      	ldr	r2, [r1, #16]
 8009604:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009608:	429a      	cmp	r2, r3
 800960a:	bfb8      	it	lt
 800960c:	460b      	movlt	r3, r1
 800960e:	460c      	mov	r4, r1
 8009610:	bfbc      	itt	lt
 8009612:	464c      	movlt	r4, r9
 8009614:	4699      	movlt	r9, r3
 8009616:	6927      	ldr	r7, [r4, #16]
 8009618:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800961c:	68a3      	ldr	r3, [r4, #8]
 800961e:	6861      	ldr	r1, [r4, #4]
 8009620:	eb07 060a 	add.w	r6, r7, sl
 8009624:	42b3      	cmp	r3, r6
 8009626:	b085      	sub	sp, #20
 8009628:	bfb8      	it	lt
 800962a:	3101      	addlt	r1, #1
 800962c:	f7ff feda 	bl	80093e4 <_Balloc>
 8009630:	b930      	cbnz	r0, 8009640 <__multiply+0x44>
 8009632:	4602      	mov	r2, r0
 8009634:	4b44      	ldr	r3, [pc, #272]	; (8009748 <__multiply+0x14c>)
 8009636:	4845      	ldr	r0, [pc, #276]	; (800974c <__multiply+0x150>)
 8009638:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800963c:	f000 fc8c 	bl	8009f58 <__assert_func>
 8009640:	f100 0514 	add.w	r5, r0, #20
 8009644:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009648:	462b      	mov	r3, r5
 800964a:	2200      	movs	r2, #0
 800964c:	4543      	cmp	r3, r8
 800964e:	d321      	bcc.n	8009694 <__multiply+0x98>
 8009650:	f104 0314 	add.w	r3, r4, #20
 8009654:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009658:	f109 0314 	add.w	r3, r9, #20
 800965c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009660:	9202      	str	r2, [sp, #8]
 8009662:	1b3a      	subs	r2, r7, r4
 8009664:	3a15      	subs	r2, #21
 8009666:	f022 0203 	bic.w	r2, r2, #3
 800966a:	3204      	adds	r2, #4
 800966c:	f104 0115 	add.w	r1, r4, #21
 8009670:	428f      	cmp	r7, r1
 8009672:	bf38      	it	cc
 8009674:	2204      	movcc	r2, #4
 8009676:	9201      	str	r2, [sp, #4]
 8009678:	9a02      	ldr	r2, [sp, #8]
 800967a:	9303      	str	r3, [sp, #12]
 800967c:	429a      	cmp	r2, r3
 800967e:	d80c      	bhi.n	800969a <__multiply+0x9e>
 8009680:	2e00      	cmp	r6, #0
 8009682:	dd03      	ble.n	800968c <__multiply+0x90>
 8009684:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009688:	2b00      	cmp	r3, #0
 800968a:	d05b      	beq.n	8009744 <__multiply+0x148>
 800968c:	6106      	str	r6, [r0, #16]
 800968e:	b005      	add	sp, #20
 8009690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009694:	f843 2b04 	str.w	r2, [r3], #4
 8009698:	e7d8      	b.n	800964c <__multiply+0x50>
 800969a:	f8b3 a000 	ldrh.w	sl, [r3]
 800969e:	f1ba 0f00 	cmp.w	sl, #0
 80096a2:	d024      	beq.n	80096ee <__multiply+0xf2>
 80096a4:	f104 0e14 	add.w	lr, r4, #20
 80096a8:	46a9      	mov	r9, r5
 80096aa:	f04f 0c00 	mov.w	ip, #0
 80096ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80096b2:	f8d9 1000 	ldr.w	r1, [r9]
 80096b6:	fa1f fb82 	uxth.w	fp, r2
 80096ba:	b289      	uxth	r1, r1
 80096bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80096c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80096c4:	f8d9 2000 	ldr.w	r2, [r9]
 80096c8:	4461      	add	r1, ip
 80096ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80096ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80096d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80096d6:	b289      	uxth	r1, r1
 80096d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80096dc:	4577      	cmp	r7, lr
 80096de:	f849 1b04 	str.w	r1, [r9], #4
 80096e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80096e6:	d8e2      	bhi.n	80096ae <__multiply+0xb2>
 80096e8:	9a01      	ldr	r2, [sp, #4]
 80096ea:	f845 c002 	str.w	ip, [r5, r2]
 80096ee:	9a03      	ldr	r2, [sp, #12]
 80096f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80096f4:	3304      	adds	r3, #4
 80096f6:	f1b9 0f00 	cmp.w	r9, #0
 80096fa:	d021      	beq.n	8009740 <__multiply+0x144>
 80096fc:	6829      	ldr	r1, [r5, #0]
 80096fe:	f104 0c14 	add.w	ip, r4, #20
 8009702:	46ae      	mov	lr, r5
 8009704:	f04f 0a00 	mov.w	sl, #0
 8009708:	f8bc b000 	ldrh.w	fp, [ip]
 800970c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009710:	fb09 220b 	mla	r2, r9, fp, r2
 8009714:	4452      	add	r2, sl
 8009716:	b289      	uxth	r1, r1
 8009718:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800971c:	f84e 1b04 	str.w	r1, [lr], #4
 8009720:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009724:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009728:	f8be 1000 	ldrh.w	r1, [lr]
 800972c:	fb09 110a 	mla	r1, r9, sl, r1
 8009730:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009734:	4567      	cmp	r7, ip
 8009736:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800973a:	d8e5      	bhi.n	8009708 <__multiply+0x10c>
 800973c:	9a01      	ldr	r2, [sp, #4]
 800973e:	50a9      	str	r1, [r5, r2]
 8009740:	3504      	adds	r5, #4
 8009742:	e799      	b.n	8009678 <__multiply+0x7c>
 8009744:	3e01      	subs	r6, #1
 8009746:	e79b      	b.n	8009680 <__multiply+0x84>
 8009748:	0800a76c 	.word	0x0800a76c
 800974c:	0800a77d 	.word	0x0800a77d

08009750 <__pow5mult>:
 8009750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009754:	4615      	mov	r5, r2
 8009756:	f012 0203 	ands.w	r2, r2, #3
 800975a:	4606      	mov	r6, r0
 800975c:	460f      	mov	r7, r1
 800975e:	d007      	beq.n	8009770 <__pow5mult+0x20>
 8009760:	4c25      	ldr	r4, [pc, #148]	; (80097f8 <__pow5mult+0xa8>)
 8009762:	3a01      	subs	r2, #1
 8009764:	2300      	movs	r3, #0
 8009766:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800976a:	f7ff fe9d 	bl	80094a8 <__multadd>
 800976e:	4607      	mov	r7, r0
 8009770:	10ad      	asrs	r5, r5, #2
 8009772:	d03d      	beq.n	80097f0 <__pow5mult+0xa0>
 8009774:	69f4      	ldr	r4, [r6, #28]
 8009776:	b97c      	cbnz	r4, 8009798 <__pow5mult+0x48>
 8009778:	2010      	movs	r0, #16
 800977a:	f7ff fd7f 	bl	800927c <malloc>
 800977e:	4602      	mov	r2, r0
 8009780:	61f0      	str	r0, [r6, #28]
 8009782:	b928      	cbnz	r0, 8009790 <__pow5mult+0x40>
 8009784:	4b1d      	ldr	r3, [pc, #116]	; (80097fc <__pow5mult+0xac>)
 8009786:	481e      	ldr	r0, [pc, #120]	; (8009800 <__pow5mult+0xb0>)
 8009788:	f240 11b3 	movw	r1, #435	; 0x1b3
 800978c:	f000 fbe4 	bl	8009f58 <__assert_func>
 8009790:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009794:	6004      	str	r4, [r0, #0]
 8009796:	60c4      	str	r4, [r0, #12]
 8009798:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800979c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80097a0:	b94c      	cbnz	r4, 80097b6 <__pow5mult+0x66>
 80097a2:	f240 2171 	movw	r1, #625	; 0x271
 80097a6:	4630      	mov	r0, r6
 80097a8:	f7ff ff12 	bl	80095d0 <__i2b>
 80097ac:	2300      	movs	r3, #0
 80097ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80097b2:	4604      	mov	r4, r0
 80097b4:	6003      	str	r3, [r0, #0]
 80097b6:	f04f 0900 	mov.w	r9, #0
 80097ba:	07eb      	lsls	r3, r5, #31
 80097bc:	d50a      	bpl.n	80097d4 <__pow5mult+0x84>
 80097be:	4639      	mov	r1, r7
 80097c0:	4622      	mov	r2, r4
 80097c2:	4630      	mov	r0, r6
 80097c4:	f7ff ff1a 	bl	80095fc <__multiply>
 80097c8:	4639      	mov	r1, r7
 80097ca:	4680      	mov	r8, r0
 80097cc:	4630      	mov	r0, r6
 80097ce:	f7ff fe49 	bl	8009464 <_Bfree>
 80097d2:	4647      	mov	r7, r8
 80097d4:	106d      	asrs	r5, r5, #1
 80097d6:	d00b      	beq.n	80097f0 <__pow5mult+0xa0>
 80097d8:	6820      	ldr	r0, [r4, #0]
 80097da:	b938      	cbnz	r0, 80097ec <__pow5mult+0x9c>
 80097dc:	4622      	mov	r2, r4
 80097de:	4621      	mov	r1, r4
 80097e0:	4630      	mov	r0, r6
 80097e2:	f7ff ff0b 	bl	80095fc <__multiply>
 80097e6:	6020      	str	r0, [r4, #0]
 80097e8:	f8c0 9000 	str.w	r9, [r0]
 80097ec:	4604      	mov	r4, r0
 80097ee:	e7e4      	b.n	80097ba <__pow5mult+0x6a>
 80097f0:	4638      	mov	r0, r7
 80097f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097f6:	bf00      	nop
 80097f8:	0800a8c8 	.word	0x0800a8c8
 80097fc:	0800a6fd 	.word	0x0800a6fd
 8009800:	0800a77d 	.word	0x0800a77d

08009804 <__lshift>:
 8009804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009808:	460c      	mov	r4, r1
 800980a:	6849      	ldr	r1, [r1, #4]
 800980c:	6923      	ldr	r3, [r4, #16]
 800980e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009812:	68a3      	ldr	r3, [r4, #8]
 8009814:	4607      	mov	r7, r0
 8009816:	4691      	mov	r9, r2
 8009818:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800981c:	f108 0601 	add.w	r6, r8, #1
 8009820:	42b3      	cmp	r3, r6
 8009822:	db0b      	blt.n	800983c <__lshift+0x38>
 8009824:	4638      	mov	r0, r7
 8009826:	f7ff fddd 	bl	80093e4 <_Balloc>
 800982a:	4605      	mov	r5, r0
 800982c:	b948      	cbnz	r0, 8009842 <__lshift+0x3e>
 800982e:	4602      	mov	r2, r0
 8009830:	4b28      	ldr	r3, [pc, #160]	; (80098d4 <__lshift+0xd0>)
 8009832:	4829      	ldr	r0, [pc, #164]	; (80098d8 <__lshift+0xd4>)
 8009834:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009838:	f000 fb8e 	bl	8009f58 <__assert_func>
 800983c:	3101      	adds	r1, #1
 800983e:	005b      	lsls	r3, r3, #1
 8009840:	e7ee      	b.n	8009820 <__lshift+0x1c>
 8009842:	2300      	movs	r3, #0
 8009844:	f100 0114 	add.w	r1, r0, #20
 8009848:	f100 0210 	add.w	r2, r0, #16
 800984c:	4618      	mov	r0, r3
 800984e:	4553      	cmp	r3, sl
 8009850:	db33      	blt.n	80098ba <__lshift+0xb6>
 8009852:	6920      	ldr	r0, [r4, #16]
 8009854:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009858:	f104 0314 	add.w	r3, r4, #20
 800985c:	f019 091f 	ands.w	r9, r9, #31
 8009860:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009864:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009868:	d02b      	beq.n	80098c2 <__lshift+0xbe>
 800986a:	f1c9 0e20 	rsb	lr, r9, #32
 800986e:	468a      	mov	sl, r1
 8009870:	2200      	movs	r2, #0
 8009872:	6818      	ldr	r0, [r3, #0]
 8009874:	fa00 f009 	lsl.w	r0, r0, r9
 8009878:	4310      	orrs	r0, r2
 800987a:	f84a 0b04 	str.w	r0, [sl], #4
 800987e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009882:	459c      	cmp	ip, r3
 8009884:	fa22 f20e 	lsr.w	r2, r2, lr
 8009888:	d8f3      	bhi.n	8009872 <__lshift+0x6e>
 800988a:	ebac 0304 	sub.w	r3, ip, r4
 800988e:	3b15      	subs	r3, #21
 8009890:	f023 0303 	bic.w	r3, r3, #3
 8009894:	3304      	adds	r3, #4
 8009896:	f104 0015 	add.w	r0, r4, #21
 800989a:	4584      	cmp	ip, r0
 800989c:	bf38      	it	cc
 800989e:	2304      	movcc	r3, #4
 80098a0:	50ca      	str	r2, [r1, r3]
 80098a2:	b10a      	cbz	r2, 80098a8 <__lshift+0xa4>
 80098a4:	f108 0602 	add.w	r6, r8, #2
 80098a8:	3e01      	subs	r6, #1
 80098aa:	4638      	mov	r0, r7
 80098ac:	612e      	str	r6, [r5, #16]
 80098ae:	4621      	mov	r1, r4
 80098b0:	f7ff fdd8 	bl	8009464 <_Bfree>
 80098b4:	4628      	mov	r0, r5
 80098b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80098be:	3301      	adds	r3, #1
 80098c0:	e7c5      	b.n	800984e <__lshift+0x4a>
 80098c2:	3904      	subs	r1, #4
 80098c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80098c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80098cc:	459c      	cmp	ip, r3
 80098ce:	d8f9      	bhi.n	80098c4 <__lshift+0xc0>
 80098d0:	e7ea      	b.n	80098a8 <__lshift+0xa4>
 80098d2:	bf00      	nop
 80098d4:	0800a76c 	.word	0x0800a76c
 80098d8:	0800a77d 	.word	0x0800a77d

080098dc <__mcmp>:
 80098dc:	b530      	push	{r4, r5, lr}
 80098de:	6902      	ldr	r2, [r0, #16]
 80098e0:	690c      	ldr	r4, [r1, #16]
 80098e2:	1b12      	subs	r2, r2, r4
 80098e4:	d10e      	bne.n	8009904 <__mcmp+0x28>
 80098e6:	f100 0314 	add.w	r3, r0, #20
 80098ea:	3114      	adds	r1, #20
 80098ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80098f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80098f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80098f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80098fc:	42a5      	cmp	r5, r4
 80098fe:	d003      	beq.n	8009908 <__mcmp+0x2c>
 8009900:	d305      	bcc.n	800990e <__mcmp+0x32>
 8009902:	2201      	movs	r2, #1
 8009904:	4610      	mov	r0, r2
 8009906:	bd30      	pop	{r4, r5, pc}
 8009908:	4283      	cmp	r3, r0
 800990a:	d3f3      	bcc.n	80098f4 <__mcmp+0x18>
 800990c:	e7fa      	b.n	8009904 <__mcmp+0x28>
 800990e:	f04f 32ff 	mov.w	r2, #4294967295
 8009912:	e7f7      	b.n	8009904 <__mcmp+0x28>

08009914 <__mdiff>:
 8009914:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009918:	460c      	mov	r4, r1
 800991a:	4606      	mov	r6, r0
 800991c:	4611      	mov	r1, r2
 800991e:	4620      	mov	r0, r4
 8009920:	4690      	mov	r8, r2
 8009922:	f7ff ffdb 	bl	80098dc <__mcmp>
 8009926:	1e05      	subs	r5, r0, #0
 8009928:	d110      	bne.n	800994c <__mdiff+0x38>
 800992a:	4629      	mov	r1, r5
 800992c:	4630      	mov	r0, r6
 800992e:	f7ff fd59 	bl	80093e4 <_Balloc>
 8009932:	b930      	cbnz	r0, 8009942 <__mdiff+0x2e>
 8009934:	4b3a      	ldr	r3, [pc, #232]	; (8009a20 <__mdiff+0x10c>)
 8009936:	4602      	mov	r2, r0
 8009938:	f240 2137 	movw	r1, #567	; 0x237
 800993c:	4839      	ldr	r0, [pc, #228]	; (8009a24 <__mdiff+0x110>)
 800993e:	f000 fb0b 	bl	8009f58 <__assert_func>
 8009942:	2301      	movs	r3, #1
 8009944:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009948:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800994c:	bfa4      	itt	ge
 800994e:	4643      	movge	r3, r8
 8009950:	46a0      	movge	r8, r4
 8009952:	4630      	mov	r0, r6
 8009954:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009958:	bfa6      	itte	ge
 800995a:	461c      	movge	r4, r3
 800995c:	2500      	movge	r5, #0
 800995e:	2501      	movlt	r5, #1
 8009960:	f7ff fd40 	bl	80093e4 <_Balloc>
 8009964:	b920      	cbnz	r0, 8009970 <__mdiff+0x5c>
 8009966:	4b2e      	ldr	r3, [pc, #184]	; (8009a20 <__mdiff+0x10c>)
 8009968:	4602      	mov	r2, r0
 800996a:	f240 2145 	movw	r1, #581	; 0x245
 800996e:	e7e5      	b.n	800993c <__mdiff+0x28>
 8009970:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009974:	6926      	ldr	r6, [r4, #16]
 8009976:	60c5      	str	r5, [r0, #12]
 8009978:	f104 0914 	add.w	r9, r4, #20
 800997c:	f108 0514 	add.w	r5, r8, #20
 8009980:	f100 0e14 	add.w	lr, r0, #20
 8009984:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009988:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800998c:	f108 0210 	add.w	r2, r8, #16
 8009990:	46f2      	mov	sl, lr
 8009992:	2100      	movs	r1, #0
 8009994:	f859 3b04 	ldr.w	r3, [r9], #4
 8009998:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800999c:	fa11 f88b 	uxtah	r8, r1, fp
 80099a0:	b299      	uxth	r1, r3
 80099a2:	0c1b      	lsrs	r3, r3, #16
 80099a4:	eba8 0801 	sub.w	r8, r8, r1
 80099a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80099ac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80099b0:	fa1f f888 	uxth.w	r8, r8
 80099b4:	1419      	asrs	r1, r3, #16
 80099b6:	454e      	cmp	r6, r9
 80099b8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80099bc:	f84a 3b04 	str.w	r3, [sl], #4
 80099c0:	d8e8      	bhi.n	8009994 <__mdiff+0x80>
 80099c2:	1b33      	subs	r3, r6, r4
 80099c4:	3b15      	subs	r3, #21
 80099c6:	f023 0303 	bic.w	r3, r3, #3
 80099ca:	3304      	adds	r3, #4
 80099cc:	3415      	adds	r4, #21
 80099ce:	42a6      	cmp	r6, r4
 80099d0:	bf38      	it	cc
 80099d2:	2304      	movcc	r3, #4
 80099d4:	441d      	add	r5, r3
 80099d6:	4473      	add	r3, lr
 80099d8:	469e      	mov	lr, r3
 80099da:	462e      	mov	r6, r5
 80099dc:	4566      	cmp	r6, ip
 80099de:	d30e      	bcc.n	80099fe <__mdiff+0xea>
 80099e0:	f10c 0203 	add.w	r2, ip, #3
 80099e4:	1b52      	subs	r2, r2, r5
 80099e6:	f022 0203 	bic.w	r2, r2, #3
 80099ea:	3d03      	subs	r5, #3
 80099ec:	45ac      	cmp	ip, r5
 80099ee:	bf38      	it	cc
 80099f0:	2200      	movcc	r2, #0
 80099f2:	4413      	add	r3, r2
 80099f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80099f8:	b17a      	cbz	r2, 8009a1a <__mdiff+0x106>
 80099fa:	6107      	str	r7, [r0, #16]
 80099fc:	e7a4      	b.n	8009948 <__mdiff+0x34>
 80099fe:	f856 8b04 	ldr.w	r8, [r6], #4
 8009a02:	fa11 f288 	uxtah	r2, r1, r8
 8009a06:	1414      	asrs	r4, r2, #16
 8009a08:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009a0c:	b292      	uxth	r2, r2
 8009a0e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009a12:	f84e 2b04 	str.w	r2, [lr], #4
 8009a16:	1421      	asrs	r1, r4, #16
 8009a18:	e7e0      	b.n	80099dc <__mdiff+0xc8>
 8009a1a:	3f01      	subs	r7, #1
 8009a1c:	e7ea      	b.n	80099f4 <__mdiff+0xe0>
 8009a1e:	bf00      	nop
 8009a20:	0800a76c 	.word	0x0800a76c
 8009a24:	0800a77d 	.word	0x0800a77d

08009a28 <__d2b>:
 8009a28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a2c:	460f      	mov	r7, r1
 8009a2e:	2101      	movs	r1, #1
 8009a30:	ec59 8b10 	vmov	r8, r9, d0
 8009a34:	4616      	mov	r6, r2
 8009a36:	f7ff fcd5 	bl	80093e4 <_Balloc>
 8009a3a:	4604      	mov	r4, r0
 8009a3c:	b930      	cbnz	r0, 8009a4c <__d2b+0x24>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	4b24      	ldr	r3, [pc, #144]	; (8009ad4 <__d2b+0xac>)
 8009a42:	4825      	ldr	r0, [pc, #148]	; (8009ad8 <__d2b+0xb0>)
 8009a44:	f240 310f 	movw	r1, #783	; 0x30f
 8009a48:	f000 fa86 	bl	8009f58 <__assert_func>
 8009a4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009a50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a54:	bb2d      	cbnz	r5, 8009aa2 <__d2b+0x7a>
 8009a56:	9301      	str	r3, [sp, #4]
 8009a58:	f1b8 0300 	subs.w	r3, r8, #0
 8009a5c:	d026      	beq.n	8009aac <__d2b+0x84>
 8009a5e:	4668      	mov	r0, sp
 8009a60:	9300      	str	r3, [sp, #0]
 8009a62:	f7ff fd87 	bl	8009574 <__lo0bits>
 8009a66:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009a6a:	b1e8      	cbz	r0, 8009aa8 <__d2b+0x80>
 8009a6c:	f1c0 0320 	rsb	r3, r0, #32
 8009a70:	fa02 f303 	lsl.w	r3, r2, r3
 8009a74:	430b      	orrs	r3, r1
 8009a76:	40c2      	lsrs	r2, r0
 8009a78:	6163      	str	r3, [r4, #20]
 8009a7a:	9201      	str	r2, [sp, #4]
 8009a7c:	9b01      	ldr	r3, [sp, #4]
 8009a7e:	61a3      	str	r3, [r4, #24]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	bf14      	ite	ne
 8009a84:	2202      	movne	r2, #2
 8009a86:	2201      	moveq	r2, #1
 8009a88:	6122      	str	r2, [r4, #16]
 8009a8a:	b1bd      	cbz	r5, 8009abc <__d2b+0x94>
 8009a8c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009a90:	4405      	add	r5, r0
 8009a92:	603d      	str	r5, [r7, #0]
 8009a94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a98:	6030      	str	r0, [r6, #0]
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	b003      	add	sp, #12
 8009a9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009aa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009aa6:	e7d6      	b.n	8009a56 <__d2b+0x2e>
 8009aa8:	6161      	str	r1, [r4, #20]
 8009aaa:	e7e7      	b.n	8009a7c <__d2b+0x54>
 8009aac:	a801      	add	r0, sp, #4
 8009aae:	f7ff fd61 	bl	8009574 <__lo0bits>
 8009ab2:	9b01      	ldr	r3, [sp, #4]
 8009ab4:	6163      	str	r3, [r4, #20]
 8009ab6:	3020      	adds	r0, #32
 8009ab8:	2201      	movs	r2, #1
 8009aba:	e7e5      	b.n	8009a88 <__d2b+0x60>
 8009abc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ac0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ac4:	6038      	str	r0, [r7, #0]
 8009ac6:	6918      	ldr	r0, [r3, #16]
 8009ac8:	f7ff fd34 	bl	8009534 <__hi0bits>
 8009acc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009ad0:	e7e2      	b.n	8009a98 <__d2b+0x70>
 8009ad2:	bf00      	nop
 8009ad4:	0800a76c 	.word	0x0800a76c
 8009ad8:	0800a77d 	.word	0x0800a77d

08009adc <__ssputs_r>:
 8009adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae0:	688e      	ldr	r6, [r1, #8]
 8009ae2:	461f      	mov	r7, r3
 8009ae4:	42be      	cmp	r6, r7
 8009ae6:	680b      	ldr	r3, [r1, #0]
 8009ae8:	4682      	mov	sl, r0
 8009aea:	460c      	mov	r4, r1
 8009aec:	4690      	mov	r8, r2
 8009aee:	d82c      	bhi.n	8009b4a <__ssputs_r+0x6e>
 8009af0:	898a      	ldrh	r2, [r1, #12]
 8009af2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009af6:	d026      	beq.n	8009b46 <__ssputs_r+0x6a>
 8009af8:	6965      	ldr	r5, [r4, #20]
 8009afa:	6909      	ldr	r1, [r1, #16]
 8009afc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b00:	eba3 0901 	sub.w	r9, r3, r1
 8009b04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b08:	1c7b      	adds	r3, r7, #1
 8009b0a:	444b      	add	r3, r9
 8009b0c:	106d      	asrs	r5, r5, #1
 8009b0e:	429d      	cmp	r5, r3
 8009b10:	bf38      	it	cc
 8009b12:	461d      	movcc	r5, r3
 8009b14:	0553      	lsls	r3, r2, #21
 8009b16:	d527      	bpl.n	8009b68 <__ssputs_r+0x8c>
 8009b18:	4629      	mov	r1, r5
 8009b1a:	f7ff fbd7 	bl	80092cc <_malloc_r>
 8009b1e:	4606      	mov	r6, r0
 8009b20:	b360      	cbz	r0, 8009b7c <__ssputs_r+0xa0>
 8009b22:	6921      	ldr	r1, [r4, #16]
 8009b24:	464a      	mov	r2, r9
 8009b26:	f000 fa09 	bl	8009f3c <memcpy>
 8009b2a:	89a3      	ldrh	r3, [r4, #12]
 8009b2c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b34:	81a3      	strh	r3, [r4, #12]
 8009b36:	6126      	str	r6, [r4, #16]
 8009b38:	6165      	str	r5, [r4, #20]
 8009b3a:	444e      	add	r6, r9
 8009b3c:	eba5 0509 	sub.w	r5, r5, r9
 8009b40:	6026      	str	r6, [r4, #0]
 8009b42:	60a5      	str	r5, [r4, #8]
 8009b44:	463e      	mov	r6, r7
 8009b46:	42be      	cmp	r6, r7
 8009b48:	d900      	bls.n	8009b4c <__ssputs_r+0x70>
 8009b4a:	463e      	mov	r6, r7
 8009b4c:	6820      	ldr	r0, [r4, #0]
 8009b4e:	4632      	mov	r2, r6
 8009b50:	4641      	mov	r1, r8
 8009b52:	f000 f9c9 	bl	8009ee8 <memmove>
 8009b56:	68a3      	ldr	r3, [r4, #8]
 8009b58:	1b9b      	subs	r3, r3, r6
 8009b5a:	60a3      	str	r3, [r4, #8]
 8009b5c:	6823      	ldr	r3, [r4, #0]
 8009b5e:	4433      	add	r3, r6
 8009b60:	6023      	str	r3, [r4, #0]
 8009b62:	2000      	movs	r0, #0
 8009b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b68:	462a      	mov	r2, r5
 8009b6a:	f000 fa3b 	bl	8009fe4 <_realloc_r>
 8009b6e:	4606      	mov	r6, r0
 8009b70:	2800      	cmp	r0, #0
 8009b72:	d1e0      	bne.n	8009b36 <__ssputs_r+0x5a>
 8009b74:	6921      	ldr	r1, [r4, #16]
 8009b76:	4650      	mov	r0, sl
 8009b78:	f7ff fb34 	bl	80091e4 <_free_r>
 8009b7c:	230c      	movs	r3, #12
 8009b7e:	f8ca 3000 	str.w	r3, [sl]
 8009b82:	89a3      	ldrh	r3, [r4, #12]
 8009b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b88:	81a3      	strh	r3, [r4, #12]
 8009b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b8e:	e7e9      	b.n	8009b64 <__ssputs_r+0x88>

08009b90 <_svfiprintf_r>:
 8009b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b94:	4698      	mov	r8, r3
 8009b96:	898b      	ldrh	r3, [r1, #12]
 8009b98:	061b      	lsls	r3, r3, #24
 8009b9a:	b09d      	sub	sp, #116	; 0x74
 8009b9c:	4607      	mov	r7, r0
 8009b9e:	460d      	mov	r5, r1
 8009ba0:	4614      	mov	r4, r2
 8009ba2:	d50e      	bpl.n	8009bc2 <_svfiprintf_r+0x32>
 8009ba4:	690b      	ldr	r3, [r1, #16]
 8009ba6:	b963      	cbnz	r3, 8009bc2 <_svfiprintf_r+0x32>
 8009ba8:	2140      	movs	r1, #64	; 0x40
 8009baa:	f7ff fb8f 	bl	80092cc <_malloc_r>
 8009bae:	6028      	str	r0, [r5, #0]
 8009bb0:	6128      	str	r0, [r5, #16]
 8009bb2:	b920      	cbnz	r0, 8009bbe <_svfiprintf_r+0x2e>
 8009bb4:	230c      	movs	r3, #12
 8009bb6:	603b      	str	r3, [r7, #0]
 8009bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bbc:	e0d0      	b.n	8009d60 <_svfiprintf_r+0x1d0>
 8009bbe:	2340      	movs	r3, #64	; 0x40
 8009bc0:	616b      	str	r3, [r5, #20]
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8009bc6:	2320      	movs	r3, #32
 8009bc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009bcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bd0:	2330      	movs	r3, #48	; 0x30
 8009bd2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009d78 <_svfiprintf_r+0x1e8>
 8009bd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009bda:	f04f 0901 	mov.w	r9, #1
 8009bde:	4623      	mov	r3, r4
 8009be0:	469a      	mov	sl, r3
 8009be2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009be6:	b10a      	cbz	r2, 8009bec <_svfiprintf_r+0x5c>
 8009be8:	2a25      	cmp	r2, #37	; 0x25
 8009bea:	d1f9      	bne.n	8009be0 <_svfiprintf_r+0x50>
 8009bec:	ebba 0b04 	subs.w	fp, sl, r4
 8009bf0:	d00b      	beq.n	8009c0a <_svfiprintf_r+0x7a>
 8009bf2:	465b      	mov	r3, fp
 8009bf4:	4622      	mov	r2, r4
 8009bf6:	4629      	mov	r1, r5
 8009bf8:	4638      	mov	r0, r7
 8009bfa:	f7ff ff6f 	bl	8009adc <__ssputs_r>
 8009bfe:	3001      	adds	r0, #1
 8009c00:	f000 80a9 	beq.w	8009d56 <_svfiprintf_r+0x1c6>
 8009c04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c06:	445a      	add	r2, fp
 8009c08:	9209      	str	r2, [sp, #36]	; 0x24
 8009c0a:	f89a 3000 	ldrb.w	r3, [sl]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	f000 80a1 	beq.w	8009d56 <_svfiprintf_r+0x1c6>
 8009c14:	2300      	movs	r3, #0
 8009c16:	f04f 32ff 	mov.w	r2, #4294967295
 8009c1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c1e:	f10a 0a01 	add.w	sl, sl, #1
 8009c22:	9304      	str	r3, [sp, #16]
 8009c24:	9307      	str	r3, [sp, #28]
 8009c26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c2a:	931a      	str	r3, [sp, #104]	; 0x68
 8009c2c:	4654      	mov	r4, sl
 8009c2e:	2205      	movs	r2, #5
 8009c30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c34:	4850      	ldr	r0, [pc, #320]	; (8009d78 <_svfiprintf_r+0x1e8>)
 8009c36:	f7f6 facb 	bl	80001d0 <memchr>
 8009c3a:	9a04      	ldr	r2, [sp, #16]
 8009c3c:	b9d8      	cbnz	r0, 8009c76 <_svfiprintf_r+0xe6>
 8009c3e:	06d0      	lsls	r0, r2, #27
 8009c40:	bf44      	itt	mi
 8009c42:	2320      	movmi	r3, #32
 8009c44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c48:	0711      	lsls	r1, r2, #28
 8009c4a:	bf44      	itt	mi
 8009c4c:	232b      	movmi	r3, #43	; 0x2b
 8009c4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c52:	f89a 3000 	ldrb.w	r3, [sl]
 8009c56:	2b2a      	cmp	r3, #42	; 0x2a
 8009c58:	d015      	beq.n	8009c86 <_svfiprintf_r+0xf6>
 8009c5a:	9a07      	ldr	r2, [sp, #28]
 8009c5c:	4654      	mov	r4, sl
 8009c5e:	2000      	movs	r0, #0
 8009c60:	f04f 0c0a 	mov.w	ip, #10
 8009c64:	4621      	mov	r1, r4
 8009c66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c6a:	3b30      	subs	r3, #48	; 0x30
 8009c6c:	2b09      	cmp	r3, #9
 8009c6e:	d94d      	bls.n	8009d0c <_svfiprintf_r+0x17c>
 8009c70:	b1b0      	cbz	r0, 8009ca0 <_svfiprintf_r+0x110>
 8009c72:	9207      	str	r2, [sp, #28]
 8009c74:	e014      	b.n	8009ca0 <_svfiprintf_r+0x110>
 8009c76:	eba0 0308 	sub.w	r3, r0, r8
 8009c7a:	fa09 f303 	lsl.w	r3, r9, r3
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	9304      	str	r3, [sp, #16]
 8009c82:	46a2      	mov	sl, r4
 8009c84:	e7d2      	b.n	8009c2c <_svfiprintf_r+0x9c>
 8009c86:	9b03      	ldr	r3, [sp, #12]
 8009c88:	1d19      	adds	r1, r3, #4
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	9103      	str	r1, [sp, #12]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	bfbb      	ittet	lt
 8009c92:	425b      	neglt	r3, r3
 8009c94:	f042 0202 	orrlt.w	r2, r2, #2
 8009c98:	9307      	strge	r3, [sp, #28]
 8009c9a:	9307      	strlt	r3, [sp, #28]
 8009c9c:	bfb8      	it	lt
 8009c9e:	9204      	strlt	r2, [sp, #16]
 8009ca0:	7823      	ldrb	r3, [r4, #0]
 8009ca2:	2b2e      	cmp	r3, #46	; 0x2e
 8009ca4:	d10c      	bne.n	8009cc0 <_svfiprintf_r+0x130>
 8009ca6:	7863      	ldrb	r3, [r4, #1]
 8009ca8:	2b2a      	cmp	r3, #42	; 0x2a
 8009caa:	d134      	bne.n	8009d16 <_svfiprintf_r+0x186>
 8009cac:	9b03      	ldr	r3, [sp, #12]
 8009cae:	1d1a      	adds	r2, r3, #4
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	9203      	str	r2, [sp, #12]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	bfb8      	it	lt
 8009cb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009cbc:	3402      	adds	r4, #2
 8009cbe:	9305      	str	r3, [sp, #20]
 8009cc0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009d88 <_svfiprintf_r+0x1f8>
 8009cc4:	7821      	ldrb	r1, [r4, #0]
 8009cc6:	2203      	movs	r2, #3
 8009cc8:	4650      	mov	r0, sl
 8009cca:	f7f6 fa81 	bl	80001d0 <memchr>
 8009cce:	b138      	cbz	r0, 8009ce0 <_svfiprintf_r+0x150>
 8009cd0:	9b04      	ldr	r3, [sp, #16]
 8009cd2:	eba0 000a 	sub.w	r0, r0, sl
 8009cd6:	2240      	movs	r2, #64	; 0x40
 8009cd8:	4082      	lsls	r2, r0
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	3401      	adds	r4, #1
 8009cde:	9304      	str	r3, [sp, #16]
 8009ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ce4:	4825      	ldr	r0, [pc, #148]	; (8009d7c <_svfiprintf_r+0x1ec>)
 8009ce6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cea:	2206      	movs	r2, #6
 8009cec:	f7f6 fa70 	bl	80001d0 <memchr>
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	d038      	beq.n	8009d66 <_svfiprintf_r+0x1d6>
 8009cf4:	4b22      	ldr	r3, [pc, #136]	; (8009d80 <_svfiprintf_r+0x1f0>)
 8009cf6:	bb1b      	cbnz	r3, 8009d40 <_svfiprintf_r+0x1b0>
 8009cf8:	9b03      	ldr	r3, [sp, #12]
 8009cfa:	3307      	adds	r3, #7
 8009cfc:	f023 0307 	bic.w	r3, r3, #7
 8009d00:	3308      	adds	r3, #8
 8009d02:	9303      	str	r3, [sp, #12]
 8009d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d06:	4433      	add	r3, r6
 8009d08:	9309      	str	r3, [sp, #36]	; 0x24
 8009d0a:	e768      	b.n	8009bde <_svfiprintf_r+0x4e>
 8009d0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d10:	460c      	mov	r4, r1
 8009d12:	2001      	movs	r0, #1
 8009d14:	e7a6      	b.n	8009c64 <_svfiprintf_r+0xd4>
 8009d16:	2300      	movs	r3, #0
 8009d18:	3401      	adds	r4, #1
 8009d1a:	9305      	str	r3, [sp, #20]
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	f04f 0c0a 	mov.w	ip, #10
 8009d22:	4620      	mov	r0, r4
 8009d24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d28:	3a30      	subs	r2, #48	; 0x30
 8009d2a:	2a09      	cmp	r2, #9
 8009d2c:	d903      	bls.n	8009d36 <_svfiprintf_r+0x1a6>
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d0c6      	beq.n	8009cc0 <_svfiprintf_r+0x130>
 8009d32:	9105      	str	r1, [sp, #20]
 8009d34:	e7c4      	b.n	8009cc0 <_svfiprintf_r+0x130>
 8009d36:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	e7f0      	b.n	8009d22 <_svfiprintf_r+0x192>
 8009d40:	ab03      	add	r3, sp, #12
 8009d42:	9300      	str	r3, [sp, #0]
 8009d44:	462a      	mov	r2, r5
 8009d46:	4b0f      	ldr	r3, [pc, #60]	; (8009d84 <_svfiprintf_r+0x1f4>)
 8009d48:	a904      	add	r1, sp, #16
 8009d4a:	4638      	mov	r0, r7
 8009d4c:	f7fd fe64 	bl	8007a18 <_printf_float>
 8009d50:	1c42      	adds	r2, r0, #1
 8009d52:	4606      	mov	r6, r0
 8009d54:	d1d6      	bne.n	8009d04 <_svfiprintf_r+0x174>
 8009d56:	89ab      	ldrh	r3, [r5, #12]
 8009d58:	065b      	lsls	r3, r3, #25
 8009d5a:	f53f af2d 	bmi.w	8009bb8 <_svfiprintf_r+0x28>
 8009d5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d60:	b01d      	add	sp, #116	; 0x74
 8009d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d66:	ab03      	add	r3, sp, #12
 8009d68:	9300      	str	r3, [sp, #0]
 8009d6a:	462a      	mov	r2, r5
 8009d6c:	4b05      	ldr	r3, [pc, #20]	; (8009d84 <_svfiprintf_r+0x1f4>)
 8009d6e:	a904      	add	r1, sp, #16
 8009d70:	4638      	mov	r0, r7
 8009d72:	f7fe f8f5 	bl	8007f60 <_printf_i>
 8009d76:	e7eb      	b.n	8009d50 <_svfiprintf_r+0x1c0>
 8009d78:	0800a8d4 	.word	0x0800a8d4
 8009d7c:	0800a8de 	.word	0x0800a8de
 8009d80:	08007a19 	.word	0x08007a19
 8009d84:	08009add 	.word	0x08009add
 8009d88:	0800a8da 	.word	0x0800a8da

08009d8c <__sflush_r>:
 8009d8c:	898a      	ldrh	r2, [r1, #12]
 8009d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d92:	4605      	mov	r5, r0
 8009d94:	0710      	lsls	r0, r2, #28
 8009d96:	460c      	mov	r4, r1
 8009d98:	d458      	bmi.n	8009e4c <__sflush_r+0xc0>
 8009d9a:	684b      	ldr	r3, [r1, #4]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	dc05      	bgt.n	8009dac <__sflush_r+0x20>
 8009da0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	dc02      	bgt.n	8009dac <__sflush_r+0x20>
 8009da6:	2000      	movs	r0, #0
 8009da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dae:	2e00      	cmp	r6, #0
 8009db0:	d0f9      	beq.n	8009da6 <__sflush_r+0x1a>
 8009db2:	2300      	movs	r3, #0
 8009db4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009db8:	682f      	ldr	r7, [r5, #0]
 8009dba:	6a21      	ldr	r1, [r4, #32]
 8009dbc:	602b      	str	r3, [r5, #0]
 8009dbe:	d032      	beq.n	8009e26 <__sflush_r+0x9a>
 8009dc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009dc2:	89a3      	ldrh	r3, [r4, #12]
 8009dc4:	075a      	lsls	r2, r3, #29
 8009dc6:	d505      	bpl.n	8009dd4 <__sflush_r+0x48>
 8009dc8:	6863      	ldr	r3, [r4, #4]
 8009dca:	1ac0      	subs	r0, r0, r3
 8009dcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009dce:	b10b      	cbz	r3, 8009dd4 <__sflush_r+0x48>
 8009dd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009dd2:	1ac0      	subs	r0, r0, r3
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dda:	6a21      	ldr	r1, [r4, #32]
 8009ddc:	4628      	mov	r0, r5
 8009dde:	47b0      	blx	r6
 8009de0:	1c43      	adds	r3, r0, #1
 8009de2:	89a3      	ldrh	r3, [r4, #12]
 8009de4:	d106      	bne.n	8009df4 <__sflush_r+0x68>
 8009de6:	6829      	ldr	r1, [r5, #0]
 8009de8:	291d      	cmp	r1, #29
 8009dea:	d82b      	bhi.n	8009e44 <__sflush_r+0xb8>
 8009dec:	4a29      	ldr	r2, [pc, #164]	; (8009e94 <__sflush_r+0x108>)
 8009dee:	410a      	asrs	r2, r1
 8009df0:	07d6      	lsls	r6, r2, #31
 8009df2:	d427      	bmi.n	8009e44 <__sflush_r+0xb8>
 8009df4:	2200      	movs	r2, #0
 8009df6:	6062      	str	r2, [r4, #4]
 8009df8:	04d9      	lsls	r1, r3, #19
 8009dfa:	6922      	ldr	r2, [r4, #16]
 8009dfc:	6022      	str	r2, [r4, #0]
 8009dfe:	d504      	bpl.n	8009e0a <__sflush_r+0x7e>
 8009e00:	1c42      	adds	r2, r0, #1
 8009e02:	d101      	bne.n	8009e08 <__sflush_r+0x7c>
 8009e04:	682b      	ldr	r3, [r5, #0]
 8009e06:	b903      	cbnz	r3, 8009e0a <__sflush_r+0x7e>
 8009e08:	6560      	str	r0, [r4, #84]	; 0x54
 8009e0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e0c:	602f      	str	r7, [r5, #0]
 8009e0e:	2900      	cmp	r1, #0
 8009e10:	d0c9      	beq.n	8009da6 <__sflush_r+0x1a>
 8009e12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e16:	4299      	cmp	r1, r3
 8009e18:	d002      	beq.n	8009e20 <__sflush_r+0x94>
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	f7ff f9e2 	bl	80091e4 <_free_r>
 8009e20:	2000      	movs	r0, #0
 8009e22:	6360      	str	r0, [r4, #52]	; 0x34
 8009e24:	e7c0      	b.n	8009da8 <__sflush_r+0x1c>
 8009e26:	2301      	movs	r3, #1
 8009e28:	4628      	mov	r0, r5
 8009e2a:	47b0      	blx	r6
 8009e2c:	1c41      	adds	r1, r0, #1
 8009e2e:	d1c8      	bne.n	8009dc2 <__sflush_r+0x36>
 8009e30:	682b      	ldr	r3, [r5, #0]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d0c5      	beq.n	8009dc2 <__sflush_r+0x36>
 8009e36:	2b1d      	cmp	r3, #29
 8009e38:	d001      	beq.n	8009e3e <__sflush_r+0xb2>
 8009e3a:	2b16      	cmp	r3, #22
 8009e3c:	d101      	bne.n	8009e42 <__sflush_r+0xb6>
 8009e3e:	602f      	str	r7, [r5, #0]
 8009e40:	e7b1      	b.n	8009da6 <__sflush_r+0x1a>
 8009e42:	89a3      	ldrh	r3, [r4, #12]
 8009e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e48:	81a3      	strh	r3, [r4, #12]
 8009e4a:	e7ad      	b.n	8009da8 <__sflush_r+0x1c>
 8009e4c:	690f      	ldr	r7, [r1, #16]
 8009e4e:	2f00      	cmp	r7, #0
 8009e50:	d0a9      	beq.n	8009da6 <__sflush_r+0x1a>
 8009e52:	0793      	lsls	r3, r2, #30
 8009e54:	680e      	ldr	r6, [r1, #0]
 8009e56:	bf08      	it	eq
 8009e58:	694b      	ldreq	r3, [r1, #20]
 8009e5a:	600f      	str	r7, [r1, #0]
 8009e5c:	bf18      	it	ne
 8009e5e:	2300      	movne	r3, #0
 8009e60:	eba6 0807 	sub.w	r8, r6, r7
 8009e64:	608b      	str	r3, [r1, #8]
 8009e66:	f1b8 0f00 	cmp.w	r8, #0
 8009e6a:	dd9c      	ble.n	8009da6 <__sflush_r+0x1a>
 8009e6c:	6a21      	ldr	r1, [r4, #32]
 8009e6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e70:	4643      	mov	r3, r8
 8009e72:	463a      	mov	r2, r7
 8009e74:	4628      	mov	r0, r5
 8009e76:	47b0      	blx	r6
 8009e78:	2800      	cmp	r0, #0
 8009e7a:	dc06      	bgt.n	8009e8a <__sflush_r+0xfe>
 8009e7c:	89a3      	ldrh	r3, [r4, #12]
 8009e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e82:	81a3      	strh	r3, [r4, #12]
 8009e84:	f04f 30ff 	mov.w	r0, #4294967295
 8009e88:	e78e      	b.n	8009da8 <__sflush_r+0x1c>
 8009e8a:	4407      	add	r7, r0
 8009e8c:	eba8 0800 	sub.w	r8, r8, r0
 8009e90:	e7e9      	b.n	8009e66 <__sflush_r+0xda>
 8009e92:	bf00      	nop
 8009e94:	dfbffffe 	.word	0xdfbffffe

08009e98 <_fflush_r>:
 8009e98:	b538      	push	{r3, r4, r5, lr}
 8009e9a:	690b      	ldr	r3, [r1, #16]
 8009e9c:	4605      	mov	r5, r0
 8009e9e:	460c      	mov	r4, r1
 8009ea0:	b913      	cbnz	r3, 8009ea8 <_fflush_r+0x10>
 8009ea2:	2500      	movs	r5, #0
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	bd38      	pop	{r3, r4, r5, pc}
 8009ea8:	b118      	cbz	r0, 8009eb2 <_fflush_r+0x1a>
 8009eaa:	6a03      	ldr	r3, [r0, #32]
 8009eac:	b90b      	cbnz	r3, 8009eb2 <_fflush_r+0x1a>
 8009eae:	f7fe fa05 	bl	80082bc <__sinit>
 8009eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d0f3      	beq.n	8009ea2 <_fflush_r+0xa>
 8009eba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ebc:	07d0      	lsls	r0, r2, #31
 8009ebe:	d404      	bmi.n	8009eca <_fflush_r+0x32>
 8009ec0:	0599      	lsls	r1, r3, #22
 8009ec2:	d402      	bmi.n	8009eca <_fflush_r+0x32>
 8009ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ec6:	f7fe fb10 	bl	80084ea <__retarget_lock_acquire_recursive>
 8009eca:	4628      	mov	r0, r5
 8009ecc:	4621      	mov	r1, r4
 8009ece:	f7ff ff5d 	bl	8009d8c <__sflush_r>
 8009ed2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ed4:	07da      	lsls	r2, r3, #31
 8009ed6:	4605      	mov	r5, r0
 8009ed8:	d4e4      	bmi.n	8009ea4 <_fflush_r+0xc>
 8009eda:	89a3      	ldrh	r3, [r4, #12]
 8009edc:	059b      	lsls	r3, r3, #22
 8009ede:	d4e1      	bmi.n	8009ea4 <_fflush_r+0xc>
 8009ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ee2:	f7fe fb03 	bl	80084ec <__retarget_lock_release_recursive>
 8009ee6:	e7dd      	b.n	8009ea4 <_fflush_r+0xc>

08009ee8 <memmove>:
 8009ee8:	4288      	cmp	r0, r1
 8009eea:	b510      	push	{r4, lr}
 8009eec:	eb01 0402 	add.w	r4, r1, r2
 8009ef0:	d902      	bls.n	8009ef8 <memmove+0x10>
 8009ef2:	4284      	cmp	r4, r0
 8009ef4:	4623      	mov	r3, r4
 8009ef6:	d807      	bhi.n	8009f08 <memmove+0x20>
 8009ef8:	1e43      	subs	r3, r0, #1
 8009efa:	42a1      	cmp	r1, r4
 8009efc:	d008      	beq.n	8009f10 <memmove+0x28>
 8009efe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f06:	e7f8      	b.n	8009efa <memmove+0x12>
 8009f08:	4402      	add	r2, r0
 8009f0a:	4601      	mov	r1, r0
 8009f0c:	428a      	cmp	r2, r1
 8009f0e:	d100      	bne.n	8009f12 <memmove+0x2a>
 8009f10:	bd10      	pop	{r4, pc}
 8009f12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f1a:	e7f7      	b.n	8009f0c <memmove+0x24>

08009f1c <_sbrk_r>:
 8009f1c:	b538      	push	{r3, r4, r5, lr}
 8009f1e:	4d06      	ldr	r5, [pc, #24]	; (8009f38 <_sbrk_r+0x1c>)
 8009f20:	2300      	movs	r3, #0
 8009f22:	4604      	mov	r4, r0
 8009f24:	4608      	mov	r0, r1
 8009f26:	602b      	str	r3, [r5, #0]
 8009f28:	f7f8 f942 	bl	80021b0 <_sbrk>
 8009f2c:	1c43      	adds	r3, r0, #1
 8009f2e:	d102      	bne.n	8009f36 <_sbrk_r+0x1a>
 8009f30:	682b      	ldr	r3, [r5, #0]
 8009f32:	b103      	cbz	r3, 8009f36 <_sbrk_r+0x1a>
 8009f34:	6023      	str	r3, [r4, #0]
 8009f36:	bd38      	pop	{r3, r4, r5, pc}
 8009f38:	20000520 	.word	0x20000520

08009f3c <memcpy>:
 8009f3c:	440a      	add	r2, r1
 8009f3e:	4291      	cmp	r1, r2
 8009f40:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f44:	d100      	bne.n	8009f48 <memcpy+0xc>
 8009f46:	4770      	bx	lr
 8009f48:	b510      	push	{r4, lr}
 8009f4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f52:	4291      	cmp	r1, r2
 8009f54:	d1f9      	bne.n	8009f4a <memcpy+0xe>
 8009f56:	bd10      	pop	{r4, pc}

08009f58 <__assert_func>:
 8009f58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f5a:	4614      	mov	r4, r2
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	4b09      	ldr	r3, [pc, #36]	; (8009f84 <__assert_func+0x2c>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4605      	mov	r5, r0
 8009f64:	68d8      	ldr	r0, [r3, #12]
 8009f66:	b14c      	cbz	r4, 8009f7c <__assert_func+0x24>
 8009f68:	4b07      	ldr	r3, [pc, #28]	; (8009f88 <__assert_func+0x30>)
 8009f6a:	9100      	str	r1, [sp, #0]
 8009f6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f70:	4906      	ldr	r1, [pc, #24]	; (8009f8c <__assert_func+0x34>)
 8009f72:	462b      	mov	r3, r5
 8009f74:	f000 f872 	bl	800a05c <fiprintf>
 8009f78:	f000 f882 	bl	800a080 <abort>
 8009f7c:	4b04      	ldr	r3, [pc, #16]	; (8009f90 <__assert_func+0x38>)
 8009f7e:	461c      	mov	r4, r3
 8009f80:	e7f3      	b.n	8009f6a <__assert_func+0x12>
 8009f82:	bf00      	nop
 8009f84:	20000064 	.word	0x20000064
 8009f88:	0800a8ef 	.word	0x0800a8ef
 8009f8c:	0800a8fc 	.word	0x0800a8fc
 8009f90:	0800a92a 	.word	0x0800a92a

08009f94 <_calloc_r>:
 8009f94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f96:	fba1 2402 	umull	r2, r4, r1, r2
 8009f9a:	b94c      	cbnz	r4, 8009fb0 <_calloc_r+0x1c>
 8009f9c:	4611      	mov	r1, r2
 8009f9e:	9201      	str	r2, [sp, #4]
 8009fa0:	f7ff f994 	bl	80092cc <_malloc_r>
 8009fa4:	9a01      	ldr	r2, [sp, #4]
 8009fa6:	4605      	mov	r5, r0
 8009fa8:	b930      	cbnz	r0, 8009fb8 <_calloc_r+0x24>
 8009faa:	4628      	mov	r0, r5
 8009fac:	b003      	add	sp, #12
 8009fae:	bd30      	pop	{r4, r5, pc}
 8009fb0:	220c      	movs	r2, #12
 8009fb2:	6002      	str	r2, [r0, #0]
 8009fb4:	2500      	movs	r5, #0
 8009fb6:	e7f8      	b.n	8009faa <_calloc_r+0x16>
 8009fb8:	4621      	mov	r1, r4
 8009fba:	f7fe fa18 	bl	80083ee <memset>
 8009fbe:	e7f4      	b.n	8009faa <_calloc_r+0x16>

08009fc0 <__ascii_mbtowc>:
 8009fc0:	b082      	sub	sp, #8
 8009fc2:	b901      	cbnz	r1, 8009fc6 <__ascii_mbtowc+0x6>
 8009fc4:	a901      	add	r1, sp, #4
 8009fc6:	b142      	cbz	r2, 8009fda <__ascii_mbtowc+0x1a>
 8009fc8:	b14b      	cbz	r3, 8009fde <__ascii_mbtowc+0x1e>
 8009fca:	7813      	ldrb	r3, [r2, #0]
 8009fcc:	600b      	str	r3, [r1, #0]
 8009fce:	7812      	ldrb	r2, [r2, #0]
 8009fd0:	1e10      	subs	r0, r2, #0
 8009fd2:	bf18      	it	ne
 8009fd4:	2001      	movne	r0, #1
 8009fd6:	b002      	add	sp, #8
 8009fd8:	4770      	bx	lr
 8009fda:	4610      	mov	r0, r2
 8009fdc:	e7fb      	b.n	8009fd6 <__ascii_mbtowc+0x16>
 8009fde:	f06f 0001 	mvn.w	r0, #1
 8009fe2:	e7f8      	b.n	8009fd6 <__ascii_mbtowc+0x16>

08009fe4 <_realloc_r>:
 8009fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fe8:	4680      	mov	r8, r0
 8009fea:	4614      	mov	r4, r2
 8009fec:	460e      	mov	r6, r1
 8009fee:	b921      	cbnz	r1, 8009ffa <_realloc_r+0x16>
 8009ff0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ff4:	4611      	mov	r1, r2
 8009ff6:	f7ff b969 	b.w	80092cc <_malloc_r>
 8009ffa:	b92a      	cbnz	r2, 800a008 <_realloc_r+0x24>
 8009ffc:	f7ff f8f2 	bl	80091e4 <_free_r>
 800a000:	4625      	mov	r5, r4
 800a002:	4628      	mov	r0, r5
 800a004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a008:	f000 f841 	bl	800a08e <_malloc_usable_size_r>
 800a00c:	4284      	cmp	r4, r0
 800a00e:	4607      	mov	r7, r0
 800a010:	d802      	bhi.n	800a018 <_realloc_r+0x34>
 800a012:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a016:	d812      	bhi.n	800a03e <_realloc_r+0x5a>
 800a018:	4621      	mov	r1, r4
 800a01a:	4640      	mov	r0, r8
 800a01c:	f7ff f956 	bl	80092cc <_malloc_r>
 800a020:	4605      	mov	r5, r0
 800a022:	2800      	cmp	r0, #0
 800a024:	d0ed      	beq.n	800a002 <_realloc_r+0x1e>
 800a026:	42bc      	cmp	r4, r7
 800a028:	4622      	mov	r2, r4
 800a02a:	4631      	mov	r1, r6
 800a02c:	bf28      	it	cs
 800a02e:	463a      	movcs	r2, r7
 800a030:	f7ff ff84 	bl	8009f3c <memcpy>
 800a034:	4631      	mov	r1, r6
 800a036:	4640      	mov	r0, r8
 800a038:	f7ff f8d4 	bl	80091e4 <_free_r>
 800a03c:	e7e1      	b.n	800a002 <_realloc_r+0x1e>
 800a03e:	4635      	mov	r5, r6
 800a040:	e7df      	b.n	800a002 <_realloc_r+0x1e>

0800a042 <__ascii_wctomb>:
 800a042:	b149      	cbz	r1, 800a058 <__ascii_wctomb+0x16>
 800a044:	2aff      	cmp	r2, #255	; 0xff
 800a046:	bf85      	ittet	hi
 800a048:	238a      	movhi	r3, #138	; 0x8a
 800a04a:	6003      	strhi	r3, [r0, #0]
 800a04c:	700a      	strbls	r2, [r1, #0]
 800a04e:	f04f 30ff 	movhi.w	r0, #4294967295
 800a052:	bf98      	it	ls
 800a054:	2001      	movls	r0, #1
 800a056:	4770      	bx	lr
 800a058:	4608      	mov	r0, r1
 800a05a:	4770      	bx	lr

0800a05c <fiprintf>:
 800a05c:	b40e      	push	{r1, r2, r3}
 800a05e:	b503      	push	{r0, r1, lr}
 800a060:	4601      	mov	r1, r0
 800a062:	ab03      	add	r3, sp, #12
 800a064:	4805      	ldr	r0, [pc, #20]	; (800a07c <fiprintf+0x20>)
 800a066:	f853 2b04 	ldr.w	r2, [r3], #4
 800a06a:	6800      	ldr	r0, [r0, #0]
 800a06c:	9301      	str	r3, [sp, #4]
 800a06e:	f000 f83f 	bl	800a0f0 <_vfiprintf_r>
 800a072:	b002      	add	sp, #8
 800a074:	f85d eb04 	ldr.w	lr, [sp], #4
 800a078:	b003      	add	sp, #12
 800a07a:	4770      	bx	lr
 800a07c:	20000064 	.word	0x20000064

0800a080 <abort>:
 800a080:	b508      	push	{r3, lr}
 800a082:	2006      	movs	r0, #6
 800a084:	f000 fa0c 	bl	800a4a0 <raise>
 800a088:	2001      	movs	r0, #1
 800a08a:	f7f8 f819 	bl	80020c0 <_exit>

0800a08e <_malloc_usable_size_r>:
 800a08e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a092:	1f18      	subs	r0, r3, #4
 800a094:	2b00      	cmp	r3, #0
 800a096:	bfbc      	itt	lt
 800a098:	580b      	ldrlt	r3, [r1, r0]
 800a09a:	18c0      	addlt	r0, r0, r3
 800a09c:	4770      	bx	lr

0800a09e <__sfputc_r>:
 800a09e:	6893      	ldr	r3, [r2, #8]
 800a0a0:	3b01      	subs	r3, #1
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	b410      	push	{r4}
 800a0a6:	6093      	str	r3, [r2, #8]
 800a0a8:	da08      	bge.n	800a0bc <__sfputc_r+0x1e>
 800a0aa:	6994      	ldr	r4, [r2, #24]
 800a0ac:	42a3      	cmp	r3, r4
 800a0ae:	db01      	blt.n	800a0b4 <__sfputc_r+0x16>
 800a0b0:	290a      	cmp	r1, #10
 800a0b2:	d103      	bne.n	800a0bc <__sfputc_r+0x1e>
 800a0b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0b8:	f000 b934 	b.w	800a324 <__swbuf_r>
 800a0bc:	6813      	ldr	r3, [r2, #0]
 800a0be:	1c58      	adds	r0, r3, #1
 800a0c0:	6010      	str	r0, [r2, #0]
 800a0c2:	7019      	strb	r1, [r3, #0]
 800a0c4:	4608      	mov	r0, r1
 800a0c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0ca:	4770      	bx	lr

0800a0cc <__sfputs_r>:
 800a0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ce:	4606      	mov	r6, r0
 800a0d0:	460f      	mov	r7, r1
 800a0d2:	4614      	mov	r4, r2
 800a0d4:	18d5      	adds	r5, r2, r3
 800a0d6:	42ac      	cmp	r4, r5
 800a0d8:	d101      	bne.n	800a0de <__sfputs_r+0x12>
 800a0da:	2000      	movs	r0, #0
 800a0dc:	e007      	b.n	800a0ee <__sfputs_r+0x22>
 800a0de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0e2:	463a      	mov	r2, r7
 800a0e4:	4630      	mov	r0, r6
 800a0e6:	f7ff ffda 	bl	800a09e <__sfputc_r>
 800a0ea:	1c43      	adds	r3, r0, #1
 800a0ec:	d1f3      	bne.n	800a0d6 <__sfputs_r+0xa>
 800a0ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a0f0 <_vfiprintf_r>:
 800a0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f4:	460d      	mov	r5, r1
 800a0f6:	b09d      	sub	sp, #116	; 0x74
 800a0f8:	4614      	mov	r4, r2
 800a0fa:	4698      	mov	r8, r3
 800a0fc:	4606      	mov	r6, r0
 800a0fe:	b118      	cbz	r0, 800a108 <_vfiprintf_r+0x18>
 800a100:	6a03      	ldr	r3, [r0, #32]
 800a102:	b90b      	cbnz	r3, 800a108 <_vfiprintf_r+0x18>
 800a104:	f7fe f8da 	bl	80082bc <__sinit>
 800a108:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a10a:	07d9      	lsls	r1, r3, #31
 800a10c:	d405      	bmi.n	800a11a <_vfiprintf_r+0x2a>
 800a10e:	89ab      	ldrh	r3, [r5, #12]
 800a110:	059a      	lsls	r2, r3, #22
 800a112:	d402      	bmi.n	800a11a <_vfiprintf_r+0x2a>
 800a114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a116:	f7fe f9e8 	bl	80084ea <__retarget_lock_acquire_recursive>
 800a11a:	89ab      	ldrh	r3, [r5, #12]
 800a11c:	071b      	lsls	r3, r3, #28
 800a11e:	d501      	bpl.n	800a124 <_vfiprintf_r+0x34>
 800a120:	692b      	ldr	r3, [r5, #16]
 800a122:	b99b      	cbnz	r3, 800a14c <_vfiprintf_r+0x5c>
 800a124:	4629      	mov	r1, r5
 800a126:	4630      	mov	r0, r6
 800a128:	f000 f93a 	bl	800a3a0 <__swsetup_r>
 800a12c:	b170      	cbz	r0, 800a14c <_vfiprintf_r+0x5c>
 800a12e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a130:	07dc      	lsls	r4, r3, #31
 800a132:	d504      	bpl.n	800a13e <_vfiprintf_r+0x4e>
 800a134:	f04f 30ff 	mov.w	r0, #4294967295
 800a138:	b01d      	add	sp, #116	; 0x74
 800a13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a13e:	89ab      	ldrh	r3, [r5, #12]
 800a140:	0598      	lsls	r0, r3, #22
 800a142:	d4f7      	bmi.n	800a134 <_vfiprintf_r+0x44>
 800a144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a146:	f7fe f9d1 	bl	80084ec <__retarget_lock_release_recursive>
 800a14a:	e7f3      	b.n	800a134 <_vfiprintf_r+0x44>
 800a14c:	2300      	movs	r3, #0
 800a14e:	9309      	str	r3, [sp, #36]	; 0x24
 800a150:	2320      	movs	r3, #32
 800a152:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a156:	f8cd 800c 	str.w	r8, [sp, #12]
 800a15a:	2330      	movs	r3, #48	; 0x30
 800a15c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a310 <_vfiprintf_r+0x220>
 800a160:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a164:	f04f 0901 	mov.w	r9, #1
 800a168:	4623      	mov	r3, r4
 800a16a:	469a      	mov	sl, r3
 800a16c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a170:	b10a      	cbz	r2, 800a176 <_vfiprintf_r+0x86>
 800a172:	2a25      	cmp	r2, #37	; 0x25
 800a174:	d1f9      	bne.n	800a16a <_vfiprintf_r+0x7a>
 800a176:	ebba 0b04 	subs.w	fp, sl, r4
 800a17a:	d00b      	beq.n	800a194 <_vfiprintf_r+0xa4>
 800a17c:	465b      	mov	r3, fp
 800a17e:	4622      	mov	r2, r4
 800a180:	4629      	mov	r1, r5
 800a182:	4630      	mov	r0, r6
 800a184:	f7ff ffa2 	bl	800a0cc <__sfputs_r>
 800a188:	3001      	adds	r0, #1
 800a18a:	f000 80a9 	beq.w	800a2e0 <_vfiprintf_r+0x1f0>
 800a18e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a190:	445a      	add	r2, fp
 800a192:	9209      	str	r2, [sp, #36]	; 0x24
 800a194:	f89a 3000 	ldrb.w	r3, [sl]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	f000 80a1 	beq.w	800a2e0 <_vfiprintf_r+0x1f0>
 800a19e:	2300      	movs	r3, #0
 800a1a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1a8:	f10a 0a01 	add.w	sl, sl, #1
 800a1ac:	9304      	str	r3, [sp, #16]
 800a1ae:	9307      	str	r3, [sp, #28]
 800a1b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1b4:	931a      	str	r3, [sp, #104]	; 0x68
 800a1b6:	4654      	mov	r4, sl
 800a1b8:	2205      	movs	r2, #5
 800a1ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1be:	4854      	ldr	r0, [pc, #336]	; (800a310 <_vfiprintf_r+0x220>)
 800a1c0:	f7f6 f806 	bl	80001d0 <memchr>
 800a1c4:	9a04      	ldr	r2, [sp, #16]
 800a1c6:	b9d8      	cbnz	r0, 800a200 <_vfiprintf_r+0x110>
 800a1c8:	06d1      	lsls	r1, r2, #27
 800a1ca:	bf44      	itt	mi
 800a1cc:	2320      	movmi	r3, #32
 800a1ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1d2:	0713      	lsls	r3, r2, #28
 800a1d4:	bf44      	itt	mi
 800a1d6:	232b      	movmi	r3, #43	; 0x2b
 800a1d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1dc:	f89a 3000 	ldrb.w	r3, [sl]
 800a1e0:	2b2a      	cmp	r3, #42	; 0x2a
 800a1e2:	d015      	beq.n	800a210 <_vfiprintf_r+0x120>
 800a1e4:	9a07      	ldr	r2, [sp, #28]
 800a1e6:	4654      	mov	r4, sl
 800a1e8:	2000      	movs	r0, #0
 800a1ea:	f04f 0c0a 	mov.w	ip, #10
 800a1ee:	4621      	mov	r1, r4
 800a1f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1f4:	3b30      	subs	r3, #48	; 0x30
 800a1f6:	2b09      	cmp	r3, #9
 800a1f8:	d94d      	bls.n	800a296 <_vfiprintf_r+0x1a6>
 800a1fa:	b1b0      	cbz	r0, 800a22a <_vfiprintf_r+0x13a>
 800a1fc:	9207      	str	r2, [sp, #28]
 800a1fe:	e014      	b.n	800a22a <_vfiprintf_r+0x13a>
 800a200:	eba0 0308 	sub.w	r3, r0, r8
 800a204:	fa09 f303 	lsl.w	r3, r9, r3
 800a208:	4313      	orrs	r3, r2
 800a20a:	9304      	str	r3, [sp, #16]
 800a20c:	46a2      	mov	sl, r4
 800a20e:	e7d2      	b.n	800a1b6 <_vfiprintf_r+0xc6>
 800a210:	9b03      	ldr	r3, [sp, #12]
 800a212:	1d19      	adds	r1, r3, #4
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	9103      	str	r1, [sp, #12]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	bfbb      	ittet	lt
 800a21c:	425b      	neglt	r3, r3
 800a21e:	f042 0202 	orrlt.w	r2, r2, #2
 800a222:	9307      	strge	r3, [sp, #28]
 800a224:	9307      	strlt	r3, [sp, #28]
 800a226:	bfb8      	it	lt
 800a228:	9204      	strlt	r2, [sp, #16]
 800a22a:	7823      	ldrb	r3, [r4, #0]
 800a22c:	2b2e      	cmp	r3, #46	; 0x2e
 800a22e:	d10c      	bne.n	800a24a <_vfiprintf_r+0x15a>
 800a230:	7863      	ldrb	r3, [r4, #1]
 800a232:	2b2a      	cmp	r3, #42	; 0x2a
 800a234:	d134      	bne.n	800a2a0 <_vfiprintf_r+0x1b0>
 800a236:	9b03      	ldr	r3, [sp, #12]
 800a238:	1d1a      	adds	r2, r3, #4
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	9203      	str	r2, [sp, #12]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	bfb8      	it	lt
 800a242:	f04f 33ff 	movlt.w	r3, #4294967295
 800a246:	3402      	adds	r4, #2
 800a248:	9305      	str	r3, [sp, #20]
 800a24a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a320 <_vfiprintf_r+0x230>
 800a24e:	7821      	ldrb	r1, [r4, #0]
 800a250:	2203      	movs	r2, #3
 800a252:	4650      	mov	r0, sl
 800a254:	f7f5 ffbc 	bl	80001d0 <memchr>
 800a258:	b138      	cbz	r0, 800a26a <_vfiprintf_r+0x17a>
 800a25a:	9b04      	ldr	r3, [sp, #16]
 800a25c:	eba0 000a 	sub.w	r0, r0, sl
 800a260:	2240      	movs	r2, #64	; 0x40
 800a262:	4082      	lsls	r2, r0
 800a264:	4313      	orrs	r3, r2
 800a266:	3401      	adds	r4, #1
 800a268:	9304      	str	r3, [sp, #16]
 800a26a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a26e:	4829      	ldr	r0, [pc, #164]	; (800a314 <_vfiprintf_r+0x224>)
 800a270:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a274:	2206      	movs	r2, #6
 800a276:	f7f5 ffab 	bl	80001d0 <memchr>
 800a27a:	2800      	cmp	r0, #0
 800a27c:	d03f      	beq.n	800a2fe <_vfiprintf_r+0x20e>
 800a27e:	4b26      	ldr	r3, [pc, #152]	; (800a318 <_vfiprintf_r+0x228>)
 800a280:	bb1b      	cbnz	r3, 800a2ca <_vfiprintf_r+0x1da>
 800a282:	9b03      	ldr	r3, [sp, #12]
 800a284:	3307      	adds	r3, #7
 800a286:	f023 0307 	bic.w	r3, r3, #7
 800a28a:	3308      	adds	r3, #8
 800a28c:	9303      	str	r3, [sp, #12]
 800a28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a290:	443b      	add	r3, r7
 800a292:	9309      	str	r3, [sp, #36]	; 0x24
 800a294:	e768      	b.n	800a168 <_vfiprintf_r+0x78>
 800a296:	fb0c 3202 	mla	r2, ip, r2, r3
 800a29a:	460c      	mov	r4, r1
 800a29c:	2001      	movs	r0, #1
 800a29e:	e7a6      	b.n	800a1ee <_vfiprintf_r+0xfe>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	3401      	adds	r4, #1
 800a2a4:	9305      	str	r3, [sp, #20]
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	f04f 0c0a 	mov.w	ip, #10
 800a2ac:	4620      	mov	r0, r4
 800a2ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2b2:	3a30      	subs	r2, #48	; 0x30
 800a2b4:	2a09      	cmp	r2, #9
 800a2b6:	d903      	bls.n	800a2c0 <_vfiprintf_r+0x1d0>
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d0c6      	beq.n	800a24a <_vfiprintf_r+0x15a>
 800a2bc:	9105      	str	r1, [sp, #20]
 800a2be:	e7c4      	b.n	800a24a <_vfiprintf_r+0x15a>
 800a2c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2c4:	4604      	mov	r4, r0
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e7f0      	b.n	800a2ac <_vfiprintf_r+0x1bc>
 800a2ca:	ab03      	add	r3, sp, #12
 800a2cc:	9300      	str	r3, [sp, #0]
 800a2ce:	462a      	mov	r2, r5
 800a2d0:	4b12      	ldr	r3, [pc, #72]	; (800a31c <_vfiprintf_r+0x22c>)
 800a2d2:	a904      	add	r1, sp, #16
 800a2d4:	4630      	mov	r0, r6
 800a2d6:	f7fd fb9f 	bl	8007a18 <_printf_float>
 800a2da:	4607      	mov	r7, r0
 800a2dc:	1c78      	adds	r0, r7, #1
 800a2de:	d1d6      	bne.n	800a28e <_vfiprintf_r+0x19e>
 800a2e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2e2:	07d9      	lsls	r1, r3, #31
 800a2e4:	d405      	bmi.n	800a2f2 <_vfiprintf_r+0x202>
 800a2e6:	89ab      	ldrh	r3, [r5, #12]
 800a2e8:	059a      	lsls	r2, r3, #22
 800a2ea:	d402      	bmi.n	800a2f2 <_vfiprintf_r+0x202>
 800a2ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2ee:	f7fe f8fd 	bl	80084ec <__retarget_lock_release_recursive>
 800a2f2:	89ab      	ldrh	r3, [r5, #12]
 800a2f4:	065b      	lsls	r3, r3, #25
 800a2f6:	f53f af1d 	bmi.w	800a134 <_vfiprintf_r+0x44>
 800a2fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2fc:	e71c      	b.n	800a138 <_vfiprintf_r+0x48>
 800a2fe:	ab03      	add	r3, sp, #12
 800a300:	9300      	str	r3, [sp, #0]
 800a302:	462a      	mov	r2, r5
 800a304:	4b05      	ldr	r3, [pc, #20]	; (800a31c <_vfiprintf_r+0x22c>)
 800a306:	a904      	add	r1, sp, #16
 800a308:	4630      	mov	r0, r6
 800a30a:	f7fd fe29 	bl	8007f60 <_printf_i>
 800a30e:	e7e4      	b.n	800a2da <_vfiprintf_r+0x1ea>
 800a310:	0800a8d4 	.word	0x0800a8d4
 800a314:	0800a8de 	.word	0x0800a8de
 800a318:	08007a19 	.word	0x08007a19
 800a31c:	0800a0cd 	.word	0x0800a0cd
 800a320:	0800a8da 	.word	0x0800a8da

0800a324 <__swbuf_r>:
 800a324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a326:	460e      	mov	r6, r1
 800a328:	4614      	mov	r4, r2
 800a32a:	4605      	mov	r5, r0
 800a32c:	b118      	cbz	r0, 800a336 <__swbuf_r+0x12>
 800a32e:	6a03      	ldr	r3, [r0, #32]
 800a330:	b90b      	cbnz	r3, 800a336 <__swbuf_r+0x12>
 800a332:	f7fd ffc3 	bl	80082bc <__sinit>
 800a336:	69a3      	ldr	r3, [r4, #24]
 800a338:	60a3      	str	r3, [r4, #8]
 800a33a:	89a3      	ldrh	r3, [r4, #12]
 800a33c:	071a      	lsls	r2, r3, #28
 800a33e:	d525      	bpl.n	800a38c <__swbuf_r+0x68>
 800a340:	6923      	ldr	r3, [r4, #16]
 800a342:	b31b      	cbz	r3, 800a38c <__swbuf_r+0x68>
 800a344:	6823      	ldr	r3, [r4, #0]
 800a346:	6922      	ldr	r2, [r4, #16]
 800a348:	1a98      	subs	r0, r3, r2
 800a34a:	6963      	ldr	r3, [r4, #20]
 800a34c:	b2f6      	uxtb	r6, r6
 800a34e:	4283      	cmp	r3, r0
 800a350:	4637      	mov	r7, r6
 800a352:	dc04      	bgt.n	800a35e <__swbuf_r+0x3a>
 800a354:	4621      	mov	r1, r4
 800a356:	4628      	mov	r0, r5
 800a358:	f7ff fd9e 	bl	8009e98 <_fflush_r>
 800a35c:	b9e0      	cbnz	r0, 800a398 <__swbuf_r+0x74>
 800a35e:	68a3      	ldr	r3, [r4, #8]
 800a360:	3b01      	subs	r3, #1
 800a362:	60a3      	str	r3, [r4, #8]
 800a364:	6823      	ldr	r3, [r4, #0]
 800a366:	1c5a      	adds	r2, r3, #1
 800a368:	6022      	str	r2, [r4, #0]
 800a36a:	701e      	strb	r6, [r3, #0]
 800a36c:	6962      	ldr	r2, [r4, #20]
 800a36e:	1c43      	adds	r3, r0, #1
 800a370:	429a      	cmp	r2, r3
 800a372:	d004      	beq.n	800a37e <__swbuf_r+0x5a>
 800a374:	89a3      	ldrh	r3, [r4, #12]
 800a376:	07db      	lsls	r3, r3, #31
 800a378:	d506      	bpl.n	800a388 <__swbuf_r+0x64>
 800a37a:	2e0a      	cmp	r6, #10
 800a37c:	d104      	bne.n	800a388 <__swbuf_r+0x64>
 800a37e:	4621      	mov	r1, r4
 800a380:	4628      	mov	r0, r5
 800a382:	f7ff fd89 	bl	8009e98 <_fflush_r>
 800a386:	b938      	cbnz	r0, 800a398 <__swbuf_r+0x74>
 800a388:	4638      	mov	r0, r7
 800a38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a38c:	4621      	mov	r1, r4
 800a38e:	4628      	mov	r0, r5
 800a390:	f000 f806 	bl	800a3a0 <__swsetup_r>
 800a394:	2800      	cmp	r0, #0
 800a396:	d0d5      	beq.n	800a344 <__swbuf_r+0x20>
 800a398:	f04f 37ff 	mov.w	r7, #4294967295
 800a39c:	e7f4      	b.n	800a388 <__swbuf_r+0x64>
	...

0800a3a0 <__swsetup_r>:
 800a3a0:	b538      	push	{r3, r4, r5, lr}
 800a3a2:	4b2a      	ldr	r3, [pc, #168]	; (800a44c <__swsetup_r+0xac>)
 800a3a4:	4605      	mov	r5, r0
 800a3a6:	6818      	ldr	r0, [r3, #0]
 800a3a8:	460c      	mov	r4, r1
 800a3aa:	b118      	cbz	r0, 800a3b4 <__swsetup_r+0x14>
 800a3ac:	6a03      	ldr	r3, [r0, #32]
 800a3ae:	b90b      	cbnz	r3, 800a3b4 <__swsetup_r+0x14>
 800a3b0:	f7fd ff84 	bl	80082bc <__sinit>
 800a3b4:	89a3      	ldrh	r3, [r4, #12]
 800a3b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3ba:	0718      	lsls	r0, r3, #28
 800a3bc:	d422      	bmi.n	800a404 <__swsetup_r+0x64>
 800a3be:	06d9      	lsls	r1, r3, #27
 800a3c0:	d407      	bmi.n	800a3d2 <__swsetup_r+0x32>
 800a3c2:	2309      	movs	r3, #9
 800a3c4:	602b      	str	r3, [r5, #0]
 800a3c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a3ca:	81a3      	strh	r3, [r4, #12]
 800a3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a3d0:	e034      	b.n	800a43c <__swsetup_r+0x9c>
 800a3d2:	0758      	lsls	r0, r3, #29
 800a3d4:	d512      	bpl.n	800a3fc <__swsetup_r+0x5c>
 800a3d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3d8:	b141      	cbz	r1, 800a3ec <__swsetup_r+0x4c>
 800a3da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3de:	4299      	cmp	r1, r3
 800a3e0:	d002      	beq.n	800a3e8 <__swsetup_r+0x48>
 800a3e2:	4628      	mov	r0, r5
 800a3e4:	f7fe fefe 	bl	80091e4 <_free_r>
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	6363      	str	r3, [r4, #52]	; 0x34
 800a3ec:	89a3      	ldrh	r3, [r4, #12]
 800a3ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a3f2:	81a3      	strh	r3, [r4, #12]
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	6063      	str	r3, [r4, #4]
 800a3f8:	6923      	ldr	r3, [r4, #16]
 800a3fa:	6023      	str	r3, [r4, #0]
 800a3fc:	89a3      	ldrh	r3, [r4, #12]
 800a3fe:	f043 0308 	orr.w	r3, r3, #8
 800a402:	81a3      	strh	r3, [r4, #12]
 800a404:	6923      	ldr	r3, [r4, #16]
 800a406:	b94b      	cbnz	r3, 800a41c <__swsetup_r+0x7c>
 800a408:	89a3      	ldrh	r3, [r4, #12]
 800a40a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a40e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a412:	d003      	beq.n	800a41c <__swsetup_r+0x7c>
 800a414:	4621      	mov	r1, r4
 800a416:	4628      	mov	r0, r5
 800a418:	f000 f884 	bl	800a524 <__smakebuf_r>
 800a41c:	89a0      	ldrh	r0, [r4, #12]
 800a41e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a422:	f010 0301 	ands.w	r3, r0, #1
 800a426:	d00a      	beq.n	800a43e <__swsetup_r+0x9e>
 800a428:	2300      	movs	r3, #0
 800a42a:	60a3      	str	r3, [r4, #8]
 800a42c:	6963      	ldr	r3, [r4, #20]
 800a42e:	425b      	negs	r3, r3
 800a430:	61a3      	str	r3, [r4, #24]
 800a432:	6923      	ldr	r3, [r4, #16]
 800a434:	b943      	cbnz	r3, 800a448 <__swsetup_r+0xa8>
 800a436:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a43a:	d1c4      	bne.n	800a3c6 <__swsetup_r+0x26>
 800a43c:	bd38      	pop	{r3, r4, r5, pc}
 800a43e:	0781      	lsls	r1, r0, #30
 800a440:	bf58      	it	pl
 800a442:	6963      	ldrpl	r3, [r4, #20]
 800a444:	60a3      	str	r3, [r4, #8]
 800a446:	e7f4      	b.n	800a432 <__swsetup_r+0x92>
 800a448:	2000      	movs	r0, #0
 800a44a:	e7f7      	b.n	800a43c <__swsetup_r+0x9c>
 800a44c:	20000064 	.word	0x20000064

0800a450 <_raise_r>:
 800a450:	291f      	cmp	r1, #31
 800a452:	b538      	push	{r3, r4, r5, lr}
 800a454:	4604      	mov	r4, r0
 800a456:	460d      	mov	r5, r1
 800a458:	d904      	bls.n	800a464 <_raise_r+0x14>
 800a45a:	2316      	movs	r3, #22
 800a45c:	6003      	str	r3, [r0, #0]
 800a45e:	f04f 30ff 	mov.w	r0, #4294967295
 800a462:	bd38      	pop	{r3, r4, r5, pc}
 800a464:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a466:	b112      	cbz	r2, 800a46e <_raise_r+0x1e>
 800a468:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a46c:	b94b      	cbnz	r3, 800a482 <_raise_r+0x32>
 800a46e:	4620      	mov	r0, r4
 800a470:	f000 f830 	bl	800a4d4 <_getpid_r>
 800a474:	462a      	mov	r2, r5
 800a476:	4601      	mov	r1, r0
 800a478:	4620      	mov	r0, r4
 800a47a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a47e:	f000 b817 	b.w	800a4b0 <_kill_r>
 800a482:	2b01      	cmp	r3, #1
 800a484:	d00a      	beq.n	800a49c <_raise_r+0x4c>
 800a486:	1c59      	adds	r1, r3, #1
 800a488:	d103      	bne.n	800a492 <_raise_r+0x42>
 800a48a:	2316      	movs	r3, #22
 800a48c:	6003      	str	r3, [r0, #0]
 800a48e:	2001      	movs	r0, #1
 800a490:	e7e7      	b.n	800a462 <_raise_r+0x12>
 800a492:	2400      	movs	r4, #0
 800a494:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a498:	4628      	mov	r0, r5
 800a49a:	4798      	blx	r3
 800a49c:	2000      	movs	r0, #0
 800a49e:	e7e0      	b.n	800a462 <_raise_r+0x12>

0800a4a0 <raise>:
 800a4a0:	4b02      	ldr	r3, [pc, #8]	; (800a4ac <raise+0xc>)
 800a4a2:	4601      	mov	r1, r0
 800a4a4:	6818      	ldr	r0, [r3, #0]
 800a4a6:	f7ff bfd3 	b.w	800a450 <_raise_r>
 800a4aa:	bf00      	nop
 800a4ac:	20000064 	.word	0x20000064

0800a4b0 <_kill_r>:
 800a4b0:	b538      	push	{r3, r4, r5, lr}
 800a4b2:	4d07      	ldr	r5, [pc, #28]	; (800a4d0 <_kill_r+0x20>)
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	4604      	mov	r4, r0
 800a4b8:	4608      	mov	r0, r1
 800a4ba:	4611      	mov	r1, r2
 800a4bc:	602b      	str	r3, [r5, #0]
 800a4be:	f7f7 fdef 	bl	80020a0 <_kill>
 800a4c2:	1c43      	adds	r3, r0, #1
 800a4c4:	d102      	bne.n	800a4cc <_kill_r+0x1c>
 800a4c6:	682b      	ldr	r3, [r5, #0]
 800a4c8:	b103      	cbz	r3, 800a4cc <_kill_r+0x1c>
 800a4ca:	6023      	str	r3, [r4, #0]
 800a4cc:	bd38      	pop	{r3, r4, r5, pc}
 800a4ce:	bf00      	nop
 800a4d0:	20000520 	.word	0x20000520

0800a4d4 <_getpid_r>:
 800a4d4:	f7f7 bddc 	b.w	8002090 <_getpid>

0800a4d8 <__swhatbuf_r>:
 800a4d8:	b570      	push	{r4, r5, r6, lr}
 800a4da:	460c      	mov	r4, r1
 800a4dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4e0:	2900      	cmp	r1, #0
 800a4e2:	b096      	sub	sp, #88	; 0x58
 800a4e4:	4615      	mov	r5, r2
 800a4e6:	461e      	mov	r6, r3
 800a4e8:	da0d      	bge.n	800a506 <__swhatbuf_r+0x2e>
 800a4ea:	89a3      	ldrh	r3, [r4, #12]
 800a4ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a4f0:	f04f 0100 	mov.w	r1, #0
 800a4f4:	bf0c      	ite	eq
 800a4f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a4fa:	2340      	movne	r3, #64	; 0x40
 800a4fc:	2000      	movs	r0, #0
 800a4fe:	6031      	str	r1, [r6, #0]
 800a500:	602b      	str	r3, [r5, #0]
 800a502:	b016      	add	sp, #88	; 0x58
 800a504:	bd70      	pop	{r4, r5, r6, pc}
 800a506:	466a      	mov	r2, sp
 800a508:	f000 f848 	bl	800a59c <_fstat_r>
 800a50c:	2800      	cmp	r0, #0
 800a50e:	dbec      	blt.n	800a4ea <__swhatbuf_r+0x12>
 800a510:	9901      	ldr	r1, [sp, #4]
 800a512:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a516:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a51a:	4259      	negs	r1, r3
 800a51c:	4159      	adcs	r1, r3
 800a51e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a522:	e7eb      	b.n	800a4fc <__swhatbuf_r+0x24>

0800a524 <__smakebuf_r>:
 800a524:	898b      	ldrh	r3, [r1, #12]
 800a526:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a528:	079d      	lsls	r5, r3, #30
 800a52a:	4606      	mov	r6, r0
 800a52c:	460c      	mov	r4, r1
 800a52e:	d507      	bpl.n	800a540 <__smakebuf_r+0x1c>
 800a530:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a534:	6023      	str	r3, [r4, #0]
 800a536:	6123      	str	r3, [r4, #16]
 800a538:	2301      	movs	r3, #1
 800a53a:	6163      	str	r3, [r4, #20]
 800a53c:	b002      	add	sp, #8
 800a53e:	bd70      	pop	{r4, r5, r6, pc}
 800a540:	ab01      	add	r3, sp, #4
 800a542:	466a      	mov	r2, sp
 800a544:	f7ff ffc8 	bl	800a4d8 <__swhatbuf_r>
 800a548:	9900      	ldr	r1, [sp, #0]
 800a54a:	4605      	mov	r5, r0
 800a54c:	4630      	mov	r0, r6
 800a54e:	f7fe febd 	bl	80092cc <_malloc_r>
 800a552:	b948      	cbnz	r0, 800a568 <__smakebuf_r+0x44>
 800a554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a558:	059a      	lsls	r2, r3, #22
 800a55a:	d4ef      	bmi.n	800a53c <__smakebuf_r+0x18>
 800a55c:	f023 0303 	bic.w	r3, r3, #3
 800a560:	f043 0302 	orr.w	r3, r3, #2
 800a564:	81a3      	strh	r3, [r4, #12]
 800a566:	e7e3      	b.n	800a530 <__smakebuf_r+0xc>
 800a568:	89a3      	ldrh	r3, [r4, #12]
 800a56a:	6020      	str	r0, [r4, #0]
 800a56c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a570:	81a3      	strh	r3, [r4, #12]
 800a572:	9b00      	ldr	r3, [sp, #0]
 800a574:	6163      	str	r3, [r4, #20]
 800a576:	9b01      	ldr	r3, [sp, #4]
 800a578:	6120      	str	r0, [r4, #16]
 800a57a:	b15b      	cbz	r3, 800a594 <__smakebuf_r+0x70>
 800a57c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a580:	4630      	mov	r0, r6
 800a582:	f000 f81d 	bl	800a5c0 <_isatty_r>
 800a586:	b128      	cbz	r0, 800a594 <__smakebuf_r+0x70>
 800a588:	89a3      	ldrh	r3, [r4, #12]
 800a58a:	f023 0303 	bic.w	r3, r3, #3
 800a58e:	f043 0301 	orr.w	r3, r3, #1
 800a592:	81a3      	strh	r3, [r4, #12]
 800a594:	89a3      	ldrh	r3, [r4, #12]
 800a596:	431d      	orrs	r5, r3
 800a598:	81a5      	strh	r5, [r4, #12]
 800a59a:	e7cf      	b.n	800a53c <__smakebuf_r+0x18>

0800a59c <_fstat_r>:
 800a59c:	b538      	push	{r3, r4, r5, lr}
 800a59e:	4d07      	ldr	r5, [pc, #28]	; (800a5bc <_fstat_r+0x20>)
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	4608      	mov	r0, r1
 800a5a6:	4611      	mov	r1, r2
 800a5a8:	602b      	str	r3, [r5, #0]
 800a5aa:	f7f7 fdd8 	bl	800215e <_fstat>
 800a5ae:	1c43      	adds	r3, r0, #1
 800a5b0:	d102      	bne.n	800a5b8 <_fstat_r+0x1c>
 800a5b2:	682b      	ldr	r3, [r5, #0]
 800a5b4:	b103      	cbz	r3, 800a5b8 <_fstat_r+0x1c>
 800a5b6:	6023      	str	r3, [r4, #0]
 800a5b8:	bd38      	pop	{r3, r4, r5, pc}
 800a5ba:	bf00      	nop
 800a5bc:	20000520 	.word	0x20000520

0800a5c0 <_isatty_r>:
 800a5c0:	b538      	push	{r3, r4, r5, lr}
 800a5c2:	4d06      	ldr	r5, [pc, #24]	; (800a5dc <_isatty_r+0x1c>)
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	4604      	mov	r4, r0
 800a5c8:	4608      	mov	r0, r1
 800a5ca:	602b      	str	r3, [r5, #0]
 800a5cc:	f7f7 fdd7 	bl	800217e <_isatty>
 800a5d0:	1c43      	adds	r3, r0, #1
 800a5d2:	d102      	bne.n	800a5da <_isatty_r+0x1a>
 800a5d4:	682b      	ldr	r3, [r5, #0]
 800a5d6:	b103      	cbz	r3, 800a5da <_isatty_r+0x1a>
 800a5d8:	6023      	str	r3, [r4, #0]
 800a5da:	bd38      	pop	{r3, r4, r5, pc}
 800a5dc:	20000520 	.word	0x20000520

0800a5e0 <_init>:
 800a5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5e2:	bf00      	nop
 800a5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5e6:	bc08      	pop	{r3}
 800a5e8:	469e      	mov	lr, r3
 800a5ea:	4770      	bx	lr

0800a5ec <_fini>:
 800a5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ee:	bf00      	nop
 800a5f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5f2:	bc08      	pop	{r3}
 800a5f4:	469e      	mov	lr, r3
 800a5f6:	4770      	bx	lr
